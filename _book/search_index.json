[
["index.html", "Statistical Methods Chapter 1 Introduction 1.1 About the book 1.2 Software 1.3 R 1.4 SAS", " Statistical Methods Post, Avery, Osborne 2020-04-21 Chapter 1 Introduction 1.1 About the book The goal in creating this book is to provide a thorough treatment of applied statistical methodologies geared toward analyzing designed experiments. Our approach emphasizes the problems researchers encounter rather than providing a litany of solutions with only modest context. We discuss a real scientific problem, thoughtfully consider the data that could be used to answer that problem, investigate experimental designs that would be useful, and pursue statistical models to make informed decisions in the context of how the data was collected. The focus of the book is on the statistical modeling portion but problems are viewed holistically. We purposefully introduce the linear model framework in matrix form early on and place most of the methodologies under that umbrella. This helps the reader to see the methods as a part of a general framework as opposed to a set of tools within a toolbox. We believe that the book should be appropriate for a graduate level student that has some comfort in mathematics, particularly linear algebra. Both SAS and R are used throughout to make sure the book works for a wide audience of practitioners. 1.2 Software At this point, software is a requirement for statistics in practice. There are many available software solutions ranging from point and click to full on programming. We’ve decided to focus on R and SAS for this book. R is an open source, platform agnostic, software that is widely used by statisticians. We’ll use the RStudio interactive development environment to write and execute our R code. SAS is an extremely powerful and widely used software for modelling and analysis. It requires a license, but for those without one, SAS University Edition can be installed for free and is also platform agnostic. We’ll use the SAS Studio environment that comes with University Edition. As we progress through the book we’ll include graphs, descriptive statistics, and analyses from R and/or SAS. At the end of each chapter a section explaining how to create these in both R and SAS is included. The following sections give a brief introduction to each software that should prepare you for what’s ahead! You’ll also notice a certain style to the way our code is written. Good programming practices (GPPs) are essential for improving productivity and collaborating with others - including future you! There are a lot of guidelines and resources about GPPs available. We’ll cover just a few of the essentials here. Include a header at the top of the program that gives the author, date, and purpose of the program. Place comments throughout the program explaining the purpose of different chunks of code as well as your thought process. Spacing and indentation should be used throughout for readability of the program. Group sections of your code that serve a certain purpose together. Use a consistent naming scheme such as camelCase or underscores_between_words. Many of these and other GPPs can be taken care of by programming in a notebook environment such as JUPYTER (which can include SAS) or R Markdown. Also using a version control software such as Git and Github is really useful! 1.3 R The general workflow for programming in R involves taking raw data and importing it into R. Once that data is imported we often create numerical and graphical summaries of the data. An appropriate model and statistical methods are then applied. At the end of this section the reader should be able to do the following: install R and RStudio read and write basic R programs import well-formatted data into R do basic data manipulation in R As the book progresses the steps of summarizing and analyzing the data will be covered. Let’s get started! 1.3.1 Installing R and RStudio The R software itself can be downloaded and installed by visiting the Comprehensive R Archive Network (Cran) website. Here there are links to install R for Linux, Mac, and Windows-based machines. For Windows users, follow the initial ‘Download R for Windows’ link and then click ‘install R for the first time.’ From here you should now see a Download R X.x.x for Windows link that will download a .exe file. Once downloaded run that file and follow the prompts. For Mac users, follow the initial ‘Download R for (Mac) OS X’ link and click on the link near the ‘Latest Release’ section similar to R-x.x.x.pkg. Once downloaded, you should be able to install by double clicking on the file. For Linux users, follow the initial ‘Download R for Linux’ link. Choose your OS and instructions are given on how to download R. Once you’ve installed R you’ll want to install RStudio. RStudio is a well-developed environment that makes programming in R much easier! To download head to RStudio’s download page. From here choose RStudio Desktop (Open Source License) and a page with appropriate links to install are provided. 1.3.2 Using RStudio To program in R you’ll want to open RStudio. RStudio will submit R code for you so you never actually need to open R itself. There are four main ‘areas’ of the RStudio IDE: Console (&amp; Terminal) Scripting and Viewing Window Plots/Help (&amp; Files/Packages) Environment (&amp; Connections/Git) You may wish to rearrange the panes. This can be done via the menus at the top. Choose “Tools –&gt; Global Options”. Other useful global options to change are under the appearance tab (font size, theme) and under the code tab (editing –&gt; soft-wrap, display –&gt; show whitespace). 1.3.2.1 Console To evaluate code you can type directly into the console. #simple math operations # &lt;-- is a comment - code not evaluated 3 + 7 ## [1] 10 #exp is exponential function 10 * exp(3) ## [1] 200.8554 #log is the natural logarithm (base exp(1)) by default #pi is the built-in constant log(pi^2) ## [1] 2.28946 mean(cars$speed) ## [1] 15.4 hist(cars$speed) In the R sections of the book we spend much of our time learning the R syntax needed to create the appropriate summaries or analysis. 1.3.2.2 Scripting and Viewing Window Usually you don’t want to type code directly into the console because there isn’t an easy way to get the code for later use. Instead code is usually written in an R ‘script’ which is then saved. From an R script you can send code to console via: “Run” button (runs current line) CTRL+Enter (PC and Linux) or Command+Enter (MAC) Highlight section and do above To create a new R script you can use the menus at the top and go to File –&gt; New File –&gt; R Script. Take a moment and do this! Type the following into your script: View(cars) (note capital V) plot(cars) Submit it to the console using a button or hot key! 1.3.2.3 Plots/Help Created plots are stored in the Plots tab. This is a nice feature that allows you to cycle through past plots and easily save plots via menus. In this pane there is also a Help tab that will enable you to learn about R functions. In the console type help(hist) for instance. Information about the hist function is presented. Being able to parse these types of help files is a really useful skill! For every R function there are a few sections: Description - What the function is intended for. Usage - How to call the function, inputs required, and which inputs have default arguments. Here we see hist(x, ...). This implies there is only one required input, x, and there is no default. The ellipsis (...) is an important tool that gives a function (say A) that calls another function (say B) the flexibility to supply arguments specific to function B when calling function A. We’ll learn more about this in later chapters. Below you see a more detailed call to hist that includes other inputs. Each of these inputs has an equal sign with a value after it. This is the default value for that input (since there is a default value you don’t have to specify it when you call). For instance, the breaks = \"Sturges\" input implies that the “Sturges” method is the default for determining how the bins of the histogram are created. Arguments - Describes the input requirements in more detail. Details - Information about how the function works. Values - Information about what is returned to the user. References See Also - Related functions. Examples - Highly useful section giving code you can copy and paste to see an example of how the function can be used. 1.3.2.4 Environment R stores data/info/functions/etc. in R objects. An object is a data structure having attributes and methods (more on this shortly). You can create an R object via &lt;- (recommended) or =. #save for later avg &lt;- (5 + 7 + 6) / 3 #call avg object avg ## [1] 6 #strings (text) can be saved as well words &lt;- c(&quot;Hello there!&quot;, &quot;How are you?&quot;) words ## [1] &quot;Hello there!&quot; &quot;How are you?&quot; Notice that when you send the line avg &lt;- (5+ 7 + 6) / 3 to the console (i.e. create the object avg) that nothing prints out. This is common behavior when storing the object. The output or information is saved for later use in the object. To see the output or information you then simply call the object (a default printing method is used to display it). You can look at all current objects with ls(). ls() ## [1] &quot;avg&quot; &quot;words&quot; Use rm() to remove an object. rm(avg) ls() ## [1] &quot;words&quot; Built-in objects exist like letters and cars. letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; head(cars, n = 3) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 The function data() shows available built-in datasets. You should now be roughly familiar with the four main ‘areas’ of the RStudio IDE: Console (&amp; Terminal) Scripting and Viewing Window Plots/Help (&amp; Files/Packages) Environment (&amp; Connections/Git) 1.3.3 R Objects and Classes R has strong Object Oriented Programming (OOP) tools. Object: data structure with attributes (class) Method: procedures (functions) that act on object based on attributes R functions like print() or plot() act differently depending on an object’s class. class(cars) ## [1] &quot;data.frame&quot; plot(cars) class(exp) ## [1] &quot;function&quot; plot(exp) Many R functions exist to help understand an R Object. str() (structure) str(cars) ## &#39;data.frame&#39;: 50 obs. of 2 variables: ## $ speed: num 4 4 7 7 8 9 10 10 10 11 ... ## $ dist : num 2 10 4 22 16 10 18 26 34 17 ... class() class(cars) ## [1] &quot;data.frame&quot; typeof() typeof(cars) ## [1] &quot;list&quot; We’ll use these functions later to help us know how to extract information from an R object. Recall that we can create an R object via &lt;- (recommended) or =. This allocates computer memory to the object. The object’s attributes depend on how you created it. vec &lt;- c(1, 4, 10) class(vec) ## [1] &quot;numeric&quot; fit &lt;- lm(dist ~ speed, data = cars) class(fit) ## [1] &quot;lm&quot; 1.3.4 Data Objects To understand how to use R for data analysis we need to understand commonly used data structures: Atomic Vector (1D) Matrix (2D) Array (nd) (not covered) Data Frame (2D) List (1D) 1.3.4.1 Atomic Vector Let’s start with the most basic object and work our way up. An atomic vector is a 1D group of elements with an ordering. Two examples of atomic vectors are given below: All of the elements must be same ‘type’. Types include numeric (integer or double), character, or logical. We create an atomic vector with the c() function (‘combine’). #vectors (1 dimensional) objects x &lt;- c(17, 22, 1, 3, -3) y &lt;- c(&quot;cat&quot;, &quot;dog&quot;, &quot;bird&quot;, &quot;frog&quot;) x ## [1] 17 22 1 3 -3 y ## [1] &quot;cat&quot; &quot;dog&quot; &quot;bird&quot; &quot;frog&quot; In addition, many ‘functions’ output a numeric vector. Functions are at the heart of R so it is vital to understand them. The concept of a function is that the function takes an input or inputs and maps those inputs to some output(s). As an example, one function that outputs a numeric vector is the seq or sequence function. To know about a function you need to know about the inputs and ouputs. For seq we have the following: + Inputs = from, to, by (among others) + Output = a sequence of numbers v &lt;- seq(from = 1, to = 5, by = 1) v ## [1] 1 2 3 4 5 str(v) ## num [1:5] 1 2 3 4 5 str tells about the object v: num says it is numeric [1:5] implies one dimensional with elements 1, 2, 3, 4, 5 If the order of the function arguments is known, they do not need to be named when invoking the function as R uses positional matching to determine the inputs. Also, if you name some arguments but not others, R will use positional matching for the remaining inputs. For example, the calls below are all equivalent: seq(from = 1, to = 5, 1) seq(1, 5, 1) seq(to = 5, 1, 1) seq(by = 1, 1, 5) The seq function is used quite a bit. There is a shorthand way to create an integer sequence using :. 1:20 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 It is also important to know how R does math on its objects. R does elementwise addition/subtraction and multiplication/division to vectors, matrices, and data frames. (The matrix multiplicaiton operator is %*%.). 1:20/20 ## [1] 0.05 0.10 0.15 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65 0.70 0.75 ## [16] 0.80 0.85 0.90 0.95 1.00 1:20 + 1 ## [1] 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 As we mentioned earlier, understanding help files is really critical to being able to program in R. As functions are ubiquitous in R we often need to learn about their inputs (or arguments) and we can do so using help. To recap, our first commonly used R object for storing data is an atomic vector. This is a 1D group of elements with an ordering where all of the elements are of the same type. Generally vectors are useful to know about but not usually useful for a storing a dataset exactly. They can often be considered as the ‘building blocks’ for other data types. 1.3.4.2 Matrix A Matrix is a 2D data structure in R whose elements are all of the same type. The first dimension refers to the rows and the second dimension refers to the columns. A 2D data object is very common. The rows often represent the observations and the columns represent the variables. Although not technically right, it is useful to think of the columns of a matrix as vectors of the same type and length. For instance, consider the three vectors created here: #populate vectors x &lt;- c(17, 3, 13, 11) y &lt;- rep(-3, times = 4) z &lt;- 1:4 These are all of the same type. This can be checked with an is. (read as ‘is dot’) function. #check &#39;type&#39; is.numeric(x) ## [1] TRUE is.numeric(y) ## [1] TRUE is.numeric(z) ## [1] TRUE Not only are these three objects the same type but they are also the same length. This can be checked using the length function. #check &#39;length&#39; length(x) ## [1] 4 length(y) ## [1] 4 length(z) ## [1] 4 Again, it is useful to visualize the columns of a potential matrix as these vectors. We can create the matrix using the matrix function. The matrix function requires us to give the data as one vector. We can combine the x, y, and z objects into one vector using the c funciton. This is the first argument to the matrix function. The only other argument required is to either specify the number of rows (nrow =) or the number of columns (ncol =) (R will attempt to figure out the one that is not given using the total length of the specified data vector). #combine in a matrix matrix(c(x, y, z), ncol = 3) ## [,1] [,2] [,3] ## [1,] 17 -3 1 ## [2,] 3 -3 2 ## [3,] 13 -3 3 ## [4,] 11 -3 4 A matrix can also store character data as well. An example of this is given below and the number of rows is specified rather than the number of columns. Note the use of is.character from the is. family of functions. x &lt;- c(&quot;Hi&quot;, &quot;There&quot;, &quot;!&quot;) y &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) z &lt;- c(&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;) is.character(x) ## [1] TRUE matrix(c(x, y, z), nrow = 3) ## [,1] [,2] [,3] ## [1,] &quot;Hi&quot; &quot;a&quot; &quot;One&quot; ## [2,] &quot;There&quot; &quot;b&quot; &quot;Two&quot; ## [3,] &quot;!&quot; &quot;c&quot; &quot;Three&quot; To recap, a Matrix is a 2D data structure where we can think of the columns as vectors of the same type and length. These are useful for some datasets but most datasets have some numeric and some character variables. Another 2D object called a data frame is perfect for this type of data! 1.3.4.3 Data Frame A Data Frame is a 2D data structure where elements within a column must be of the same type but the columns themselves can differ in type. When thinking of a data frame, consider them as a collection (list) of vectors of the same length. A data frame can be created with the data.frame function. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;) y &lt;- c(1, 3, 4, -1, 5, 6) z &lt;- 10:15 data.frame(x, y, z) ## x y z ## 1 a 1 10 ## 2 b 3 11 ## 3 c 4 12 ## 4 d -1 13 ## 5 e 5 14 ## 6 f 6 15 You can also easily name the columns during creation. data.frame(char = x, data1 = y, data2 = z) ## char data1 data2 ## 1 a 1 10 ## 2 b 3 11 ## 3 c 4 12 ## 4 d -1 13 ## 5 e 5 14 ## 6 f 6 15 Notice that char, data1, and data2 become the variable names for the data frame. To recap, consider a data frame as a collection (list) of vectors of the same length. Tis type of data structure is perfect for most data sets! Most functions that read 2D data into R store it as a data frame. 1.3.4.4 List A List is a 1D group of objects with ordering. Really it is a vector that can have differing elements. Think of this in a similar way to the atomic vector previously discussed except the elements are really flexible. A list can be created with the list function. You specify the elements you want to include, separated by commas. list(1:3, rnorm(2), c(&quot;!&quot;, &quot;?&quot;)) ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] -1.19838629 -0.01190151 ## ## [[3]] ## [1] &quot;!&quot; &quot;?&quot; Similar to a data frame, you can add names to the list elements during creation. list(seq = 1:3, normVals = rnorm(2), punctuation = c(&quot;!&quot;, &quot;?&quot;)) ## $seq ## [1] 1 2 3 ## ## $normVals ## [1] 0.4705622 0.4936949 ## ## $punctuation ## [1] &quot;!&quot; &quot;?&quot; To recap, a list is a very flexible 1D object. It is really useful for more complex types of data. The table below gives a summary of the data objects we’ve covered. For most data analysis you’ll use data frames. Dimension Homogeneous Heterogeneous 1d Atomic Vector List 2d Matrix Data Frame Next we look at how to access or change parts of these common data objects. 1.3.5 Accessing Common Data Objects When we are dealing with a data object (1D or 2D) we may want to extract a single element, certain columns, or certain rows. In this section we’ll look at how to subset or extract information from each of the common data objects covered in the previous section. 1.3.5.1 Atomic Vector (1D) For atomic vectors (and lists, see later) you can return elements using square brackets []. You may notice that when R prints a vector to the console you often see [1] next to the first element and perhaps a [#] where R has to break and move to the next line of the console. The [1] implies the element printed next is the first element of the vector (R starts its counting at 1 not 0 like some other languages). The [#] implies that the element printed to the right is the # element of the vector. This is a good reminder of how to extract values from an atomic vector. As an example, here we extract from a built-in R object called letters that is a vector of length 26 containing the letters of the alphabet. letters #built-in vector ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; letters[1] #R starts counting at 1! ## [1] &quot;a&quot; letters[26] ## [1] &quot;z&quot; To obtain more than one element you can ‘feed’ in a vector of indices to that you’d like to return. letters[1:4] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; letters[c(5, 10, 15, 20, 25)] ## [1] &quot;e&quot; &quot;j&quot; &quot;o&quot; &quot;t&quot; &quot;y&quot; x &lt;- c(1, 2, 5) letters[x] ## [1] &quot;a&quot; &quot;b&quot; &quot;e&quot; If you’d like to return all values except a certain subset, you can use negative indices. letters[-(1:4)] ## [1] &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; ## [20] &quot;x&quot; &quot;y&quot; &quot;z&quot; x &lt;- c(1, 2, 5) letters[-x] ## [1] &quot;c&quot; &quot;d&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; ## [20] &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; 1.3.5.2 Matrices (2D) For rectangular data like a matrix you can return rectangular subsets using square brackets with a comma [ , ]. Notice default row and column names when R prints a matrix! mat &lt;- matrix(c(1:4, 20:17), ncol = 2) mat ## [,1] [,2] ## [1,] 1 20 ## [2,] 2 19 ## [3,] 3 18 ## [4,] 4 17 This is a nice reminder of how to index a matrix. The value prior to the columns represents which row(s) you want to return and the value after the comma which column(s). If an index is left blank then all of that corresponding dimension (row or column) is returned. mat[c(2, 4), ] ## [,1] [,2] ## [1,] 2 19 ## [2,] 4 17 mat[, 1] ## [1] 1 2 3 4 mat[2, ] ## [1] 2 19 mat[2, 1] ## [1] 2 Notice that R simplifies the result where possible. That is, returns an atomic vector if you have only 1 dimension and a matrix if two. This can be changed by adding an additional argument to the [ function. mat[ , 1, drop = FALSE] ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 Also, if you only give a single value in the [] then R uses the count of the value in the matrix. Counts go down columns first. mat[5] ## [1] 20 If your matrix has column names associated with it, you can also use those to return columns of interest. To add column names we can look run help(matrix) to learn how! Notice the dimnames argument. You can specify names for the rows and columns by using a list with two vectors. The first vector indicating row names and the second column names. If we don’t want to give row names we can give a NULL (a special value in R that is used for undefined values - here giving no specification of row names). We can do this and give a character vector for the column names. mat&lt;-matrix(c(1:4, 20:17), ncol = 2, dimnames = list(NULL, c(&quot;First&quot;, &quot;Second&quot;)) ) mat ## First Second ## [1,] 1 20 ## [2,] 2 19 ## [3,] 3 18 ## [4,] 4 17 Now we can request columns be using a single name or a character vector of names. mat[, &quot;First&quot;] ## [1] 1 2 3 4 To return all but certain parts of a matrix you can still use negative indices but note that this won’t work with column names. mat[-c(1,3), -&quot;First&quot;] ## Error in -&quot;First&quot;: invalid argument to unary operator mat[-c(1,3), &quot;First&quot;] ## [1] 2 4 1.3.5.3 Data Frames (2D) Since a data frame is also a rectangular data object you can return rectangular subsets using square brackets with a comma [ , ]! As an example, we’ll subset the built-in iris data frame. To get an idea about this object we can run str(iris). str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... We can see this is a data frame with a few columns, four are numeric and one is a factor (a special type of character vector essentially - these will be covered when we discuss plotting). iris[1:4, 2:4] ## Sepal.Width Petal.Length Petal.Width ## 1 3.5 1.4 0.2 ## 2 3.0 1.4 0.2 ## 3 3.2 1.3 0.2 ## 4 3.1 1.5 0.2 iris[1, ] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa iris[, 1] ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 ## [ reached getOption(&quot;max.print&quot;) -- omitted 50 entries ] Notice the simplification done when a single column is selected. R will simplify to a vector unless drop = FALSE is included as done in the matrix section. (The simplification doesn’t occur when a single row is selected because data frames are actually lists - we’ll discuss this more in the list section!) You can use columns names to subset as well. iris[1:10 , c(&quot;Sepal.Length&quot;, &quot;Species&quot;)] ## Sepal.Length Species ## 1 5.1 setosa ## 2 4.9 setosa ## 3 4.7 setosa ## 4 4.6 setosa ## 5 5.0 setosa ## 6 5.4 setosa ## 7 4.6 setosa ## 8 5.0 setosa ## 9 4.4 setosa ## 10 4.9 setosa The most common way to access a single column is to use the dollar sign operator. iris$Sepal.Length ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 ## [ reached getOption(&quot;max.print&quot;) -- omitted 50 entries ] A nice benefit of using RStudio is that column names will be filled in automatically as you type. In your console do the following: Type iris$ If no choices - hit tab Scroll up and down or continue typing to highlight the column of interest Hit tab again to choose 1.3.5.4 Lists (1D) As a list is a 1D data object we can use single square brackets [ ] for multiple list elements. x &lt;- list(&quot;HI&quot;, c(10:20), 1) x ## [[1]] ## [1] &quot;HI&quot; ## ## [[2]] ## [1] 10 11 12 13 14 15 16 17 18 19 20 ## ## [[3]] ## [1] 1 x[2:3] ## [[1]] ## [1] 10 11 12 13 14 15 16 17 18 19 20 ## ## [[2]] ## [1] 1 We can use double square brackets [[ ]] (or [ ]) to return a single list element. The major difference is in whether or not a list with the element chosen is returned or just the element itself. [[ will return just the element requested. x &lt;- list(&quot;HI&quot;, c(10:20), 1) x[1] ## [[1]] ## [1] &quot;HI&quot; x[[1]] ## [1] &quot;HI&quot; x[[2]] ## [1] 10 11 12 13 14 15 16 17 18 19 20 x[[2]][4:5] ## [1] 13 14 Recall we could name our list elements. If they are named we can use the $ similar to a data frame. x &lt;- list(&quot;HI&quot;, c(10:20), 1) str(x) ## List of 3 ## $ : chr &quot;HI&quot; ## $ : int [1:11] 10 11 12 13 14 15 16 17 18 19 ... ## $ : num 1 x &lt;- list(First = &quot;Hi&quot;, Second = c(10:20), Third = 1) x$Second ## [1] 10 11 12 13 14 15 16 17 18 19 20 Under the hood a data frame is just a list of equal length vectors! str(x) ## List of 3 ## $ First : chr &quot;Hi&quot; ## $ Second: int [1:11] 10 11 12 13 14 15 16 17 18 19 ... ## $ Third : num 1 str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... typeof(x) ## [1] &quot;list&quot; typeof(iris) ## [1] &quot;list&quot; This means we can index a data frame in a similar way to how we index a list if we want. iris[[2]] ## [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5 ## [19] 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 ## [37] 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3 ## [55] 2.8 2.8 3.3 2.4 2.9 2.7 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8 ## [73] 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5 ## [91] 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8 ## [ reached getOption(&quot;max.print&quot;) -- omitted 50 entries ] Lastly, one nice thing about lists (and data frames) is that you can use partial matching with [[ and $. That is, you don’t need to specify the full column name as long as you’ve specified enough characters as to be clear which column you are referring to. iris$Sp[1:10] ## [1] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa ## Levels: setosa versicolor virginica iris[[&quot;Petal.Len&quot;, exact = FALSE]] ## [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4 ## [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2 ## [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0 ## [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0 ## [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0 ## [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 ## [ reached getOption(&quot;max.print&quot;) -- omitted 50 entries ] This is less important now that RStudio can auto-complete long column names. 1.3.6 Basics of R Recap RStudio IDE (Integrated Development Environment) R Objects and Classes Data Objects &amp; Basic Manipulation Dimension Homogeneous Heterogeneous 1d Atomic Vector List 2d Matrix Data Frame Basic access via Atomic vectors - x[ ] Matrices - x[ , ] Data Frames - x[ , ] or x$name Lists - x[ ], x[[ ]], or x$name 1.3.7 Reading Data Basics When it comes to reading in data, where do we start? Our plan for this section is as follows: Look at common raw data formats Take a few quick asides: R projects, factors, and R packages Read ‘clean’ delimited data Read Excel, SAS, &amp; SPSS data Resources for JSON data, XML data, databases, and APIs How to read in data depends on raw/external data type! We’ll start by focusing on delimited data. Delimiter - Character (such as a,) that separates data entries To read in data we’ll need functions to do so. When you open R a few packages are loaded. R Packages: Collection of functions/datasets/etc. in one place Packages exist to do almost anything List of CRAN approved packages on R’s website Plenty of other packages on places like GitHub The utils package that automatically loads has a family of read. functions ready for use! Reading data with these functions is often referred to as reading with a standard R or base R method. Function and purpose: Type of Delimeter Function Comma read.csv() Semicolon (, for decimal) read.csv2() Tab read.delim() White Space/General read.table(sep = \"\") Each of these functions requires a path to the file in order to read it in. Let’s read in the ‘neuralgia.csv’ file. This is a comma separated value file (.csv). This requires the read.csv function. R locates the file by the path you give it. You can give full path name. For example, ex: C:/Users/jbpost2/repos/StatisticalMethods/datasets/neuralgia.csv ex: C:\\\\Users\\\\jbpost2\\\\repos\\\\StatisticalMethods\\\\datasets\\\\neuralgia.csv Notice that a double \\ is needed because \\ is an escape character in R so \\\\ is really read as \\. Ok, let’s read in the neuralgia csv file using read.csv. neuralgiaData &lt;- read.csv( &quot;C:/Users/jbpost2/repos/StatisticalMethods/datasets/neuralgia.csv&quot; ) head(neuralgiaData) ## Treatment Sex Age Duration Pain ## 1 P F 68 1 No ## 2 B M 74 16 No ## 3 P F 67 30 No ## 4 P M 66 26 Yes ## 5 B F 67 28 No ## 6 B F 77 16 No Pretty simple if the data is nicely formatted! Using a full local path is not recommended though! Doing so makes it difficult to share code without having to go in and change the paths. Instead, you can change the working directory R is using. That is, the folder by default R is ‘looking’ for files. Then we can supply a relative path. As long as other users have the same folder structure as you (say if you are using a github repo), no changes need to be made for them to run the code! We can determine the working directory using getwd. getwd() ## [1] &quot;C:/Users/jbpost2/repos/StatisticalMethods/software/R&quot; This can be changed using setwd. setwd(&quot;C:/Users/jbpost2/repos/StatisticalMethods/datasets&quot;) #or setwd(&quot;C:\\\\Users\\\\jbpost2\\\\repos\\\\StatisticalMethods\\\\datasets&quot;) The working directory can also be changed via the menus in RStudio. Another way to supply a path is via a URL. This is really handy if you have a place to host your datasets! neuralgiaData &lt;- read.csv(&quot;https://www4.stat.ncsu.edu/~online/datasets/neuralgia.csv&quot;) To recap, to read a csv file you can Use full local path (not recommended) Use relative path set working directory with setwd() Pull from a URL 1.3.8 Quick Aside: RStudio Project Often we have many files associated with an analysis. When working on multiple undertakings things get cluttered in R… With each analysis we may want to associate different + environments + histories + working directories + source documents. The “Project” feature in R Studio allows us to easily do this! To create you can use the drop down menus. Now you can easily switch between analyses by using “File –&gt; Open Project” or by using the little drop down menu in the top right of RStudio. 1.3.9 Quick Aside: Factors As mentioned above there are read. functions for many different types of delimited data. These functions work really well but there are a few areas they could be improved. A poor default function behavior as strings are read as factors Understanding factors is important enough to warrant a quick discussion. Let’s look at the structure of our neuralgiaData object we read in with read.csv. str(neuralgiaData) ## &#39;data.frame&#39;: 60 obs. of 5 variables: ## $ Treatment: Factor w/ 3 levels &quot;A&quot;,&quot;B&quot;,&quot;P&quot;: 3 2 3 3 2 2 1 2 2 1 ... ## $ Sex : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 1 2 1 2 1 1 1 1 1 2 ... ## $ Age : int 68 74 67 66 67 77 71 72 76 71 ... ## $ Duration : int 1 16 30 26 28 16 12 50 9 17 ... ## $ Pain : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 1 1 1 2 1 1 1 1 2 2 ... We can see that all of the character variables are Factor vectors. A factor is a special class of vector with a levels attribute. The levels define all possible values for that variable. This is a great concept for a variable that can only take on certain values such as Day (Monday, Tuesday, …, Sunday). However, if you have a variable like Name that you will eventually add new values (levels) to factors become a bit of a nuisance. For example, in the neuralgia dataset we may have a fourth treatment we want to add to the Treatment variable. Let’s try to assign the first observation value with a ‘new’ treatment called ‘M’. neuralgiaData$Treatment ## [1] P B P P B B A B B A A A B A P A P A P B B A A A B P B B P P A A B B B A P B ## [39] B P P P A B A P P A B P P P B A P A P A B A ## Levels: A B P neuralgiaData$Treatment[1] &lt;- &quot;M&quot; ## Warning in `[&lt;-.factor`(`*tmp*`, 1, value = structure(c(NA, 2L, 3L, 3L, : ## invalid factor level, NA generated We can see this throws an error because ‘M’ is not one of the levels defined for the variable. To add the new value we have to alter the levels attribute of the factor. #overwrite with another possible level levels(neuralgiaData$Treatment) &lt;- c(levels(neuralgiaData$Treatment), &quot;M&quot;) levels(neuralgiaData$Treatment) ## [1] &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;M&quot; neuralgiaData$Treatment[1] &lt;- &quot;M&quot; Factors are very useful for plotting as we’ll see later. For the other issues with the read. family we can look at useful functions from other R packages. R packages deserve a brief discussion as well! 1.3.10 Quick Aside: R Packages An R package is a collection of functions in one place. There are tons of packages to do most anything. In particular a group of packages called the “TidyVerse” has modernized the use of R for a larger audience. The tidyverse is a package that is a collection of eight R packages that share common philosophies and are designed to work together! One of these packages, readr, is extremely useful for reading in data and remedies the concerns mentioned above about the read. family of functions. The first time using a package you must ‘install’ the package (download the files). You can do this Using code: install.packages(&quot;tidyverse&quot;) #can do multiple packages at once install.packages(c(&quot;readr&quot;, &quot;readxl&quot;, &quot;haven&quot;, &quot;DBI&quot;, &quot;httr&quot;)) Using menus: Note that you can also install packages from local sources (such as a downloaded .zip or .tar) but that isn’t usually required unless you are behind a firewall or R updates and the packages haven’t been updated for that version of R. The good thing is that you only need to install the packages once! However, this doesn’t mean you have direct access to your package functions or datasets in your R session. Each R session you open you need to read in the package using library() or require(). library(&quot;readr&quot;) ## Warning: package &#39;readr&#39; was built under R version 3.6.2 require(&quot;haven&quot;) ## Loading required package: haven ## Warning: package &#39;haven&#39; was built under R version 3.6.2 These functions are very similar; they both give you direct access to the functions or data in your R session. The difference is that if you try to load a package that doesn’t exist library throws an error where require() returns FALSE. library(&quot;notAPackage&quot;) ## Error in library(&quot;notAPackage&quot;): there is no package called &#39;notAPackage&#39; require(&quot;notAPackage&quot;) ## Loading required package: notAPackage ## Warning in library(package, lib.loc = lib.loc, character.only = TRUE, ## logical.return = TRUE, : there is no package called &#39;notAPackage&#39; Now is a good time to install the tidyverse package if you haven’t already. install.packages(&quot;tidyverse&quot;) The functions in the tidyverse generally have Fast code Easy syntax Good default settings on functions A nice set of examples and vignettes Read the package into your R session. library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 3.6.2 ## -- Attaching packages ---------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.2.1 v dplyr 0.8.3 ## v tibble 2.1.3 v stringr 1.4.0 ## v tidyr 1.0.0 v forcats 0.4.0 ## v purrr 0.3.3 ## Warning: package &#39;ggplot2&#39; was built under R version 3.6.2 ## Warning: package &#39;tibble&#39; was built under R version 3.6.2 ## Warning: package &#39;tidyr&#39; was built under R version 3.6.2 ## Warning: package &#39;purrr&#39; was built under R version 3.6.2 ## Warning: package &#39;dplyr&#39; was built under R version 3.6.2 ## Warning: package &#39;stringr&#39; was built under R version 3.6.2 ## Warning: package &#39;forcats&#39; was built under R version 3.6.2 ## -- Conflicts ------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() You’ll likely see a message about functions being masked. This implies that one of the functions just loaded has a function under the same name as a function that already exists. If you type help(filter), R will now give you an option of which filter to look at. R uses the most recently loaded function and “masks” the old ones. You can access specific package’s functions using ::. This allows you to call functions without loading a full library. readr::read_csv(&quot;https://www4.stat.ncsu.edu/~online/datasets/neuralgia.csv&quot;) ## Parsed with column specification: ## cols( ## Treatment = col_character(), ## Sex = col_character(), ## Age = col_double(), ## Duration = col_double(), ## Pain = col_character() ## ) ## # A tibble: 60 x 5 ## Treatment Sex Age Duration Pain ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 P F 68 1 No ## 2 B M 74 16 No ## 3 P F 67 30 No ## 4 P M 66 26 Yes ## 5 B F 67 28 No ## # ... with 55 more rows 1.3.11 Reading Delimited Data Again the read. functions exist to read in many different types of delimited data. These functions work really well but there are a few areas they could be improved. A poor default function behavior as strings are read as factors Raw data row &amp; column names can be troublesome Slow processing (relatively speaking) (Slightly) different behavior on different computers Functions from the tidyverse (and readr in particular) remedy all of these! Type of Delimeter utils Function readr Comma read.csv() read_csv() Semicolon (, for decimal) read.csv2() read_csv2() Tab read.delim() read_tsv() General read.table(sep = \"\") read_delim() White Space read.table(sep = \"\") read_table() read_table2() Let’s reread the ‘neuralgia.csv’ file using read_csv from the readr package. neuralgiaData &lt;- readr::read_csv(&quot;https://www4.stat.ncsu.edu/~online/datasets/neuralgia.csv&quot;) ## Parsed with column specification: ## cols( ## Treatment = col_character(), ## Sex = col_character(), ## Age = col_double(), ## Duration = col_double(), ## Pain = col_character() ## ) You can see that the package displays a bit of information about how the data was parsed. neuralgiaData ## # A tibble: 60 x 5 ## Treatment Sex Age Duration Pain ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 P F 68 1 No ## 2 B M 74 16 No ## 3 P F 67 30 No ## 4 P M 66 26 Yes ## 5 B F 67 28 No ## # ... with 55 more rows You’ll also notice the fancy printing. This gives a quick check for the column type you have, which is a basic data validation step. The tidyverse has a special class of data frames called tibbles. class(neuralgiaData) ## [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; The behavior of tibbles is slightly different than that of a standard data frame. One is the printing method. The other major difference is that tibbles don’t simplify. neuralgiaData[,1] ## # A tibble: 60 x 1 ## Treatment ## &lt;chr&gt; ## 1 P ## 2 B ## 3 P ## 4 P ## 5 B ## # ... with 55 more rows as.data.frame(neuralgiaData)[,1] ## [1] &quot;P&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; ## [20] &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;B&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;B&quot; ## [39] &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;P&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; ## [58] &quot;A&quot; &quot;B&quot; &quot;A&quot; As this behavior can cause some issues with functions that are expecting a vector it is useful to force simplification sometimes. You can either use the pull function or the $ operator to return a column as a vector. pull(neuralgiaData, 1) ## [1] &quot;P&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; ## [20] &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;B&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;B&quot; ## [39] &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;P&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; ## [58] &quot;A&quot; &quot;B&quot; &quot;A&quot; neuralgiaData$Treatment ## [1] &quot;P&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; ## [20] &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;B&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;B&quot; ## [39] &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;P&quot; &quot;A&quot; &quot;B&quot; &quot;P&quot; &quot;P&quot; &quot;P&quot; &quot;B&quot; &quot;A&quot; &quot;P&quot; &quot;A&quot; &quot;P&quot; ## [58] &quot;A&quot; &quot;B&quot; &quot;A&quot; One question you may have about the column types is, how did R determine the column types? The help file for read_csv tells us that it checks the first 1000 rows of data and uses those to figure out the type of data. You can of course override this default behavior. Some useful inputs you may want to change when reading in data are skip = 0 col_names = TRUE na = c(\"\", \"NA\") These allow you to skip lines of data, specify column names, and define what represents a missing value in the raw data (NA is the missing data indicator in R). Generally, reading clean delimited data is pretty easy with the read_ family of functions! Let’s go through a few examples. First, let’s read in the space delimited file ‘chemical.txt’. Since this is space delimited we’ll use read_table. read_table(&quot;https://www4.stat.ncsu.edu/~online/datasets/chemical.txt&quot;) ## Parsed with column specification: ## cols( ## `temp conc time percent` = col_character() ## ) ## # A tibble: 19 x 1 ## `temp conc time percent` ## &lt;chr&gt; ## 1 -1 -1 -1 45.9 ## 2 1 -1 -1 60.6 ## 3 -1 1 -1 57.5 ## 4 1 1 -1 58.6 ## 5 -1 -1 1 53.3 ## 6 1 -1 1 58 ## 7 -1 1 1 58.8 ## 8 1 1 1 52.4 ## 9 -2 0 0 46.9 ## 10 2 0 0 55.4 ## 11 0 -2 0 55 ## 12 0 2 0 57.5 ## 13 0 0 -2 56.3 ## 14 0 0 2 58.9 ## 15 0 0 0 56.9 ## 16 2 -3 0 61.1 ## 17 2 -3 0 62.9 ## 18 -1.4 2.6 0.7 60 ## 19 -1.4 2.6 0.7 60.6 Next, let’s read in the tab delimited file ‘crabs.txt’. Since this is tab delimited we’ll use read_tsv. read_tsv(&quot;https://www4.stat.ncsu.edu/~online/datasets/crabs.txt&quot;) ## Parsed with column specification: ## cols( ## color = col_double(), ## spine = col_double(), ## width = col_double(), ## satell = col_double(), ## weight = col_double(), ## y = col_double() ## ) ## # A tibble: 173 x 6 ## color spine width satell weight y ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3 3 28.3 8 3050 1 ## 2 4 3 22.5 0 1550 0 ## 3 2 1 26 9 2300 1 ## 4 4 3 24.8 0 2100 0 ## 5 4 3 26 4 2600 1 ## # ... with 168 more rows Lastly, let’s read in the &gt; delimited file ‘umps2012.txt’. As this isn’t a standard delimiter we’ll use read_delim and specify the delim = input. However, this file doesn’t contain column names in the raw data. The columns represent Year, Month, Day, Home, Away, and HPUmpire. The column names can be specified using the col_names input and specifying them with a character vector. read_delim(&quot;https://www4.stat.ncsu.edu/~online/datasets/umps2012.txt&quot;, delim = &quot;&gt;&quot;, col_names = c(&quot;Year&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Home&quot;, &quot;Away&quot;, &quot;HPUmpire&quot;)) ## Parsed with column specification: ## cols( ## Year = col_double(), ## Month = col_double(), ## Day = col_double(), ## Home = col_character(), ## Away = col_character(), ## HPUmpire = col_character() ## ) ## # A tibble: 2,359 x 6 ## Year Month Day Home Away HPUmpire ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2012 4 12 MIN LAA D.J. Reyburn ## 2 2012 4 12 SD ARI Marty Foster ## 3 2012 4 12 WSH CIN Mike Everitt ## 4 2012 4 12 PHI MIA Jeff Nelson ## 5 2012 4 12 CHC MIL Fieldin Culbreth ## # ... with 2,354 more rows 1.3.11.1 Non-Standard Data To read in tricky, non-standard data there are a few functions that can help. read_file - reads an entire file into a single string read_lines - reads a file into a character vector with one element per line These are often parsed with regular expressions. 1.3.12 Excel data Next we’ll cover reading data from Excel files (readxl package), SAS datasets (haven package), and SPSS files (haven package). Type of file Package Function Delimited readr read_csv(), read_tsv(),read_table(), read_delim() Excel (.xls,.xlsx) readxl read_excel() SAS (.sas7bdat) haven read_sas() SPSS (.sav) haven read_spss() Let’s read in the censusEd.xlsx file.This can be done with the read_excel() from readxl package! This funcion reads in both xls and xlsx files. It detects the format from the file extension given in the path name. One issue is that excel files cannot be read from the web so they do need to be downloaded locally. #install package if necessary library(readxl) ## Warning: package &#39;readxl&#39; was built under R version 3.6.2 #reads first sheet by default edData &lt;- read_excel(&quot;../../datasets/censusEd.xlsx&quot;) edData ## # A tibble: 3,198 x 42 ## Area_name STCOU EDU010187F EDU010187D EDU010187N1 EDU010187N2 EDU010188F ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 UNITED S~ 00000 0 40024299 0000 0000 0 ## 2 ALABAMA 01000 0 733735 0000 0000 0 ## 3 Autauga,~ 01001 0 6829 0000 0000 0 ## 4 Baldwin,~ 01003 0 16417 0000 0000 0 ## 5 Barbour,~ 01005 0 5071 0000 0000 0 ## # ... with 3,193 more rows, and 35 more variables: EDU010188D &lt;dbl&gt;, ## # EDU010188N1 &lt;chr&gt;, EDU010188N2 &lt;chr&gt;, EDU010189F &lt;dbl&gt;, EDU010189D &lt;dbl&gt;, ## # EDU010189N1 &lt;chr&gt;, EDU010189N2 &lt;chr&gt;, EDU010190F &lt;dbl&gt;, EDU010190D &lt;dbl&gt;, ## # EDU010190N1 &lt;chr&gt;, EDU010190N2 &lt;chr&gt;, EDU010191F &lt;dbl&gt;, EDU010191D &lt;dbl&gt;, ## # EDU010191N1 &lt;chr&gt;, EDU010191N2 &lt;chr&gt;, EDU010192F &lt;dbl&gt;, EDU010192D &lt;dbl&gt;, ## # EDU010192N1 &lt;chr&gt;, EDU010192N2 &lt;chr&gt;, EDU010193F &lt;dbl&gt;, EDU010193D &lt;dbl&gt;, ## # EDU010193N1 &lt;chr&gt;, EDU010193N2 &lt;chr&gt;, EDU010194F &lt;dbl&gt;, EDU010194D &lt;dbl&gt;, ## # EDU010194N1 &lt;chr&gt;, EDU010194N2 &lt;chr&gt;, EDU010195F &lt;dbl&gt;, EDU010195D &lt;dbl&gt;, ## # EDU010195N1 &lt;chr&gt;, EDU010195N2 &lt;chr&gt;, EDU010196F &lt;dbl&gt;, EDU010196D &lt;dbl&gt;, ## # EDU010196N1 &lt;chr&gt;, EDU010196N2 &lt;chr&gt; If you want to read in a sheet other than the first sheet, you can do so with the sheet = argument. To look at the available sheets without opening in Excel you can use the excel_sheets function. excel_sheets(&quot;../../datasets/censusEd.xlsx&quot;) ## [1] &quot;EDU01A&quot; &quot;EDU01B&quot; &quot;EDU01C&quot; &quot;EDU01D&quot; &quot;EDU01E&quot; &quot;EDU01F&quot; &quot;EDU01G&quot; &quot;EDU01H&quot; ## [9] &quot;EDU01I&quot; &quot;EDU01J&quot; read_excel(&quot;../../datasets/censusEd.xlsx&quot;, sheet = &quot;EDU01D&quot;) There are also ways to specify which cells to read in with the range = argument. You can select cells that are contiguous only (next to each other). edData &lt;- read_excel(&quot;../../datasets/censusEd.xlsx&quot;, sheet = &quot;EDU01A&quot;, range = cell_cols(&quot;A:D&quot;)) edData ## # A tibble: 3,198 x 4 ## Area_name STCOU EDU010187F EDU010187D ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 UNITED STATES 00000 0 40024299 ## 2 ALABAMA 01000 0 733735 ## 3 Autauga, AL 01001 0 6829 ## 4 Baldwin, AL 01003 0 16417 ## 5 Barbour, AL 01005 0 5071 ## # ... with 3,193 more rows 1.3.13 SAS Data SAS datasets have a file extension of ‘.sas7bdat’. Let’s read in the smoke2003.sas7bdat dataset. This can be done using the read_sas function from the haven package. As .sas7bdat files are pretty structured there aren’t many options to use with this function. #install if necessary library(haven) smokeData &lt;- read_sas(&quot;https://www4.stat.ncsu.edu/~online/datasets/smoke2003.sas7bdat&quot;) smokeData ## # A tibble: 443 x 54 ## SEQN SDDSRVYR RIDSTATR RIDEXMON RIAGENDR RIDAGEYR RIDAGEMN RIDAGEEX RIDRETH1 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 21010 3 2 2 2 52 633 634 3 ## 2 21012 3 2 2 1 63 765 766 4 ## 3 21048 3 2 1 2 42 504 504 1 ## 4 21084 3 2 1 2 57 692 693 3 ## 5 21093 3 2 1 2 64 778 778 2 ## # ... with 438 more rows, and 45 more variables: RIDRETH2 &lt;dbl&gt;, ## # DMQMILIT &lt;dbl&gt;, DMDBORN &lt;dbl&gt;, DMDCITZN &lt;dbl&gt;, DMDYRSUS &lt;dbl&gt;, ## # DMDEDUC3 &lt;dbl&gt;, DMDEDUC2 &lt;dbl&gt;, DMDEDUC &lt;dbl&gt;, DMDSCHOL &lt;dbl&gt;, ## # DMDMARTL &lt;dbl&gt;, DMDHHSIZ &lt;dbl&gt;, INDHHINC &lt;dbl&gt;, INDFMINC &lt;dbl&gt;, ## # INDFMPIR &lt;dbl&gt;, RIDEXPRG &lt;dbl&gt;, DMDHRGND &lt;dbl&gt;, DMDHRAGE &lt;dbl&gt;, ## # DMDHRBRN &lt;dbl&gt;, DMDHREDU &lt;dbl&gt;, DMDHRMAR &lt;dbl&gt;, DMDHSEDU &lt;dbl&gt;, ## # SIALANG &lt;dbl&gt;, SIAPROXY &lt;dbl&gt;, SIAINTRP &lt;dbl&gt;, FIALANG &lt;dbl&gt;, ## # FIAPROXY &lt;dbl&gt;, FIAINTRP &lt;dbl&gt;, MIALANG &lt;dbl&gt;, MIAPROXY &lt;dbl&gt;, ## # MIAINTRP &lt;dbl&gt;, AIALANG &lt;dbl&gt;, WTINT2YR &lt;dbl&gt;, WTMEC2YR &lt;dbl&gt;, ## # SDMVPSU &lt;dbl&gt;, SDMVSTRA &lt;dbl&gt;, Gender &lt;dbl&gt;, Age &lt;dbl&gt;, IncomeGroup &lt;chr&gt;, ## # Ethnicity &lt;chr&gt;, Education &lt;dbl&gt;, SMD070 &lt;dbl&gt;, SMQ077 &lt;dbl&gt;, SMD650 &lt;dbl&gt;, ## # PacksPerDay &lt;dbl&gt;, lbdvid &lt;dbl&gt; Often times SAS datasets have labels associated with the variable names. These are more descriptive titles that will print in SAS if requested. This is the case here. However, as you see above the labels did not print out. The labels will show if you look at the data set using the View function (or click on smokeData object from environment tab). How do we get to those labels? str(smokeData) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 443 obs. of 54 variables: ## $ SEQN : num 21010 21012 21048 21084 21093 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Patient ID&quot; ## $ SDDSRVYR : num 3 3 3 3 3 3 3 3 3 3 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Data Release Number&quot; ## $ RIDSTATR : num 2 2 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Interview/Examination Status&quot; ## $ RIDEXMON : num 2 2 1 1 1 2 1 2 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Six month time period&quot; ## $ RIAGENDR : num 2 1 2 2 2 2 1 2 1 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Gender 1=M 2=F&quot; ## $ RIDAGEYR : num 52 63 42 57 64 63 66 60 65 47 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Age in Years at Exam&quot; ## $ RIDAGEMN : num 633 765 504 692 778 763 801 731 786 573 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Age in Months - Recode&quot; ## $ RIDAGEEX : num 634 766 504 693 778 763 801 732 787 573 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Exam Age in Months - Recode&quot; ## $ RIDRETH1 : num 3 4 1 3 2 3 1 3 3 3 ... ## ..- attr(*, &quot;label&quot;)= chr &quot; Ethnicity 1=MexAm 2=OthHisp 3=OthCauc 4=OthBla 5=Oth&quot; ## $ RIDRETH2 : num 1 2 3 1 5 1 3 1 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Linked NH3 Race/Ethnicity - Recode&quot; ## $ DMQMILIT : num 2 2 2 2 2 2 2 2 1 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Veteran/Military Status&quot; ## $ DMDBORN : num 1 1 1 1 3 1 1 1 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Country of Birth - Recode&quot; ## $ DMDCITZN : num 1 1 1 1 1 1 1 1 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Citizenship Status&quot; ## $ DMDYRSUS : num NA NA NA NA 9 NA NA NA NA NA ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Length of time in US&quot; ## $ DMDEDUC3 : num NA NA NA NA NA NA NA NA NA NA ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Education Level - Children/Youth 6-19&quot; ## $ DMDEDUC2 : num 4 3 3 4 1 3 1 4 4 4 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Education Level for Over 20&quot; ## $ DMDEDUC : num 3 2 2 3 1 2 1 3 3 3 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Education - Recode (old version)&quot; ## $ DMDSCHOL : num NA NA NA NA NA NA NA NA NA NA ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Now attending school?&quot; ## $ DMDMARTL : num 6 6 3 1 2 1 6 3 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Marital Status&quot; ## $ DMDHHSIZ : num 3 2 5 2 2 2 2 3 2 6 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Total number of people in the Household&quot; ## $ INDHHINC : num 6 2 5 9 2 5 3 6 8 5 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Annual Household Income&quot; ## $ INDFMINC : num 4 2 2 9 2 5 3 6 8 4 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Family Income&quot; ## $ INDFMPIR : num 1.24 0.89 0.48 4.62 0.61 1.92 1.39 2.21 3.71 1.23 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Family PIR&quot; ## $ RIDEXPRG : num 2 NA 2 2 NA NA NA NA NA 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Pregnancy Status at Exam - Recode&quot; ## $ DMDHRGND : num 1 1 2 2 2 1 1 2 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;HH Ref Person Gender&quot; ## $ DMDHRAGE : num 54 63 59 57 64 66 66 84 65 50 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;HH Ref Person Age&quot; ## $ DMDHRBRN : num 1 1 1 1 3 1 1 1 1 NA ... ## ..- attr(*, &quot;label&quot;)= chr &quot;HH Ref Person Country of Birth&quot; ## $ DMDHREDU : num 1 3 4 4 1 3 1 5 4 NA ... ## ..- attr(*, &quot;label&quot;)= chr &quot;HH Ref Person Education Level&quot; ## $ DMDHRMAR : num 6 6 3 1 2 1 6 2 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;HH Ref Person Marital Status&quot; ## $ DMDHSEDU : num NA NA NA 3 NA 3 NA NA 2 4 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;HH Ref Person&#39;s Spouse Education Level&quot; ## $ SIALANG : num 1 1 1 1 1 1 1 1 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Language of SP Interview&quot; ## $ SIAPROXY : num 2 2 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Proxy used in SP Interview?&quot; ## $ SIAINTRP : num 2 2 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Interpreter used in SP Interview?&quot; ## $ FIALANG : num 1 1 1 1 1 1 1 1 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Language of Family Interview&quot; ## $ FIAPROXY : num 2 2 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Proxy used in Family Interview?&quot; ## $ FIAINTRP : num 2 2 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Interpreter used in Family Interview?&quot; ## $ MIALANG : num 1 NA 1 1 1 1 1 1 1 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Language of MEC Interview&quot; ## $ MIAPROXY : num 2 NA 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Proxy used in MEC Interview?&quot; ## $ MIAINTRP : num 2 NA 2 2 2 2 2 2 2 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Interpreter used in MEC Interview?&quot; ## $ AIALANG : num 1 NA 1 1 NA NA NA NA NA 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Language of ACASI Interview&quot; ## $ WTINT2YR : num 39599 12629 18792 91437 24475 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Full Sample 2 Year Interview Weight&quot; ## $ WTMEC2YR : num 43287 12947 19035 93163 27829 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Full Sample 2 Year MEC Exam Weight&quot; ## $ SDMVPSU : num 1 2 2 1 1 2 1 2 1 2 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Masked Variance Pseudo-PSU&quot; ## $ SDMVSTRA : num 29 33 39 34 35 30 34 30 38 34 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Masked Variance Pseudo-Stratum&quot; ## $ Gender : num 2 1 2 2 2 2 1 2 1 2 ... ## $ Age : num 52 63 42 57 64 63 66 60 65 47 ... ## $ IncomeGroup: chr &quot;Less Than 20K&quot; &quot;Less Than 20K&quot; &quot;Less Than 20K&quot; &quot;More Than 20K&quot; ... ## $ Ethnicity : chr &quot;Non-Hispanic Caucasian&quot; &quot;Non-Hispanic Black&quot; &quot;MexicanAmerican &amp; Hispanic&quot; &quot;Non-Hispanic Caucasian&quot; ... ## $ Education : num 4 3 3 4 1 3 1 4 4 4 ... ## $ SMD070 : num 20 20 20 20 20 16 20 20 10 6 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Number of Cagarettes Smoked/day now&quot; ## $ SMQ077 : num 2 2 1 3 2 2 2 1 3 3 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;How soon after waking do you smoke?&quot; ## $ SMD650 : num 20 20 20 20 20 10 20 20 10 1 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Number of Cigarettes/day for last 30 days&quot; ## $ PacksPerDay: num 1 1 1 1 1 0.5 1 1 0.5 0.05 ... ## $ lbdvid : num 16 18 16 17 18 25 9 27 9 25 ... ## - attr(*, &quot;label&quot;)= chr &quot;DATA2003&quot; The labels are an attribute of the dataset. The attribute is called “label”. These can be accessed using the attr function. attr(smokeData$SDDSRVYR, &quot;label&quot;) ## [1] &quot;Data Release Number&quot; 1.3.14 SPSS Data SPSS datasets have a file extension of “.sav”. Let’s read in the bodyFat.sav dataset. This can be done using the read_spss function from the haven package. As with SAS datasets, these are well structured so there aren’t many options to use with the function. bodyFatData &lt;- read_spss(&quot;https://www4.stat.ncsu.edu/~online/datasets/bodyFat.sav&quot;) bodyFatData ## # A tibble: 20 x 4 ## y x1 x2 x3 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 19.5 43.1 29.1 11.9 ## 2 24.7 49.8 28.2 22.8 ## 3 30.7 51.9 37 18.7 ## 4 29.8 54.3 31.1 20.1 ## 5 19.1 42.2 30.9 12.9 ## 6 25.6 53.9 23.7 21.7 ## 7 31.4 58.5 27.6 27.1 ## 8 27.9 52.1 30.6 25.4 ## 9 22.1 49.9 23.2 21.3 ## 10 25.5 53.5 24.8 19.3 ## 11 31.1 56.6 30 25.4 ## 12 30.4 56.7 28.3 27.2 ## 13 18.7 46.5 23 11.7 ## 14 19.7 44.2 28.6 17.8 ## 15 14.6 42.7 21.3 12.8 ## 16 29.5 54.4 30.1 23.9 ## 17 27.7 55.3 25.7 22.6 ## 18 30.2 58.6 24.6 25.4 ## 19 22.7 48.2 27.1 14.8 ## 20 25.2 51 27.5 21.1 1.3.15 JSON JSON stands for JavaScript Object Notation. This data format is used widely across the internet and in databases. JSON data can represent our usual 2D data or heirarchical data. JSON uses key-value pairs. An example of raw JSON data is given below. { { &quot;name&quot;: &quot;Barry Sanders&quot; &quot;games&quot; : 153 &quot;position&quot;: &quot;RB&quot; }, { &quot;name&quot;: &quot;Joe Montana&quot; &quot;games&quot;: 192 &quot;position&quot;: &quot;QB&quot; } } There are three major R packages for reading in JSON data: rjson RJSONIO jsonlite We prefer jsonlite. It has many nice features to simplify reading in data, but these features do make the package’s functions a little slower. The most useful functions from jsonlite are summarized below: Function Description fromJSON Reads JSON data from file path or character string. Converts and simplfies to R object toJSON Writes R object to JSON object stream_in Accepts a file connection - can read streaming JSON data 1.3.16 XML XML stands for eXtensible Markup Language. This is another data format that is used widely across the internet and in databases. This type of data can again represent our usual 2D data or heirarchical data. XML uss tags &lt; &gt; similar to HTML. An example of raw XML data is given below. &lt;roster&gt; &lt;player&gt; &lt;name&gt;Barry Sanders&lt;/name&gt; &lt;games&gt;153&lt;/games&gt; &lt;position&gt;RB&lt;/position&gt; &lt;/player&gt; &lt;player&gt; &lt;name&gt;Joe Montana&lt;/name&gt; &lt;games&gt;192&lt;/games&gt; &lt;position&gt;QB&lt;/position&gt; &lt;/player&gt; &lt;/roster&gt; The structure of the nodes has parent nodes, child nodes, etc. A basic diagram is given below. Figure 1.1: Source: mysamplecode.com There are two major R packages for reading in XML data: XML xml2 xml2 has all the basic functionality to get data into R. Reading XML data is generally tough since the structure of tags varies by data source! The xml2 core functions are: Function Description read_xml Accepts string, file path, or url argument. Returns XML data object xml_children Returns list of elements downstream from current node xml_parents Returns list of all parent elements from current node xml_contents Returns list of contents from current node as_list Converts XML document or node set to equivalent R list 1.3.17 Databases A database is a collection of data, usually a bunch of 2D tables that have keys that connect them. The Database Management System (DBMS) controls how users interact with the database. There is a common and very useful Structured Query Language (SQL - pronounced ess-que-el or sequel) used by relational database management systems (RDBMS) for retrieving and combining datasets from a database. An example of a relational database structure is given below. Notice there are keys that link different tables. Figure 1.2: Source: oreilly.com There are many popular RDBMS. Some are free and some are proprietary. These are often simply referred to as databases. Oracle - most popular (cross platform) SQL Server - Microsoft product DB2 - IBM product MySQL (open source) - Not as many features but popular PostgreSQL (open source) Again there is a Basic SQL language that is constant across all these database types. The common flow to connect to a database using R is: Connect to the database with DBI::dbConnect() Need appropriate R package for database backend RSQLite::SQLite() for RSQLite RMySQL::MySQL() for RMySQL RPostgreSQL::PostgreSQL() for RPostgreSQL odbc::odbc() for Open Database Connectivity bigrquery::bigquery() for google’s bigQuery con &lt;- DBI::dbConnect(RMySQL::MySQL(), host = &quot;hostname.website&quot;, user = &quot;username&quot;, password = rstudioapi::askForPassword(&quot;DB password&quot;) ) Use tbl() to reference a table in the database tbl(con, &quot;name_of_table&quot;) Query the database with SQL or dplyr/dbplyr There is much more about R Studio and Databases here. 1.3.18 APIs API stands for Application Programming Interfaces. This is essentially a defined method for asking for information from a computer. They are useful for getting data or allowing others to run a model you’ve built. There are many open APIs. They usually just require you to register and obtain a key. Once you have a key you simply need to construct the proper URL to return the information you want from the API. As a quick example we will query the Harry Potter database at https://www.potterapi.com/. There is a button on the top right where you can register and obtain a key. The documentation for returning Harry Potter spells states: + All routes need to be prefixed with https://www.potterapi.com/v1/ + GET request: /spells returns all spells + Key goes on the end This tells us how to construct the appropriate URL. The paste and paste0 functions are useful for combining strings (check their help). baseURL &lt;- &quot;https://www.potterapi.com/v1/&quot; value &lt;- &quot;spells?&quot; key &lt;- &quot;key=$2a$10$UMvDCH.93fa2KOjKbJYkOOPMNzdzQpJ0gMnVEtcHzW5Ic04HUmcsa&quot; URL &lt;- paste0(baseURL, value, key) URL ## [1] &quot;https://www.potterapi.com/v1/spells?key=$2a$10$UMvDCH.93fa2KOjKbJYkOOPMNzdzQpJ0gMnVEtcHzW5Ic04HUmcsa&quot; Now we use the RCurl package and the getURL function to ping the URL we just created. This will return the spell data set in JSON form as that is the default response format for this API. spellData &lt;- RCurl::getURL(URL) This is a reasonably large string of information so we can just look at the first 100 characters using the substr function. substr(spellData, 1, 100) ## [1] &quot;[{\\&quot;_id\\&quot;:\\&quot;5b74ebd5fb6fc0739646754c\\&quot;,\\&quot;spell\\&quot;:\\&quot;Aberto\\&quot;,\\&quot;type\\&quot;:\\&quot;Charm\\&quot;,\\&quot;effect\\&quot;:\\&quot;opens objects\\&quot;},{\\&quot;_id\\&quot;:&quot; To convert this to a data frame we can use the fromJSON function in the jsonlite package. tbl_df converts the dataframe to a tibble (for printing purposes). spellDataDF &lt;- jsonlite::fromJSON(spellData) tbl_df(spellDataDF) ## # A tibble: 151 x 5 ## `_id` spell type effect `__v` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 5b74ebd5fb6fc073964~ Aberto Charm opens objects NA ## 2 5b74ecfa3228320021a~ Accio Charm Summons an object 0 ## 3 5b74ed2f3228320021a~ Age Line Enchantm~ Hides things from younger~ 0 ## 4 5b74ed453228320021a~ Aguamenti Charm shoots water from wand 0 ## 5 5b74ed583228320021a~ Alarte Ascend~ Spell shoots things high in the~ 0 ## # ... with 146 more rows Of course constructing URLs like this yourself isn’t ideal. Languages like python have many packages to help you contact APIs without reading as much documentation. Unfortunately, R does not have a very mature collection of API packages. The article here discusses accessing APIs generically with R. The same website gives a list of APIs that you might consider. 1.3.19 Data Manipulation Ideas As you can see it isn’t too difficult to bring well structured raw data into R. You should now have the basics of reading in delimited, Excel, SAS, SPSS, JSON, and XML data as well as how to connect to a database and contact an API. Once you have your data you may want to manipulate it in some way. Often we want to grab only certain types of observations (filter rows). We also want to only look at only certain variables (select columns). Other times we want to create new variables that may be functions of the data in the data set. When doing data manipulation it is vital to make your work reproducible! Traditionally documentation has been done through comments (# in R) in your R script. This is being replaced by using a ‘Notebook’ environment like R Markdown. 1.3.20 Documenting with Markdown You may have heard of JUPYTER notebooks. This is a program that allows you to weave plain text with formatting characters along side code. JUPYTER allows you to call Julia, Python, R, or SAS code (among others). R Markdown is a built in notebook for R studio! A nice intro video is available here. R Markdown is designed to be used in three ways (R for Data Science): Communicating to decision makers (focus on conclusions not code) Collaborating with other data scientists (including future you!) As environment to do data science (documents what you did and what you were thinking) Most have heard of HTML or HyperText Mark-up Language. This is really just plain text that a web browser like firefox interprets and renders. Markdown is a specific markup language that has easier syntax but is not as powerful. Any plain text file can be used although the .Rmd extension associates the file with R Studio. RStudio makes it easy to create a Markdown document. You can create many commonly used types of output including HTML, PDF, Word, and HTML slides. An R Markdown file contains three important types of content: (Optional) YAML header surrounded by ---s Chunks of R code Text mixed with simple text formatting instructions The YAML header defines settings for document: --- title: &quot;Untitled&quot; author: &quot;First Last&quot; date: &quot;xxxx&quot; output: html_document --- The hot key combination of CTRL/CMD + Shift + k ‘knits’ (or creates the output type) via this information. Code Chunks can contain any R code. These can be started by typing ```{r} out or with CTRL/CMD + Alt + I. This code will be executed when document is created and the chunks will be evaulated sequentially. Options can be specified on individual code chunks to hide their code or output (among other things). Below you’ll see plain text with markdown sytnax included: ##R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;http://rmarkdown.rstudio.com&gt;. When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. When the file is created ## becomes a header, “&lt;…&gt;” a link, and **Knit** bold font. You can learn much more about how to use R Markdown with this handy cheat sheet. The key idea here is that you can easily write down your thought process and document all of the changes you make to your data. This creates a reproducible final product! 1.3.21 Logical Statements Our current goal is to subset rows or columns of a dataset. To do this efficiently we need to learn about logical statements. A logical statement is a comparison that resolves as TRUE or FALSE. R has all of the standard comparison operators: == equal to != not equal to &lt;, &lt;=, &gt;, &gt;= less than (or equal) and greater than (or equal) &quot;hi&quot; == &quot; hi&quot; #== is comparison ## [1] FALSE &quot;hi&quot; == &quot;hi&quot; ## [1] TRUE 4 &gt;= 1 ## [1] TRUE 4 != 1 ## [1] TRUE Sometimes we see issues due to a loss of precision when doing mathematical operations. sqrt(3)^2 == 3 ## [1] FALSE The near function from the dplyr package can help with this type of situation. dplyr::near(sqrt(3)^2, 3) ## [1] TRUE Another common way to do a logical statement in R is to use an is. family function. is.numeric(&quot;Word&quot;) ## [1] FALSE is.numeric(10) ## [1] TRUE is.character(&quot;10&quot;) ## [1] TRUE is.na(c(1:2, NA, 3)) ## [1] FALSE FALSE TRUE FALSE is.matrix(c(&quot;hello&quot;, &quot;world&quot;)) ## [1] FALSE How do we use logical statements to subset our data? Logical vectors can be used for indexing an R object. The concept is: Feed index a vector of TRUE/FALSE or 0/1 values R will return elements where TRUE or 1 occurred Let’s subset the built-in iris data set. First we’ll convert it to a tibble so it prints nicely. iris &lt;- tbl_df(iris) iris Now, we can create an indexing vector corresponding to some condition of interest. For instance, we may want to only look at the Species ‘setosa’ flowers. iris$Species == &quot;setosa&quot; #vector indicating setosa valuesreached getOption(&quot;max.print&quot;) -- omitted 50 entries ] Now we can feed this in as our row index to the [ function. Remember for rectangular data the first index you give refers to the rows and the second to columns. iris[iris$Species == &quot;setosa&quot;, ] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 30 rows ] Rather than use [, a base R function called subset can be used. subset(iris, Species == &quot;setosa&quot;) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 30 rows ] This function works quite well but we want to work in the tidyverse. The filter function from the dplyr package (installed with tidyverse) will be our function of choice. For filter the first argument is the data frame (or tibble) and the second is the logical statement used for indexing the rows. filter(iris, Species == &quot;setosa&quot;) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 30 rows ] Often we’ll want to subset based on more than one condition. These can be created using standard logical operators. In R these are: &amp; ‘and’ | ‘or’ Operator A,B true A true, B false A,B false &amp; A &amp; B = TRUE A &amp; B = FALSE A &amp; B = FALSE | A | B = TRUE A | B = TRUE A | B = FALSE For the most part we’ll want to use the single &amp; or |. &amp;&amp; and || are alternatives that only look at only first comparison done (if given a vector of comparisons). A quick example of the compound logical syntax is given below. Parenthesis are not necessary but are quite useful to keep things straight! Here we generate 10 random values between 0 and 1 (set.seed just starts the random number generator at a specific spot so we can get the same 10 values each time we create this document!). We use | to return TRUE if the randomly generated value is either below 0.25 or above 0.75. set.seed(3) x &lt;- runif(n = 10, min = 0, max = 1) x ## [1] 0.1680415 0.8075164 0.3849424 0.3277343 0.6021007 0.6043941 0.1246334 ## [8] 0.2946009 0.5776099 0.6309793 (x &lt; 0.25) | (x &gt; 0.75) ## [1] TRUE TRUE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE With this kind of syntax we can now create an indexing vector to only pull out large petal setosa flowers: (iris$Petal.Length &gt; 1.5) &amp; (iris$Petal.Width &gt; 0.3) &amp; (iris$Species == &quot;setosa&quot;) ## [1] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE ## [25] FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE ## [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [97] FALSE FALSE FALSE FALSE ## [ reached getOption(&quot;max.print&quot;) -- omitted 50 entries ] Using this in the filter function we return only a few observations corresponding to our condition. filter(iris, (Petal.Length &gt; 1.5) &amp; (Petal.Width &gt; 0.3) &amp; (Species == &quot;setosa&quot;)) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.4 3.9 1.7 0.4 setosa ## 2 5.1 3.3 1.7 0.5 setosa ## 3 5.0 3.4 1.6 0.4 setosa ## 4 5.0 3.5 1.6 0.6 setosa ## 5 5.1 3.8 1.9 0.4 setosa 1.3.22 dplyr The tidyverse has many useful packages for common data manipulation tasks. Make sure library(tidyverse) has been run when working through this section! Two major packages for data manipulation are: -dplry package made for most standard data manipulation tasks tidyr package reshapes data (wide and long format, split columns, etc) This section focuses on the most useful functions from the dplyr package: tbl_df() - convert data frame to one with better printing filter() - subset rows arrange() - reorder rows select() - subset columns rename() - rename columns Later we’ll look at mutate() - add newly created column transmute() - create new variable group_by() - group rows by a variable summarise() - apply basic function to data One really nice thing about the functions in the tidyverse is that the syntax is mostly consistent (save ggplot2). The basic syntax is function(tibble, actions, ...) Let’s get started! We’ve seen tbl_df a few times. This function converts a data frame to one with better printing and no simplification. To use it we can simply ‘wrap’ data frame with it. In this section we’ll do examples on datasets from the Lahman pacakge. This package has data about baseball players dating back from the start of professional baseball. #install.packages(&quot;Lahman&quot;) library(Lahman) ## Warning: package &#39;Lahman&#39; was built under R version 3.6.2 #old method for previewing a dataset head(Batting, n = 4) #look at just first 4 observations ## playerID yearID stint teamID lgID G AB R H X2B X3B HR RBI SB CS BB SO ## 1 abercda01 1871 1 TRO NA 1 4 0 0 0 0 0 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 NA 25 118 30 32 6 0 0 13 8 1 4 0 ## 3 allisar01 1871 1 CL1 NA 29 137 28 40 4 5 0 19 3 1 2 5 ## 4 allisdo01 1871 1 WS3 NA 27 133 28 44 10 2 2 27 1 1 0 2 ## IBB HBP SH SF GIDP ## 1 NA NA NA NA 0 ## 2 NA NA NA NA 0 ## 3 NA NA NA NA 1 ## 4 NA NA NA NA 0 Batting &lt;- tbl_df(Batting) Batting ## # A tibble: 105,861 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 abercda~ 1871 1 TRO NA 1 4 0 0 0 0 0 ## 2 addybo01 1871 1 RC1 NA 25 118 30 32 6 0 0 ## 3 allisar~ 1871 1 CL1 NA 29 137 28 40 4 5 0 ## 4 allisdo~ 1871 1 WS3 NA 27 133 28 44 10 2 2 ## 5 ansonca~ 1871 1 RC1 NA 25 120 29 39 11 3 0 ## # ... with 1.059e+05 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; If the data has been read in with haven, readxl, or readr, it is probably in this format already! 1.3.22.1 Row Manipulations Again, we may to do a subset based on the rows of our dataset. We just looked at using the filter function to subset rows or observations of a dataset. Let’s look at a few more examples. We may only want to return observations from the Batting dataset corresponding to the Pittsburgh Pirates (PIT). filter(Batting, teamID == &quot;PIT&quot;) ## # A tibble: 4,817 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 barklsa~ 1887 1 PIT NL 89 340 44 76 10 4 1 ## 2 beeched~ 1887 1 PIT NL 41 169 15 41 8 0 2 ## 3 bishobi~ 1887 1 PIT NL 3 9 0 0 0 0 0 ## 4 brownto~ 1887 1 PIT NL 47 192 30 47 3 4 0 ## 5 carrofr~ 1887 1 PIT NL 102 421 71 138 24 15 6 ## # ... with 4,812 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; We could use a compound logical to only return Pirate data from the year 2000. filter(Batting, teamID == &quot;PIT&quot; &amp; yearID == 2000) ## # A tibble: 46 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 anderji~ 2000 1 PIT NL 27 50 5 7 1 0 0 ## 2 arroybr~ 2000 1 PIT NL 21 21 2 3 2 0 0 ## 3 avenbr01 2000 1 PIT NL 72 148 18 37 11 0 5 ## 4 benjami~ 2000 1 PIT NL 93 233 28 63 18 2 2 ## 5 bensokr~ 2000 1 PIT NL 32 65 3 6 2 0 0 ## # ... with 41 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, ## # BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt; Another useful row operation is to rearrange the data based on some criteria. The arrange function allows us to sort a data set by numeric or character variables. For instance we could reorder alphabetically by the teamID variable. arrange(Batting, teamID) ## # A tibble: 105,861 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 berrych~ 1884 1 ALT UA 7 25 2 6 0 0 0 ## 2 brownji~ 1884 1 ALT UA 21 88 12 22 2 2 1 ## 3 carropa~ 1884 1 ALT UA 11 49 4 13 1 0 0 ## 4 connojo~ 1884 1 ALT UA 3 11 0 1 0 0 0 ## 5 crosscl~ 1884 1 ALT UA 2 7 1 4 1 0 0 ## # ... with 1.059e+05 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; A secondary arrangement can be done as well (and third, etc.) arrange(Batting, teamID, G) ## # A tibble: 105,861 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 daisege~ 1884 1 ALT UA 1 4 0 0 0 0 0 ## 2 crosscl~ 1884 1 ALT UA 2 7 1 4 1 0 0 ## 3 manloch~ 1884 1 ALT UA 2 7 1 3 0 0 0 ## 4 connojo~ 1884 1 ALT UA 3 11 0 1 0 0 0 ## 5 shafff01 1884 1 ALT UA 6 19 1 3 0 0 0 ## # ... with 1.059e+05 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; The arrangement can be done descending as well by giving the column (variable) with desc. arrange(Batting, teamID, desc(G)) ## # A tibble: 105,861 x 22 ## playerID yearID stint teamID lgID G AB R H X2B X3B HR ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 smithge~ 1884 1 ALT UA 25 108 9 34 8 1 0 ## 2 harrifr~ 1884 1 ALT UA 24 95 10 25 2 1 0 ## 3 doughch~ 1884 1 ALT UA 23 85 6 22 5 0 0 ## 4 murphjo~ 1884 1 ALT UA 23 94 10 14 1 0 0 ## 5 brownji~ 1884 1 ALT UA 21 88 12 22 2 2 1 ## # ... with 1.059e+05 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; 1.3.22.2 Column Manipulations We may want to look at only certain variables (select columns). The select function from the dplyr package allows us to choose columns of interest. We’ve seen the use of $ and [ , ] to do this already but select offers many advantages. Same syntax as tidyverse functions Useful ways to use character matching to select columns Let’s see it in action! To choose a single column of interest just supply the column name (or position) after the tibble. select(Batting, X2B) ## # A tibble: 105,861 x 1 ## X2B ## &lt;int&gt; ## 1 0 ## 2 6 ## 3 4 ## 4 10 ## 5 11 ## # ... with 1.059e+05 more rows Multiple columns can be selected by giving multiple column names. select(Batting, playerID, X2B) ## # A tibble: 105,861 x 2 ## playerID X2B ## &lt;chr&gt; &lt;int&gt; ## 1 abercda01 0 ## 2 addybo01 6 ## 3 allisar01 4 ## 4 allisdo01 10 ## 5 ansonca01 11 ## # ... with 1.059e+05 more rows There are many ways to select multiple columsn (variables). For instance, contiguous columns can be selected using the :. #all columns between select(Batting, X2B:HR) ## # A tibble: 105,861 x 3 ## X2B X3B HR ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 0 0 0 ## 2 6 0 0 ## 3 4 5 0 ## 4 10 2 2 ## 5 11 3 0 ## # ... with 1.059e+05 more rows Character matching can be done to select all columns that contain a certain character. #all columns containing select(Batting, contains(&quot;X&quot;)) ## # A tibble: 105,861 x 2 ## X2B X3B ## &lt;int&gt; &lt;int&gt; ## 1 0 0 ## 2 6 0 ## 3 4 5 ## 4 10 2 ## 5 11 3 ## # ... with 1.059e+05 more rows Similary, there is a starts_with and ends_with function. #all columns starting with select(Batting, starts_with(&quot;X&quot;)) ## # A tibble: 105,861 x 2 ## X2B X3B ## &lt;int&gt; &lt;int&gt; ## 1 0 0 ## 2 6 0 ## 3 4 5 ## 4 10 2 ## 5 11 3 ## # ... with 1.059e+05 more rows #multiple selections select(Batting, starts_with(&quot;X&quot;), ends_with(&quot;ID&quot;), G) ## # A tibble: 105,861 x 7 ## X2B X3B playerID yearID teamID lgID G ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 0 0 abercda01 1871 TRO NA 1 ## 2 6 0 addybo01 1871 RC1 NA 25 ## 3 4 5 allisar01 1871 CL1 NA 29 ## 4 10 2 allisdo01 1871 WS3 NA 27 ## 5 11 3 ansonca01 1871 RC1 NA 25 ## # ... with 1.059e+05 more rows Sometimes we want to rename variables. This can be done with the rename function. #rename our previous selection rename(select(Batting, starts_with(&quot;X&quot;), ends_with(&quot;ID&quot;), G), &quot;Doubles&quot; = X2B, &quot;Triples&quot; = X3B) ## # A tibble: 105,861 x 7 ## Doubles Triples playerID yearID teamID lgID G ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 0 0 abercda01 1871 TRO NA 1 ## 2 6 0 addybo01 1871 RC1 NA 25 ## 3 4 5 allisar01 1871 CL1 NA 29 ## 4 10 2 allisdo01 1871 WS3 NA 27 ## 5 11 3 ansonca01 1871 RC1 NA 25 ## # ... with 1.059e+05 more rows You may notice this is kind function nesting makes this code difficult for humans to parse. Piping or Chaining can be used to make the use of multiple functions easier! %&gt;% is the piping operator. Generically, piping does the following x %&gt;% f(y) turns into f(x,y) x %&gt;% f(y) %&gt;% g(z) turns into g(f(x, y), z) Since the tidyverse functions all have the same syntax, piping works wonders for readability! Piping can be used with functions outside the tidyverse if this structure works. Let’s rewrite our previous nested function with piping. When reading code with piping, read %&gt;% as the word ‘then.’ Batting data set (then) select these columns (then) rename the variables. Batting %&gt;% select(starts_with(&quot;X&quot;), ends_with(&quot;ID&quot;), G) %&gt;% rename(&quot;Doubles&quot; = X2B, &quot;Triples&quot; = X3B) ## # A tibble: 105,861 x 7 ## Doubles Triples playerID yearID teamID lgID G ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 0 0 abercda01 1871 TRO NA 1 ## 2 6 0 addybo01 1871 RC1 NA 25 ## 3 4 5 allisar01 1871 CL1 NA 29 ## 4 10 2 allisdo01 1871 WS3 NA 27 ## 5 11 3 ansonca01 1871 RC1 NA 25 ## # ... with 1.059e+05 more rows We may also wish to reorder our columns (variables). This can be done using select. The everything function is handy so you don’t have to list all the variables out if you only want to reorder a few. Batting %&gt;% select(playerID, HR, everything()) ## # A tibble: 105,861 x 22 ## playerID HR yearID stint teamID lgID G AB R H X2B X3B ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 abercda~ 0 1871 1 TRO NA 1 4 0 0 0 0 ## 2 addybo01 0 1871 1 RC1 NA 25 118 30 32 6 0 ## 3 allisar~ 0 1871 1 CL1 NA 29 137 28 40 4 5 ## 4 allisdo~ 2 1871 1 WS3 NA 27 133 28 44 10 2 ## 5 ansonca~ 0 1871 1 RC1 NA 25 120 29 39 11 3 ## # ... with 1.059e+05 more rows, and 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, ## # CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, ## # GIDP &lt;int&gt; Another commonly done column manipulation is the creating of new variables. Given a data frame and an appropriate length vector (new variable) we can use cbind (column bind) to add the variable to the data frame. temp &lt;- cbind(iris, extra = rep(&quot;a&quot;, 150)) str(temp) ## &#39;data.frame&#39;: 150 obs. of 6 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ extra : Factor w/ 1 level &quot;a&quot;: 1 1 1 1 1 1 1 1 1 1 ... More simply we can just add the new variable as a named (list) element! iris$extra &lt;- rep(&quot;a&quot;, 150) str(iris) ## &#39;data.frame&#39;: 150 obs. of 6 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ extra : chr &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;a&quot; ... To stay in the tidyverse and add more functionality we can use two functions from dplyr: mutate() - add newly created column(s) to current data frame transmute() - create new data frame with created variable(s) The syntax for these functions is similar to previous. We simply name the new variables after specifying our data set. mutate(data, newVarName = functionOfData, newVarName2 = functionOfData, ...) For this section let’s consider a data set on movie ratings from the fivethirtyeight package. library(fivethirtyeight) ## Warning: package &#39;fivethirtyeight&#39; was built under R version 3.6.3 fandango ## # A tibble: 146 x 23 ## film year rottentomatoes rottentomatoes_~ metacritic metacritic_user imdb ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Aven~ 2015 74 86 66 7.1 7.8 ## 2 Cind~ 2015 85 80 67 7.5 7.1 ## 3 Ant-~ 2015 80 90 64 8.1 7.8 ## 4 Do Y~ 2015 18 84 22 4.7 5.4 ## 5 Hot ~ 2015 14 28 29 3.4 5.1 ## # ... with 141 more rows, and 16 more variables: fandango_stars &lt;dbl&gt;, ## # fandango_ratingvalue &lt;dbl&gt;, rt_norm &lt;dbl&gt;, rt_user_norm &lt;dbl&gt;, ## # metacritic_norm &lt;dbl&gt;, metacritic_user_nom &lt;dbl&gt;, imdb_norm &lt;dbl&gt;, ## # rt_norm_round &lt;dbl&gt;, rt_user_norm_round &lt;dbl&gt;, metacritic_norm_round &lt;dbl&gt;, ## # metacritic_user_norm_round &lt;dbl&gt;, imdb_norm_round &lt;dbl&gt;, ## # metacritic_user_vote_count &lt;int&gt;, imdb_user_vote_count &lt;int&gt;, ## # fandango_votes &lt;int&gt;, fandango_difference &lt;dbl&gt; We can add a new variable that is the average of two columns using mutate. Remember to read %&gt;% as ‘then.’ fandango %&gt;% mutate(avgRotten = (rottentomatoes + rottentomatoes_user)/2) %&gt;% select(film, year, avgRotten, everything()) ## # A tibble: 146 x 24 ## film year avgRotten rottentomatoes rottentomatoes_~ metacritic ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Aven~ 2015 80 74 86 66 ## 2 Cind~ 2015 82.5 85 80 67 ## 3 Ant-~ 2015 85 80 90 64 ## 4 Do Y~ 2015 51 18 84 22 ## 5 Hot ~ 2015 21 14 28 29 ## # ... with 141 more rows, and 18 more variables: metacritic_user &lt;dbl&gt;, ## # imdb &lt;dbl&gt;, fandango_stars &lt;dbl&gt;, fandango_ratingvalue &lt;dbl&gt;, ## # rt_norm &lt;dbl&gt;, rt_user_norm &lt;dbl&gt;, metacritic_norm &lt;dbl&gt;, ## # metacritic_user_nom &lt;dbl&gt;, imdb_norm &lt;dbl&gt;, rt_norm_round &lt;dbl&gt;, ## # rt_user_norm_round &lt;dbl&gt;, metacritic_norm_round &lt;dbl&gt;, ## # metacritic_user_norm_round &lt;dbl&gt;, imdb_norm_round &lt;dbl&gt;, ## # metacritic_user_vote_count &lt;int&gt;, imdb_user_vote_count &lt;int&gt;, ## # fandango_votes &lt;int&gt;, fandango_difference &lt;dbl&gt; More than one variable can be created. Here an average of the normed metacritic scores. fandango %&gt;% mutate(avgRotten = (rottentomatoes + rottentomatoes_user)/2, avgMeta = (metacritic_norm + metacritic_user_nom)/2) %&gt;% select(film, year, avgRotten, avgMeta, everything()) ## # A tibble: 146 x 25 ## film year avgRotten avgMeta rottentomatoes rottentomatoes_~ metacritic ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Aven~ 2015 80 3.42 74 86 66 ## 2 Cind~ 2015 82.5 3.55 85 80 67 ## 3 Ant-~ 2015 85 3.62 80 90 64 ## 4 Do Y~ 2015 51 1.72 18 84 22 ## 5 Hot ~ 2015 21 1.58 14 28 29 ## # ... with 141 more rows, and 18 more variables: metacritic_user &lt;dbl&gt;, ## # imdb &lt;dbl&gt;, fandango_stars &lt;dbl&gt;, fandango_ratingvalue &lt;dbl&gt;, ## # rt_norm &lt;dbl&gt;, rt_user_norm &lt;dbl&gt;, metacritic_norm &lt;dbl&gt;, ## # metacritic_user_nom &lt;dbl&gt;, imdb_norm &lt;dbl&gt;, rt_norm_round &lt;dbl&gt;, ## # rt_user_norm_round &lt;dbl&gt;, metacritic_norm_round &lt;dbl&gt;, ## # metacritic_user_norm_round &lt;dbl&gt;, imdb_norm_round &lt;dbl&gt;, ## # metacritic_user_vote_count &lt;int&gt;, imdb_user_vote_count &lt;int&gt;, ## # fandango_votes &lt;int&gt;, fandango_difference &lt;dbl&gt; transmute is very similar to mutate except it doesn’t return the original tibble, just the newly created variable(s). fandango %&gt;% transmute(avgRotten = (rottentomatoes + rottentomatoes_user)/2) ## # A tibble: 146 x 1 ## avgRotten ## &lt;dbl&gt; ## 1 80 ## 2 82.5 ## 3 85 ## 4 51 ## 5 21 ## # ... with 141 more rows fandango %&gt;% transmute(avgRotten = (rottentomatoes + rottentomatoes_user)/2, avgMeta = (metacritic_norm + metacritic_user_nom)/2) ## # A tibble: 146 x 2 ## avgRotten avgMeta ## &lt;dbl&gt; &lt;dbl&gt; ## 1 80 3.42 ## 2 82.5 3.55 ## 3 85 3.62 ## 4 51 1.72 ## 5 21 1.58 ## # ... with 141 more rows mutate and transmute can also use ‘window’ functions. These are functions that take a vector of values and return another vector of values (see Cheat sheet). For instance we can find the cumulative sum of a column using cumsum. fandango %&gt;% select(rottentomatoes) %&gt;% mutate(cumulativeSum = cumsum(rottentomatoes)) ## # A tibble: 146 x 2 ## rottentomatoes cumulativeSum ## &lt;int&gt; &lt;int&gt; ## 1 74 74 ## 2 85 159 ## 3 80 239 ## 4 18 257 ## 5 14 271 ## # ... with 141 more rows mutate and transmute can also use some statistical functions to create new variables. Here we add a column representing the mean and standard deviation of the rottentomatoes score. fandango %&gt;% select(rottentomatoes) %&gt;% mutate(avg = mean(rottentomatoes), sd = sd(rottentomatoes)) ## # A tibble: 146 x 3 ## rottentomatoes avg sd ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 74 60.8 30.2 ## 2 85 60.8 30.2 ## 3 80 60.8 30.2 ## 4 18 60.8 30.2 ## 5 14 60.8 30.2 ## # ... with 141 more rows These statistical quantities are easily found for subgroups of the data using the group_by function. We can group the data set by year and run the same mutate function. Now the mean and standard deviation are found for each year and appended appropriately. fandango %&gt;% select(year, rottentomatoes) %&gt;% group_by(year) %&gt;% mutate(avg = mean(rottentomatoes), sd = sd(rottentomatoes)) ## # A tibble: 146 x 4 ## # Groups: year [2] ## year rottentomatoes avg sd ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 74 58.4 30.3 ## 2 2015 85 58.4 30.3 ## 3 2015 80 58.4 30.3 ## 4 2015 18 58.4 30.3 ## 5 2015 14 58.4 30.3 ## # ... with 141 more rows Another important way to create variables is through the use of conditional logic. This allows code to be executed only under certain conditions. The main way this is done is through if then else syntax. if (condition) { then execute code } #if then else if (condition) { execute this code } else { execute this code } #Or more if statements if (condition) { execute this code } else if (condition2) { execute this code } else if (condition3) { execute this code } else { #if no conditions met execute this code } Consider the built-in data set airquality. This hasdaily air quality measurements in New York from May (Day 1) to September (Day 153) in 1973. airquality &lt;- tbl_df(airquality) airquality ## # A tibble: 153 x 6 ## Ozone Solar.R Wind Temp Month Day ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 41 190 7.4 67 5 1 ## 2 36 118 8 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 5 NA NA 14.3 56 5 5 ## # ... with 148 more rows We may want to code a wind category variable: high wind days (15mph \\(\\leq\\) wind) windy days (10mph \\(\\leq\\) wind &lt; 15mph) lightwind days (6mph \\(\\leq\\) wind &lt; 10mph) calm days (wind \\(\\leq\\) 6mph) We may think using of using the standard if statements above. The issue is that if(condition) can only take in a single comparison. if(airquality$Wind &gt;= 15) { &quot;High Wind&quot; } ## Warning in if (airquality$Wind &gt;= 15) {: the condition has length &gt; 1 and only ## the first element will be used If you’ve programmed before you may think about this as an initial plan: loop through each observation use if then else to determine wind status There are a number of ways to do looping in R for while repeat The idea of a loop is to run code repeatedly changing something each time. The syntax for the for loop is for(index in values){ code to be run } The index defines the ‘counter’ or variable that varies as the loop iterates and ‘values’ define which values the index takes on. for (i in 1:10){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 for (index in c(&quot;cat&quot;,&quot;hat&quot;,&quot;worm&quot;)){ print(index) } ## [1] &quot;cat&quot; ## [1] &quot;hat&quot; ## [1] &quot;worm&quot; If we want to code our wind variable we could run a for loop with if logic inside: status&lt;-vector() #initialize vector to save results for (i in 1:nrow(airquality)){ if(airquality$Wind[i] &gt;= 15){ status[i] &lt;- &quot;HighWind&quot; } else if (airquality$Wind[i] &gt;= 10){ status[i] &lt;- &quot;Windy&quot; } else if (airquality$Wind[i] &gt;= 6){ status[i] &lt;- &quot;LightWind&quot; } else if (airquality$Wind[i] &gt;= 0){ status[i] &lt;- &quot;Calm&quot; } else { status[i] &lt;- &quot;Error&quot; } } Then we can append the new variable to our dataset. airquality$status &lt;- status airquality$status ## [1] &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; ## [7] &quot;LightWind&quot; &quot;Windy&quot; &quot;HighWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [13] &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;HighWind&quot; ## [19] &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;HighWind&quot; &quot;LightWind&quot; &quot;Windy&quot; ## [25] &quot;HighWind&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Calm&quot; ## [31] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;HighWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [37] &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; ## [43] &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;HighWind&quot; ## [49] &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;Calm&quot; &quot;Calm&quot; ## [55] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; ## [61] &quot;LightWind&quot; &quot;Calm&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Calm&quot; ## [67] &quot;Windy&quot; &quot;Calm&quot; &quot;LightWind&quot; &quot;Calm&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [73] &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;Windy&quot; ## [79] &quot;LightWind&quot; &quot;Calm&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; ## [85] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [91] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [97] &quot;LightWind&quot; &quot;Calm&quot; &quot;Calm&quot; &quot;Windy&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 53 entries ] This works just fine! Some other things to be aware of with loops: break kicks you out of the loop for (i in 1:5){ if (i == 3){ break } print(i) } ## [1] 1 ## [1] 2 next jumps to the next iteration of the loop for (i in 1:5){ if (i == 3){ next } print(i) } ## [1] 1 ## [1] 2 ## [1] 4 ## [1] 5 while loop are similar while(condition) { expression to evaluate modify condition? } The main issue with loops in R is that they are inefficient. R is an interpreted language so it must figure out how to evaluate code at each iteration of loop, slowing it down. Vectorized functions are much faster! These functions work on an entire vector at once so R doesn’t have to figure things out as often. ifelse() is a vectorized version of if then else. The syntax is: ifelse(vector_condition, if_true_do_this, if_false_do_this) Now to create our Wind status variable we can nest ifelse statements. ifelse(airquality$Wind &gt;= 15, &quot;HighWind&quot;, ifelse(airquality$Wind &gt;= 10, &quot;Windy&quot;, ifelse(airquality$Wind &gt;= 6, &quot;LightWind&quot;, &quot;Calm&quot;))) ## [1] &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; ## [7] &quot;LightWind&quot; &quot;Windy&quot; &quot;HighWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [13] &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;HighWind&quot; ## [19] &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;HighWind&quot; &quot;LightWind&quot; &quot;Windy&quot; ## [25] &quot;HighWind&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Calm&quot; ## [31] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;HighWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [37] &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; ## [43] &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;HighWind&quot; ## [49] &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;Calm&quot; &quot;Calm&quot; ## [55] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; ## [61] &quot;LightWind&quot; &quot;Calm&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;Calm&quot; ## [67] &quot;Windy&quot; &quot;Calm&quot; &quot;LightWind&quot; &quot;Calm&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [73] &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;Windy&quot; ## [79] &quot;LightWind&quot; &quot;Calm&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; ## [85] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [91] &quot;LightWind&quot; &quot;LightWind&quot; &quot;LightWind&quot; &quot;Windy&quot; &quot;LightWind&quot; &quot;LightWind&quot; ## [97] &quot;LightWind&quot; &quot;Calm&quot; &quot;Calm&quot; &quot;Windy&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 53 entries ] ifelse can also easily be used with transmute() or mutate()! mutate(airquality, status = ifelse(airquality$Wind &gt;= 15, &quot;HighWind&quot;, ifelse(airquality$Wind &gt;= 10, &quot;Windy&quot;, ifelse(airquality$Wind &gt;= 6, &quot;LightWind&quot;, &quot;Calm&quot;))) ) ## # A tibble: 153 x 7 ## Ozone Solar.R Wind Temp Month Day status ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 41 190 7.4 67 5 1 LightWind ## 2 36 118 8 72 5 2 LightWind ## 3 12 149 12.6 74 5 3 Windy ## 4 18 313 11.5 62 5 4 Windy ## 5 NA NA 14.3 56 5 5 Windy ## # ... with 148 more rows Note: the cut function can also be used to categorize a numeric variable pretty easily. This covers the major uses of dplyr for manipulating rows and columns. dplyr also has great functionality for doing joins similar to SQL. We’ll also see how it can be used to create basic numeric summaries using group_by and summarize. The cheat sheet is a great reference! Recap of basic commands: tbl_df - convert data frame to one with better printing filter - subset rows arrange - reorder rows select - subset columns rename - reorder columns mutate/transmute - create new variable 1.3.23 Reshaping Data We’ve talked about rows being observations and columns being variables. This is generally how most statistical analysis software likes their data to be formatted. This is called ‘long’ format data - each row is an observation. Sometimes data doesn’t come that way! Data may have observations across some columns since viewing data is often more natural that way. For example, consider the weather data set below. tempsData &lt;- read_table2(file = &quot;../../datasets/cityTemps.txt&quot;) ## Parsed with column specification: ## cols( ## city = col_character(), ## sun = col_double(), ## mon = col_double(), ## tue = col_double(), ## wed = col_double(), ## thr = col_double(), ## fri = col_double(), ## sat = col_double() ## ) tempsData ## # A tibble: 6 x 8 ## city sun mon tue wed thr fri sat ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 atlanta 81 87 83 79 88 91 94 ## 2 baltimore 73 75 70 78 73 75 79 ## 3 charlotte 82 80 75 82 83 88 93 ## 4 denver 72 71 67 68 72 71 58 ## 5 ellington 51 42 47 52 55 56 59 ## 6 frankfort 70 70 72 70 74 74 79 This data set is said to be in ‘wide’ format because columns represent observations. For most analyses this type of data will need to be reshaped into long format. The tidyr package can be used for this purpose! The gather function takes multiple columns and gathers them into key-value pairs. This tkes wide data and makes it long. Similarly there is a spread function takes two columns (key &amp; value) and spreads in to multiple columns. This takes long data and makes it wide. Let’s switch the tempsData dataset to ‘long’ form with gather(). We need to identify the key = new name for values in columns value = new name for data values columns describe which columns to take tempsData %&gt;% gather(key = day, value = temp, 2:8) ## # A tibble: 42 x 3 ## city day temp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 atlanta sun 81 ## 2 baltimore sun 73 ## 3 charlotte sun 82 ## 4 denver sun 72 ## 5 ellington sun 51 ## # ... with 37 more rows The columns can be provided to gather in similar ways to how we chose them in the select function. newTempsData &lt;- tempsData %&gt;% gather(key = day, value = temp, sun:sat) newTempsData ## # A tibble: 42 x 3 ## city day temp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 atlanta sun 81 ## 2 baltimore sun 73 ## 3 charlotte sun 82 ## 4 denver sun 72 ## 5 ellington sun 51 ## # ... with 37 more rows To give an example of using spread we can take our long format data and turn it back into wide format. WE just need to identify the: key = new column names value = value to spread out newTempsData %&gt;% spread(key = day, value = temp) ## # A tibble: 6 x 8 ## city fri mon sat sun thr tue wed ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 atlanta 91 87 94 81 88 83 79 ## 2 baltimore 75 75 79 73 73 70 78 ## 3 charlotte 88 80 93 82 83 75 82 ## 4 denver 71 71 58 72 72 67 68 ## 5 ellington 56 42 59 51 55 47 52 ## 6 frankfort 74 70 79 70 74 72 70 The tidyr package also has useful functions for separating a column (or combining two columns) using separate (and unite) Consider a data set on air pollution in Chicago. chicagoData &lt;- read_csv(&quot;../../datasets/Chicago.csv&quot;) ## Parsed with column specification: ## cols( ## X = col_double(), ## city = col_character(), ## date = col_character(), ## death = col_double(), ## temp = col_double(), ## dewpoint = col_double(), ## pm10 = col_double(), ## o3 = col_double(), ## time = col_double(), ## season = col_character(), ## year = col_double() ## ) chicagoData ## # A tibble: 1,461 x 11 ## X city date death temp dewpoint pm10 o3 time season year ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 3654 chic 1/1/1997 137 36 37.5 13.1 5.66 3654 winter 1997 ## 2 3655 chic 1/2/1997 123 45 47.2 41.9 5.53 3655 winter 1997 ## 3 3656 chic 1/3/1997 127 40 38 27.0 6.29 3656 winter 1997 ## 4 3657 chic 1/4/1997 146 51.5 45.5 25.1 7.54 3657 winter 1997 ## 5 3658 chic 1/5/1997 102 27 11.2 15.3 20.8 3658 winter 1997 ## # ... with 1,456 more rows The lubridate package great for date data but let’s just do some basic parsing of the date variable using separate. We can split the date variable by the / that separates the day, month, and year to create three new columns. Using remove = FALSE keeps the original variable (date) and convert = TRUE attempts to convert the newly created variables to numeric if possible. chicagoData %&gt;% separate(date, c(&quot;Day&quot;, &quot;Month&quot;, &quot;Year&quot;), sep = &quot;/&quot;, convert = TRUE, remove = FALSE) ## # A tibble: 1,461 x 14 ## X city date Day Month Year death temp dewpoint pm10 o3 time ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3654 chic 1/1/~ 1 1 1997 137 36 37.5 13.1 5.66 3654 ## 2 3655 chic 1/2/~ 1 2 1997 123 45 47.2 41.9 5.53 3655 ## 3 3656 chic 1/3/~ 1 3 1997 127 40 38 27.0 6.29 3656 ## 4 3657 chic 1/4/~ 1 4 1997 146 51.5 45.5 25.1 7.54 3657 ## 5 3658 chic 1/5/~ 1 5 1997 102 27 11.2 15.3 20.8 3658 ## # ... with 1,456 more rows, and 2 more variables: season &lt;chr&gt;, year &lt;dbl&gt; Similarly we can combine columns with unite. Let’s create a new column that is just the day and month separated by a -. chicagoData %&gt;% separate(date, c(&quot;Day&quot;, &quot;Month&quot;, &quot;Year&quot;), sep = &quot;/&quot;, convert = TRUE, remove = FALSE) %&gt;% unite(DayMonth, Day, Month, sep = &quot;-&quot;) ## # A tibble: 1,461 x 13 ## X city date DayMonth Year death temp dewpoint pm10 o3 time season ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 3654 chic 1/1/~ 1-1 1997 137 36 37.5 13.1 5.66 3654 winter ## 2 3655 chic 1/2/~ 1-2 1997 123 45 47.2 41.9 5.53 3655 winter ## 3 3656 chic 1/3/~ 1-3 1997 127 40 38 27.0 6.29 3656 winter ## 4 3657 chic 1/4/~ 1-4 1997 146 51.5 45.5 25.1 7.54 3657 winter ## 5 3658 chic 1/5/~ 1-5 1997 102 27 11.2 15.3 20.8 3658 winter ## # ... with 1,456 more rows, and 1 more variable: year &lt;dbl&gt; You should now be ready to use R to get data in and do some basic manipulation! 1.4 SAS The general workflow for programming in SAS is similar to that of R. First raw data must be imported to SAS. Once that data is imported you will find an appropriate PROC (or procedure) that will summarize or analyze your data appropriate. Often times relevant graphs and summaries are created with a single PROC. At the end of this section the reader should be able to do the following: install SAS University Edition read and write basic SAS programs import well-formatted data into SAS do basic data manipulation in SAS As the book progresses the steps of summarizing and analyzing the data will be covered. Let’s get started! 1.4.1 Basics of SAS 1.4.2 Reading Data with SAS 1.4.3 Manipulating Data with SAS "],
["sampling-schemes-and-experimental-design.html", "Chapter 2 Sampling Schemes and Experimental Design 2.1 Data in the Wild 2.2 Motivating Example: Sampling - Farmer’s Market 2.3 Motivating Example: Design - Student Assessment Volunteers 2.4 Statistical Ideas and Concepts 2.5 References and Readings 2.6 Software", " Chapter 2 Sampling Schemes and Experimental Design 2.1 Data in the Wild Data is a collection of information about a group of individuals or units. Most often we have a number of variables, or measures of interest, that we observe on each individual or unit. The collection of information is called a dataset. Data is ubiquitous in today’s society. Healthcare, marketing, history, biology, … almost every field has data for which a sound statistical analysis can glean useful insights. However, the quality of data varies greatly from study to study and this implies the conclusions which you can draw from a study vary as well. Let’s jump in! (Put visual of a dataset here) 2.1.1 Experimental Study Some data comes from a well-designed experiment where a researcher uses sound principles to select units for the study and conduct interventions. For example, a mechanical engineer wanted to determine which variables influence gas mileage of a certain year and model of a car. Gas mileage would be referred to as the response variable for this study since it characterized the performance of interest. After careful consideration, the engineer chose to investigate a few explanatory variables they believed were associated with the response. They wanted to learn about the relationship between gas mileage and the factors below. A factor is an explanatory variable that takes on a finite number of values, called levels, set by the researcher. Study factors (levels of each factor are given in parentheses): Tire pressure (low, standard) Octane rating of fuel (regular, midgrade, premium) Type of driving (defensive, aggressive) They also chose to control or hold constant the following variables during the execution of the study: Weather conditions Route Tire type Past car usage The engineer randomly selected a sample of 24 cars from the assembly line for that year and model of car (we’ll learn more about the importance of selecting a representative sample of cars shortly). Software was used to randomly assign a treatment to each of the 24 cars. A treatment is a particular combination of the factor levels. For instance, low tire pressure, regular octane fuel, and defensive driving was a treatment. The cars would be called the experimental units (EUs) as they are the unit the treatments are assigned to. The experiment was run and the gas mileage found for each car. As the car was measured, we’d refer to the car as the observational unit (OU). The key thing that makes this study an experimental study is the active role the research plays in manipulating the environment. Here, the researcher uses random assignment of treatments to the EUs. Experimental Study - researchers manipulate the conditions in which the study is done. Visual of experiment - maybe a researcher with arrows going out to cars where the tires, gas tank, and driver are emphasized in some way This short description exhibits three important concepts in experimental design that we’ll come back to many times. Pillars of experimental design: (Put an outer block around this) Randomization - treatments are randomly assigned to experimental units Replication - multiple (independent) experimental units are assigned the same treatment Control - some study conditions are held constant to reduce variability in the response 2.1.2 Observational Studies Some data comes from an observational study where the researcher collects data without imposing any changes. For example, an economist wanted to investigate the effects of recently added tariffs on agricultural products to the amount and value of such products that are traded between the United States and Asia. This study had two response variables, the amount and value of each product traded between the two parties. In order to take into account seasonal variation and time of year, the economist decided to compare the two response variables from the current year - 6 months worth of data - against the values of the two response variables during the same 6 month periods for each of the past 5 years. The year variable associated with a measurement was an explanatory variable. Alternatively, the year variable could have also been labeled to take on one of two values: no-tariff (past years’ data) or tariff (current year’s data). The researcher obtained the data from the census bureau and conducted their analysis. Notice that the researcher, while certainly being actively involved in the careful consideration of the data to be collected and how to format the data, did not actively intervene or impose a change. This is the key component of an observational study. Observational Study - researchers collect data without imposing any changes on the study environment. Visual of observational study here - something like a researcher with a clipboard looked at a globe with arrows to represent trading or something like that 2.1.3 Observational vs Experimental Studies You may have noticed that both example studies had some things in common. For instance, both studies had response variables that characterize the performance of the study in some sense. Importantly, these response variables had variation. That is, observing the variable is non-deterministic even under seemingly identical situations. Accounting for, and dealing with, this variation is at the heart of the reason statistical methods are needed! There were also explanatory variables that the researcher was interested in with regard to their relationship with the response variable. Determining and quantifying these relationships is often the major goal of a study. Both studies also hoped to make statements or conclusions about a larger group using data from a subset of that larger group. This idea is referred to as statistical inference. More formally the group of values, items, measurements, or individuals of interest defines the population of interest and the data collected on that group represents the sample. The number of observations in the sample is referred to as the sample size. For the gas mileage example, the population was all cars of the year and make in question, the sample was the data collected on the 24 cars, and the sample size was 24. For the tariff example, the population was all future agricultural products traded between the United States and Asia, the sample was the information from the six years of trade data, and the sample size is six. The two populations mentioned here differ in that the car population is a real, finite population and the trade population is a conceptual, infinite population. As long as a finite population is large relative to the sample size, the differences tend not to be important. We’ll discuss these ideas in more detail as they arise. Population - (Possibly conceptual) group of values, items, measurements, or individuals of interest Sample - Subset of the population on which we observe data Sample Size - Number of observations in the sample Statistical Inference - Process of using sample data to make statements or claims about a population. Two major goals of inference: - Determining and quantifying relationships between explanatory variables and the response - Predicting the response for some setting of explanatory variables. Both of these studies had to determine how to obtain their observations. For the experiment, 24 cars were used. For the observational study, six years of data were collected. How this data is collected can be extremely important in terms of the types of conclusions that can be made. Data should be representative of the population in which the researcher hopes to make inference. If not, the conclusions made are likely invalid or in need of qualifications. We’ll discuss the idea of what makes a good or bad sampling scheme later in the chapter. The major difference between the two studies was the active (experimental) and passive (observational) roles played by the researcher. This difference is also of vital importance to the types of conclusions that can be made from the study. A well-designed experiment can often allow the researcher to infer causation to the treatments, whereas an observational study cannot imply causation using soley the data. The conclusions a researcher can make based on how the data were collected and the type of study are outlined in the table below. Redo this table with our own wording Figure 2.1: Scope of Inference, cite: Khan Academy Doing an observational study doesn’t mean that your study is bad! An observational study is sometimes done out of necessity when an experiment wouldn’t be ethical or feasible. For the tariff example, there really isn’t a way to conduct an experiment. If we wanted to design an experiment to see if smoking causes lung cancer, that would be unethical because we can’t force people to smoke. The key point is that the implications we can draw will differ greatly between experimental and observational studies and will depend heavily on the quality (in relation to the population) of the data you have. To apply causation to an observational study, causal inference methods can sometimes be used. We won’t cover this extensive topic in this text. See the references and readings section for useful readings. 2.1.4 The Role of Statistics A statistic itself is generally a summary of data. When most people think of statistics they think of things like a batting average or a proportion of people that will vote for a proposal. Statistics as a discipline is the science of learning from data. It encompasses the collection of data, the possible design of an experiment, the summarization of collected data, and the modeling or analysis used in order to make a decision or further scientific knowledge. Statistics in everyday use usually refers simply to summaries about data (means/averages, proportions, or counts). Statistics as a field encompasses a much larger range of ideas including how to collect data, model data, and make decisions or come to conclusions when faced with uncertainty. Statistical methods are needed in situations where data is variable. There is no need to apply statistical methods to study the relationship between temperature in degrees Celsius and degrees Fahrenheit. Given the degrees in Celsius, we know the exact value in degrees Fahrenheit. However, if we again collected data about the gas mileage of vehicles under the exact same study conditions we’ll get slightly different gas mileage readings. If we observed another six month period of trade data, we’ll see different amounts and values traded. Accounting for this variability in data is the reason to apply statistical methods and is a key component of any statistical analysis. Ideally, we should try to take a holistic view of a study. Before any data is collected it is vital to understand the goals and background of the study. These will inform the data we’d like to collect as well as the data that we are able to collect - which may need to act as a proxy. A plan should be determined for the actual collection and storing of the data. The entire study design will then inform an appropriate statistical analysis as well as the conclusions that can be drawn. Taking this bigger picture view of the problem, we can usually follow these steps: Define the objective of the experiment and understand the background (Define Objective &amp; Background) Select appropriate response variables (Select Response) Identify sources of variation (Determine Sources of Variation) Choose sampling scheme and/or experimental design (Select Design) Carry out the study (Do Study) Statistically analyze the data (Do Statistical Analysis) Draw conclusions from the analysis while considering limitations and the steps above as well as communicate results (Draw Conclusions &amp; Communicate) overall logo here We’ll focus on this entire process in our chapter motivating examples. Mostly, we’ll investigate designed experiments. We attempt to tackle each major topic in this text with a problem-based approach. That is, we identify a real-world (or close to it) motivating example and discuss the relevant statistical ideas in the context of that problem. We then provide a discussion of the main statistical ideas and concepts along with enough mathemathics to fully comprehend the material. Related references and readings are also provided. Each chapter includes with a section that outlines the use of R and SAS for implemention. Finally, where applicable, we include a section dives deeper into the mathematics behind the concepts - this section is always optional! 2.2 Motivating Example: Sampling - Farmer’s Market 2.2.1 Define Objective &amp; Background A nutrition scientist wanted to understand the cleanliness and food hygiene of the vendors at the North Carolina State Farmer’s Market (henceforth the farmer’s market). Secondarily, she wanted to learn about vendor sales to see if there was a relationship with their cleanliness and food hygiene. The researcher had access to the names of each vendor’s business, their general purpose, and the products they sold. The researcher needed to decide the scope of their study. Formally, they needed to define the population of interest. The population is the group of people or units of interest to the researcher. As her interest centered around food-related businesses, she restricted to looking at the vendors which sold horticultural crops. She hoped that conclusions made by her study could apply to all horticulture vendors at the farmer’s market - thus, this is her population. Note: One could try to do a study at just the North Carolina State Farmer’s Market and extend the results to all farmer’s markets in the state or in the south, but that would require many assumptions to be valid. A list of the horticultural products sold and their availability is reproduced below. 2.2.2 Select Response The researcher needed to determine the variables to collect that would best help to answer their questions of interest. These variables that characterize the experiment are called response or target variables. To investigate the knowledge of hygiene and safety, a short questionnaire was developed to allow the vendor’s head manager (or similar employee) to describe their safety protocol and knowledge: For your produce with signs that say “clean” or “washed”, what does this mean? How are the foods transported to the market? eg: refrigerated/closed storage What food safety risks do you as a vendor worry about? Do you require one-use gloves to be used? (Yes or No) Do you designate a person in charge of money transactions? (Yes or No) The researcher also planned to do an assessment of the cleanliness of each vendor’s station at different times. Her team would pick 30 days during the summer in which they’d walk through the vendor stations and collect the following information: Overall is the station clean (Yes or No) Is anyone smoking around the food products? (Yes or No) Are tables covered? (Yes or No) If so, what is the material? Do employees appear to be clean? (Yes or No) Are one-use gloves used? (Yes or No) Is there a designated person in charge of money transactions (Yes or No) She noted that there is a yearly cycle to the products sold and decided to collect vendors sales information by looking at the (AMT) amount sold in the last year (in dollars), the (PURCHASE) total number of purchases made in the last year, and the (NUM_ITEMS) total number of items sold in the last year. For the last variable, they had to decide how to measure the number of items sold for the different types of crops. For most of the crops looking at the total weight (in lbs) sold made sense. But, for some, other measures were needed. For example, for sweet corn the number of ears sold would be recorded. You can see that there are many decisions that the researcher must make in simply deciding the response variables to collect! A poor choice here can make or break a study. 2.2.3 Determine Sources of Variation The response variables clearly have some relationship to other variables that could be collected. For instance, the NUM_ITEMS variable is clearly going to be different based upon what crops the vendor sells. The AMT variable would differ depending on the size of the vendor’s inventory. These are examples of explanatory variables or variables that define the study conditions. Explanatory variables go by many names such as predictors, features, or independent variables. A main consideration about whether or not to record a variable is whether or not the variable would be related to a variation in a response variable. Since the response variables are truly what is of interest, there is really not much of a point in recording variables that likely have no relationship with it. Choosing the explanatory variables can also indicate further questions of interest. For instance, the researcher may want to compare the percent of “Yes” for the overall cleanliness score for vendors that mainly sell vegetables to those that mainly sell fruit leading to a comparison across groups being of interest. She may want to try to model the AMT of cantaloupe sold as a function of the cleanliness score. The average amount for the population or a subpopulation would be referred to as a parameter of interest. Formally, a parameter is a summary measure about a population. Common parameters investigated include a mean, proportion, median, or variance of different subgroups of the population. The explanatory variables she collected about the vendors included the types of crops sold, the services they provide (grow, pack, and/or ship), and whether or not they are a “Got to be NC member”. For the questionnaire, she added the additional questions below: Are there any organic or synthetic chemicals/fertilizers/pesticides/manures used on the products? Are all foods grown/processed by the vendors? What kind of soil were the products grown in? eg: organic/compost/plant material For the assessment of cleanliness, she added the following question: How many people are working? 2.2.4 Select Design For this study the researchers aren’t interested in doing an intervention so an observational study was being done. The major task to consider for the observational study is how to select participants from the population. The subset of the population we (attempt to) observe our data on is called the sample. The sample size is the number of measurements in the sample. Ideally, we would measure every member of our population. This is called a census. If a census can be done then the value of a population’s parameter can be found exactly by simply summarizing the population data. However, conducting a census can be extremely costly or time-intensive so most of the time a census cannot be done. This means that the information we collect would likely be different if we collected it again. Accounting for this variability is the main reason statistical analysis is needed. How the researcher selects their sample is extremely important. This method is often referred to as the sampling scheme. Using a statistically valid sampling scheme is vital to the assumptions made when doing statistical inference. A valid sampling scheme implies that every member of the population has a known and non-zero chance of inclusion in the sample. There are many good ways to select the sample and many bad ways. Need to get more info about the farmer’s market to finish this part (Talk about bad first and why bad - visuals too) Talk about good and why good - visuals too. This idea is further fleshed out at the end of the chapter. (reference/link this) Here they chose to do a stratified sample to make sure that they didn’t leave out any important subgroups. 2.2.5 Do Study Go and talk to chosen vendors. May have some non-response issues. Ideally a contingency for this should be developed when considering the sampling scheme. 2.2.6 Do Statistical Analysis The major goals of this study were simply to describe the vendors at the farmer’s market. In this case we can produce numerical and graphical summaries. Careful discussion of not selecting a modeling technique based on this unless it is a pilot study or an exploratory study else we have increased our nominal type I error rate… Spend a lot of time here talking about graphs of different types. Sample means, sample variances, etc. Discuss population curves vs sample histograms and the relationship. Not a formal test here but comparisons of interest etc. 2.2.7 Draw Conclusions &amp; Communicate What actionable things have we found? Likely some trends to investigate further. Perhaps run an experiment to formally see if some alteration can be effective. What can we conclude realistically from this data? To what population are we talking? 2.3 Motivating Example: Design - Student Assessment Volunteers In this example, we’ll talk through the entire problem process but focus on aspects of experimental design. 2.3.1 Define Objective &amp; Background The Division of Academic and Student Affairs (DASA) is charged with assessing NC State’s general education competency (or Pack Proficiencies) program. This is a set of competencies that every NC State graduate should master by the time they graduate. The five Pack Proficiencies are Critical Thinking, Creative Thinking, Oral Communication, Quantitative Literacy, and Written Communication. Their competencies go hand-in-hand with the general education program, but should be reinforced throughout each major curriculum. DASA assesses the quantitative literacy proficiency through a number of instruments including a standardized test that is customized for NC State. Students are assessed when they are freshman and again when they are seniors. However, it is much easier to convince freshman to take this extra (mostly voluntary) exam than it is to convince a graduating senior. DASA wanted to design an experiment around an email recruitment campaign to determine if there was a type of email that was most effective in recruiting students to sign up to take this low-stakes assessment. The population of interest was a conceptual population of all future seniors that they would be recruiting via email for their assessment. There were three thoughts about students under consideration: Certain students might respond to school spirit pleas. Certain students might be more motivated by incentives. Certain students might be more motivated by sympathy (“We need your help!” requests). For example, anecdotally there were a number of students that took the test in the past because they “felt sorry” for DASA or because DASA was “begging.” 2.3.2 Select Response The parameters of interest were the true proportions of students that would respond positively to each of three competing email types. The differences in these proportions would give information about the most effective campaign. Three competing email campaigns were chosen: A “school spirit” type email where students were encouraged to help make NC State better. A “regret lottery” style email. Essentially, you will miss your chance at a prize if you don’t take this assessment! A “sympathy” style email. “NC State is counting on you, we really need your help for this to work”. A student would be assigned one of these email types to receive and these emails would be sent out multiple times over a period of time in the spring (last) semester for graduating seniors. The chosen response was the number of students that responded positively to an email request (this can easily be transformed into a sample proportion and be modeled appropriately). 2.3.3 Determine Sources of Variation As the emails would be sent out multiple times, the email period was also recorded in order to investigate any time trends with the three methods. The following three variables weren’t necessarily of interest but deemed to be possible sources of variation in the proportion that might respond: Because the students in different colleges (Sciences, Textiles, etc.) might respond at different rates, the college the student was enrolled in was identified as an important variable (using the student’s first major). Gender was deemed important as there was anecdotal evidence that those that identify as female were more likely to respond to the sympathy campaign. To account for some cultural differences, race was also identified as an important variable. 2.3.4 Select Design The population for this study was the conceptual population of all future graduating seniors. The sample members would be all seniors from the year the study was conducted. As mentioned, it was decided that a student would be assigned one of these email types to receive and these emails would be sent out multiple times. However, some students were already taking this assessment as part of a senior capstone type course. These students would not be sent the emails. This implied that the group used for the sample wouldn’t exactly represent the population of interest (an example of sampling bias). This smaller group was still used as it made the most practical sense. The researcher wanted to be able to assign a cause and effect relationship between email type and proportion of respondents. When a well designed experiment is run where the experimenter manipulates the environment this can be done! By randomizing the email types to students, the differences observed can reasonably be attributed to the differences imposed. Randomization may not seem necessary but is vital! Suppose we assigned the first third of the students the first email type, the second third the second email type, and the last third the last email type. There may be some underlying characteristic that exists more heavily in the one of the groups. For instance, maybe students with last names near the beginning of the alphabet would be more likely to respond since they’ve often been called on first during their schooling - making them more likely to respond. This is likely not true, but by not randomizing, we risk the systematic effect of underlying variables like this. Using randomization we can at least be assured we have not imposed this problem. Our goal in the study is really to be able to observe and quantify any treatment effect. That is, a difference in the responses due to the email type. If we were to do random assignment of treatments to our entire group, there is a chance of having unbalanced treatment groups simply by chance alone. For example, all students from a small college could be assigned the same email type. This can be dealt with by blocking on characteristics and randomly assigning treatments within a blocks. A block is a homogenous group of EUs. We could block based on the combinations of the three explanatory variables noted earlier (college, gender, and race). For instance, one block was black, female, college of sciences students. Within each of these blocks the three email types would be randomly assigned to the students. This is called a randomized complete block design. The word complete here implies that every block received every treatment. By randomizing within blocks we are ensuring that the effects of the blocking variables are as equally allocated across the treatments as possible. (How this process was done using software is included in the software section.) The last item to mention with respect to the experimental design is the idea of replication. The sample size for the experiment was about 5400 yielding about 1800 replications of each treatment. If we see a difference in the behavior of respondents across a large number replications, this gives us more confidence the results of our experiment will extend to the population. The plan for analyzing the experiment above was to compare the three email campaigns using the overall (across all emails sent) sample proportion that responded positively. (A secondary analysis would be to investigate the trends over time for the email campaigns but this won’t be discussed further.) A plan for data collected should was made. The data collected would be stored in an excel spreadsheet updated by DASA as the experiment ran. 2.3.5 Do Study Once the list of students with their assigned email type was created, DASA began their emailing campaign. Emails were sent at nine different time periods during February. With each time period, the proportion responding positively was recorded. These numbers were pooled into a final talley within each block for analysis. 2.3.6 Do Statistical Analysis The data was read into an appropriate software for summarization and analysis. As a first investigation of the data, the sample proportion responding positively for each email type was summarized (without regard to the block used). School spirit email type: 132 of 1861 responded positively (0.071) Regret lottery email type: 116 of 1865 responsed positively (0.062) Sympathy email type: 114 of 1865 responed positively (0.061) The data were analyzed using methods for a randomized complete block design with a binary response (covered later in the book!). As this is a bit beyond us at this point, we’ll simply consider the raw sample proportions and their differences. The standard error (a measure of how variable the measurement is) in these sample proportions is around 0.006. 2.3.7 Draw Conclusions &amp; Communicate The results of a naive analysis of this study indicated that the school spirit email, on average, had a higher level of participants respond positively to the request. However, this result was not deemed statistically significant. That is, the difference was not large enough to show a difference when taking into account variation in the study. The end result of this study was to conclude that the email type sent to students didn’t play a very large role in whether or not students volunteered to participate. It is unkown whether or not the senior students in capstone courses would have made a difference in the results of the study. However, since future email campaigns wouldn’t include these students anyway, the final conclusion from the study was to stick with the school spirit type email that was previously used. 2.4 Statistical Ideas and Concepts When conducting a study, it is vital to identify the population and questions of interest. As mentioned previously, the population is the entire group of units of interest. Once defined, the questions of interest must be determined. Researchers often want to ask things like: Is there a difference in the response between group A and group B? What should we expect to see if we change variable C? However, these questions are not clearly defined! What does it mean to have a difference in the response? Are you interested in a difference in the average response for members of the poulation in group A vs those in group B? The median response, the smallest or largest response value, or the shape of the distribution of values for members of the poulation in group A vs those in group B? The same detail is required in order to know what to expect with a change. Do you care about the average effect over the entire poulation by changing variable C? Or are you interested in the change in the spread in expected outcomes in the population when the change is made? Usually, these questions of interest need to be stated in terms of parameters such as the (population) mean, median, or variance. A parameter is a measure about the population. These are values that, if we could do a census and measure the entire population, we could calculate. However, a census is not usually feasible due to cost constraints or the time that it would take to implement. This implies that answers to the questions of interest that are centered around these parameter values cannot truly be known! Instead, we take a sample or subset of the population that we collect our data on. With the sample we calculate (sample) statistics or measures about the sample that correspond to or estimate the parameter. As you may expect, a good statistical measure will ‘converge’ in some sense to the parameter as the sample size, or number of members in the sample, increases. We’ll discuss how to create an estimator (statistic) and properties of good estimators in later chapters. Often the key item that we need to know about an estimator is its (sampling) distribution. The distribution of a variable or estimator is simply the pattern in which the quantity is observed. Knowing the distribution allows us to predict the values we should see for that statistic probabilistically (at least under certain assumptions). With an understanding of the predictabilty of an estimator we can then make statements or claims about the population’s parameters with some idea of variability attached! This idea and process of using sample data to discuss population values is the idea of statistical inference. To give clarity to the ideas above, consider a simplified gas mileage example. We want to investigate whether gas mileage differs for low and high tire pressure settings. We could investigate this difference in a number of ways but likely we’d want to know if a ‘typical’ gas mileage would differ between the tire pressure settings. Generally, we think of a typical observation as one near the middle. This could lead to a general question about the difference between the (population) mean gas mileage for all cars driven with high tire pressure against the (population) mean gas mileage for all cars driven with low tire pressure. Alternatively, we might want to know if the gas mileage readings are more variable under one setting or another. This may involve a comparison of population variances or standard deviations (as these are measures of spread - we’ll cover these in chapter 3). (Visual of these difference between populations… curves might not be understandable yet though) To answer either of the two questions posed above, we need to use the data collected to estimate these population parameters. Quite often, there are intuitive estimators. For instance, to estimate the difference in population mean gas mileages we can simply use the difference in sample mean gas mileages! Similarly, we can compute sample variances and use those to inform us about the differences in the population variances. (Visual of estimation idea) In order to quantify uncertainty around our sample differences (or sample ratio, etc.), we require knowledge of the distribution (or pattern and frequency of observation) of the sample quantity. This knowledge allows us to calculate probabilities (and eventually create confidence intervals or conduct hypothesis tests). (Visual of inference) Hopefully, it is somewhat clear that the quality of our sample is vital to the inferences we can make! Suppose we want to make inference about how well a drug works for treating acne in all people. If our sample consists mainly of people in their 20’s, assumptions and domain-specific knowledge would need to be leveraged in order to extend the results from the study to the entire population of interest. For example, it would need to be argued that people in their 20’s and teenagers, who are likely still going through puberty (among other differences), would have the same reaction to the drug. This issue can be avoided if a sample is representative of the population. The next section takes up the issue of obtaining a good sample from the population of interest. 2.4.1 Sampling Schemes The method used to obtain the units for a sample is called the sampling scheme. There are good and bad sampling schemes. The main characteristic of a good sampling scheme is the use of a probability sample. A probability sample is one where every member of the population has a known and non-zero chance of inclusion in the sample. We’ll study probability in more detail later, but a population member having a non-zero probability of inclusion simply implies, if the sampling scheme was repeated again and again, eventually every unit would be included in at least one of the samples collected. Having inclusion probabilities known for all members of the population allows for the quantification of error associated with sample estimators. A probability sample requires some random mechanism in order to execute the selection of population members into the sample. However, there is a big difference between statistical randomness and the everyday use of the term randomness. Randomness in everyday use usually refers to the idea that things are not known beforehand. For instance, if a sample was collected by measuring the next 15 people that passed by us on a busy street, there is randomness but not randomness in a sense that helps statistically. Even though the members aren’t known prior to collecting the sample, the method used to collect systematically excludes people that are otherwise not able to be walking down the street at the time the sample was taken. In statistics, having randomness usually involves a random number generator or a software that uses one (methods also include using a random digit table or flipping a coin, but these are mostly obsolete at this point!). Let’s discuss sampling techniques that utilize a probability sample (and are often executed using a random number generator). 2.4.1.1 Simple Random Sample The most simplistic sampling scheme is the simple random sample or SRS. The idea is outlined below. If the population size is \\(N\\) and the sample size is \\(n\\): Assign members of the population numbers from 1 to \\(N\\) Use a random number mechanism to select \\(n\\) of the \\(N\\) numbers The sample is then the population members that correspond to the selected numbers In a SRS, every subset of size \\(n\\) from the population has the same chance or probability of being included in the sample. (An SRS also implies that every member of the population has probabilty \\(n/N\\) of being included in the sample. Again, we’ll cover probabiltiy in more depth later.) Since every population member has a known and non-zero chance of inclusion in the sample, this implies an SRS is a probability sample! An everyday example of a process similar to a SRS is the lottery. Many states have a pick three lottery where the population of balls consist of balls numbering zero, one, two, three, …, nine. The population size is \\(N=10\\). Three balls are then randomly selected (\\(n=3\\)) as the winning combination. Prior to the draw, players select three numbers and can win if they have the same three numbers as those selected. Here any combination of three numbers has the same probability of being selected (\\(1/\\binom{10}{3} = 1/120\\)). Note that an SRS does not guarantee a representative sample every time! For instance, suppose a university wants to determine the proportion of students that would favor a change to the bookstore. Every student is assigned a campus ID number. Due to time and cost constraints, the university decides to collect data on 400 students. An SRS can be used here to select the 400 students. The sample collected may, by random chance, contain only students from a particular college. The larger the sample, the less likely this is. Obtaining this type of sample doesn’t mean what was done was wrong, it simply means that the sample we obtained may not be very representative of the population. The mathematics and probability used to analyze the sample would still be valid, however, we may be dealing with one of the ‘rare’ samples that give atypical results. An SRS does imply that on average we should get a representative sample. Other techniques can increase the chance of any particular sample being representative of the population (at the expense of being more complicated and sometimes needing to be analyzed in a more complicated manner). (Visual of SRS) 2.4.1.2 Stratified Random Sample A stratified random sample is used when there are important subgroups that the researcher wants to ensure are included in a sample. These subgroups are called strata. Once the strata are determined, an SRS is often done within each strata. For instance, again suppose a university wants to determine the proportion of students that would favor a change to the bookstore. The officials might want to make sure that members of each college are selected into the sample since the use of the bookstore can vary substantially from major-to-major and college-to-college. This time they create five strata, each corresponding to a college at the university. Within each strata they conduct an SRS, selecting 80 people from each college. This gives a total sample size of 400. (Visual of stratified RS) Note that the proportion of members selected doesn’t need to be constant across the strata. The size of the sample done in each strata might be done proportionally to the total number of students that college constitutes. For simplicity, assume the total population size was 10000 and the five colleges had student population sizes 3000, 2500, 2000, 1500, and 1000, respectively. The proportion of students in each college can be found as follows: \\(3000/10000 = 0.3\\) \\(2500/10000 = 0.25\\) \\(2000/10000 = 0.2\\) \\(1500/10000 = 0.15\\) \\(1000/10000=0.1\\) Still looking to obtain a total sample of size 400, we could select \\(0.3*400 = 120\\) \\(0.25*400 = 100\\) \\(0.2*400 = 80\\) \\(0.15*400 = 60\\) \\(0.1*400 = 40\\) students from the each college, respectively. Alternatively, a larger proportion may be taken from certain strata because they are of greater interest to the researcher. An advantage of stratified random sampling is that it can be more efficient than an SRS if the units in the strata are more similar than the overall group. This implies that the estimates for quantities will tend to be less variable in the stratified sample. 2.4.1.3 Examples of Bad Sampling Schemes There are many poor choices of sampling schemes that should be avoided. Two examples are a convenience (or haphazard) sampling scheme and a volunteer response sampling scheme. These both lead to sampling bias where the certain members of the population likely have higher or lower probabilities of inclusion. These probabilities are not usually known so they can’t be taken into account during analysis. A convenience sample usually implies that the sample consists of the most convenient group available or that the sample members are decided on the spot. For example, again suppose a university wants to determine the proportion of students that would favor a change to the bookstore. If the researcher simply went outside in between class periods and found 400 students that were walking by thier building, this would be a convenience sample. Again, the members of the sample are random in the everyday sense, but not in the statistical sense. Perhaps the researcher was outside on a part of campus that mostly has classes for students in biology and chemistry. The students here are not necessarily representative of the entire college and, certainly, there is no known probability of inclusion associated with every student. Statistical methods quantify uncertainty using probability. Using the probabilities calculated in the analysis would require us to assume the sample was collected in a way that we could account for probabilistically. We’re pretty unlikely to get this right! A volunteer response sample is one where particpants self-select. The members of a volunteer response sample tend to be those with a strong opinion, both positive and negative, and access to the study. For example, this type of sample is often what is done for end of semester or end of course evaluations. The evaluations are not usually mandatory so, while many in the class will complete the evaluation, those with very strong opinions (both positive and neative) tend to be more likely to respond. In other situations such as online polls hosted by poorly run news sites, only those that are aware and able to access the site can participate. Neither of these is a probability sample, nor do they implement a random number mechanism! They should be avoided whenever possible. If they are implemented, most statistical analysis methods won’t really be applicable and the best thing that can be done is a simple summary of the data collected (see chapter 3). 2.4.1.4 Why Sampling Scheme Matters - A Simulation The importance of having a probability sample is paramount. To underscore the point, let’s consider what differences and issues we might see using a simulation study. A simulation study usually implies that data are generated under certain assumptions using a computer and results are found on the simulated data. Since this process is done on a computer, the process can be repeated many times and the variabilty that is inherent can be accounted for in any comparisons of resutls. Of course, the data generating process must be valid or at least reasonable in order for a simulation study to yield any useful results. Let’s conduct a simple simulation study to compare the results found when doing an SRS vs those done with a contrived convenience sample. Suppose our population consists of 100 red and blue marbles. We have interest in investigating the proportion of marbles that are blue. Since we are creating the population we will set this parameter value, making it a known quantity! Let’s make the proportion of blue marbles 0.4 (40 blue marbles). A sample of size 10 will be collected using the two methods outlined below: Method 1: An SRS - marbles are assigned numbers 1, 2, 3, …, 100 at random. This implies the 40 blue marbles are randomly allocated across the numbers. Ten marbles are selected using a random number generator. Method 2: A ‘convenience’ sample is done. We’ll use the same labeling of the population as above. However, units 1, 2, …, 50 will have a higher probability of inclusion than units 51, 52, …, 75, and units 76, 77, …, 100 will have zero probability of being included in the sample. Let’s produce a sample using each method: SRS - Marble Selected Marble Color Convenience - Marble Selected Marble Color 30 Blue 20 Red 28 Red 15 Blue 31 Blue 14 Red 53 Red 4 Red 33 Red 69 Blue 79 Red 43 Red 94 Red 7 Blue 55 Red 6 Red 24 Red 34 Blue 54 Blue 2 Red The respective sample proportions of blue marbles found for these two samples are 0.3 for the SRS and 0.4 for the convenience sample. Not much can be learned from a single run of the experiment due to the inherent variability present (new samples would yield new members selected). Let’s repeat this process! Each time we’ll record the sample proportion of blue marbles for each method. In the end we can compare the distribution of the sample proportion using the two methods and assess the differences. To show the process, ten more of these (sample) proportions are reported below. SRS Sample Proportions Convenience Sample Proportions 0.3 0.2 0.5 0.4 0.5 0.3 0.2 0.5 0.2 0.2 0.4 0.3 0.5 0.7 0.4 0.5 0.3 0.4 0.3 0.4 Remember, the actual value of the population proportion (parameter) is 0.4. It can be hard to see differences between these two methods in only a few samples. With computing power at our fingertips, let’s repeat this process 10,000 times and investigate how the two sampling methods performed with regard to the true proportion of blue marbles, 0.4. The easiest way to visualize the sample proportions’ distributions are by creating histograms. In this case, the histogram will show us how many times we observed each sample proportion possible (0, 0.1, 0.2, …, 1). We can see there are differences in the two histograms. The histogram using the convenience sample tended to have slightly larger values for the sample proportion of blue marbles found. If we look at the overall mean of the sample proportions found using the SRS we get 0.402, which is very close to the true value of 0.4 This means that on average the SRS method and the sample proportion are giving the correct parameter. Compare this to the convenience sample method where we get an overall mean of 0.454, which overestimates the population parameter of 0.4. Using the convenience sample to make inference about the true proportion of blue marbles isn’t wise! This is just a quick example of how using a poor sampling method might affect the analysis done and why we need to use a good sampling method. We ‘created’ a convenience sample here. In real life, the mechanism that underlies the convenience sample wouldn’t be known! 2.4.1.5 Practical Sampling Notes There are many other good sampling schemes such as cluster sampling, sytematic sampling, and heirarchical sampling that can use combinations of techniques. There are also many study designs that attempt to address issues in observational studies such as case-control, cohort, and cross-sectional designs. Some of these will be covered in the book as the come up and references are given at the end of the chapter for those interested. There are entire books written on proper sampling methods along with the myriad of issues that can come up, especially when dealing with humans. In particular, when doing survey sampling (where a list of questions are given to participants), some issues that come up often (but occur in other places too) are: bias in question writing - leading questions and double barreled questions to name two nonresponse bias - sample members don’t answer or respond response bias - sample members answer a question wrong on purpose (often due to how they’ll be percieved) Another common issue that arises with sampling is when the list of population units (called the sampling frame) doesn’t match the actual population of interest. This is an issue called undercoverage. One famous example that relates to this idea comes from the 1936 US presidential election. Literary Digest incorrectly predicted that Landon would overwhelmingly defeat Roosevelt. The prediction was based on survey results from a sample of two million people. The survey had an issue akin to undercoverage. They mailed questionnaires out, but only to people who had both telephones and cars. This left out a large portion of the population and so the results were based on a sample that was not representative of the popoulation. Essentially, their sampling frame didn’t match the population of interest. Another thing to consider when using historical data is that there can be a bias in data collected. For instance, during world war II the British wanted to know where to place additional armor on their bombers. They had information about the planes that returned from battle and where they had damage. Abraham Wald (known for the Wald test) recommended that it was likely better to put more armor in places that weren’t as badly damaged on the returning aircraft. He reasoned that, if bullet holes were randomly dispersed on the airplane, the bombers that made it back showed where the aircraft could be hit and still function but those that didn’t make it back likely were damaged in other ways. Sometimes it isn’t feasible to implement a good sampling scheme. For instance, in medical studies volunteers are often used. In a crop experiment, the fields in which crops are planted aren’t usually something you can choose. Clearly, if our population is conceptually infinite, conducting a SRS is not tenable. In these cases, additional out of data assumptions are usually needed when attempting to make inference to entire population. For populations that aren’t human, these assumptions are often more reasonable but shouldn’t be done lightly. For example, suppose the population of interest is all bottles that may be produced by a factory. If a sample of size 1000 is to be chosen, it is likely wise to do a SRS of bottles produces over a series of days rather than the most recent 1000 bottles produced in order to mitigate any systematic issues with the bottle creation process. Lastly, one thing to note is that the sampling method can play a role in the analysis or modeling technique used but can also sometimes be ignored (assuming a probability sample was done). When the sample size is small compared to the population size (for a SRS, one rule of thumb is \\(n/N &lt; 0.05\\)), we often are able to make an assumption a “random sample” was done rather than a simple random sample. This assumption allows for standard modeling techniques and inference methods to be applied without the issue of dealing with a finite population. We will point out cases in book where the exact type of sampling method and population size plays an important role. 2.4.1.6 Observational vs Experimental Studies Sampling schemes are all about obtaining units from your population for your study. Once units are selected there are two basic types of studies: Observational Study - we observe individuals and measure outcomes without influencing the environment. Experimental Study - we deliberately impose a treatment on units and observe their response. Rememer two important points: We cannot usually infer causation from observational studies, but we can from a well-designed experiment. Experiments are not always feasible or ethical. That is, we cannot assign people to smoke a pack a day or have expectant mothers drink a certain amount of alcohol. For experimental studies, a randomization technique is needed to determine which experimental units obtain which treatments. Sometimes this can go hand in hand with the sampling scheme (perhaps a stratified random sampling and a randomized block design). How to create a sound experiment is important and nuanced (and has added complexity when dealing with humans). Experimental design is the topic of the next section. 2.4.2 Fundamentals of Designed Experiments To describe the methods for creating a well-designed experiment, let’s first recap some definitions from earlier: Response Variable - variable(s) of interest that characterizes performance or behavior Explanatory Variable - variable(s) of interest with regard to their relationship with the response variable Covariate - quantitative (numerical) explanatory variable (usually observed as the experiment is run and not set by the researcher) Factor - explanatory variable that takes on a finite number of values (a Categorical or Qualitative variable) Level - setting a factor can take on Treatment - specific experimental condition, either the level of a factor (if only 1 factor) or the combinations of the levels from a number of factors Control Treatment - benchmark treatment sometimes necessary for comparison in human experimentation (to avoid the placebo effect) Experimental units (EUs) - units on which the treatments are assigned Observational units (OUs) - units on which measurements are taken There is clearly a lot of jargon to remember when learning about experimentals and their design. We’ll do our best to remind the reader of these terms as we go along. Before we dive into experimental designs, we should again discuss the reason we need statistical methods, this time with thorough consideration toward conducting an experiment. 2.4.2.1 Sources of Variation We’ve discussed that data is variable. If we repeat an experimental study, even with identical conditions, we are likely to obtain different data for the response. This has to do with the sample members being selected differently each time, units being assigned possibly different treatments, or units responding differently to a treatment. Let’s identify the sources of variation in our response. Treatment effect - an effect due to the variables assigned by the researcher (treatments) in an experiment. This is an effect we are usually hoping to see and quantify! (Other) Recorded Variables - some variables that are not of interest are recorded because we may know or think they are associated with variability in the response. These may be covariates (quantitative variables) measured during a study (like temperature) or at the end of a study (tumor size). They can also be variables measured with only a few values (like the soil type a crop is grown in). Unaccounted for Variables - everything else causing variation. This variation is estimated and used as a reference with which to compare the treatment variation. To illustrate, consider a simplified example where a gardener wants to know what water (low or high) and fertilizer (A or B) conditions may be better in terms of producing greater crop yield (dried weight) on average. Response variable is the dried weight of the crop after growth. Explanatory variables are the two factors: Water (with levels low and high) Fertilizer (with levels A or B) Treatments are: low water and fertilizer A low water and fertilizer B high water and fertilizer A high water and fertilizer B The gardener has two greenhouses each with 16 rows for growing crops. Within each greenhouse they randomly assign the four treatments to the 16 rows. After 45 days, the crops from each row are harvested, dried, and weighed. The experimental units are the rows within the greenhouses The observational units are the rows of plants (so we may say the row is also the OU) The sources of variation in the dried weight of the crop are: Treatment variation - variation we believe we’ll see in dried weight from the differences in water and fertilizer applications. Other recorded variable - greenhouse in which the crops are grown is recorded. Greenhouse is not of interest but may play a role in the variation in dried weight. Unaccounted for variables - amount of sunlight received, temperature/humidity differentials within a greenhouse, possible differences in the method of application of the treatment (fertilizer and water), and many others may also have an association with dried crop weight. These sources make up a sort of reference variability we can compare our treatment variation to. Ideally this variability is as small as possible! The variation from unaccounted variables can generally be broken down into four cateogries: Inherent variability in EUs (units assigned a treatment). No two people, paper towels, concrete blocks, or lab rats are exactly the same so they may respond differently to the same treatment. Measurement error - Multiple measurements of a same experimental unit may differ. Two blood pressure readings a few minutes apart may give different readings or if you break a water sample in two and measure each for bacteria, you may see different measurements. Variations in applying or creating treatments. Occasionaly a treatment protocol is not clearly defined, leaving room for interpretation. Perhaps applying a fertilizer before or after applying irrigation can cause a difference. If this isn’t clearly specified, two farmer’s may do things differently. Other unknown variables sometimes called lurking variables. No matter how hard we try, some of these unaccounted for variables (and hence variation in the response) will remain. What we can do is use good experimental design techniques to try and minimize this variability in order to more clearly see the treatment effects. 2.4.2.2 Designing Experiments A poorly designed study can never be saved, but a poorly analyzed one has the possibility of being reanalyzed. Good experimental designs generally involve randomization, replication, and control. These are discussed in detail below. Randomization - treatments are randomly assigned to experimental units. This process must use a random number mechanism or software to allocate the treatments. Randomization makes sure that every EU has a chance to get a different treatment. This helps to protect the results of the analysis against a systematic influence of lurking variables. For example, if a doctor is assigning drug A or B to a patient without use of a random number mechanism, they may unwittingly assign drug A to patients they deem more likely to recover due to implicit biases. Suppose an experimenter assigns treatment one to the first 50 bottles produced at a factory and treatment two to the next 50 bottles. There may have been an issue with the manufacturing process causing the last 50 bottles to be degraded as compared to the first 50. By not using random assignment, this underlying issue will affect the study’s results. Replication - multiple (independent) experimental units are assigned the same treatment. EUs that receive the same treatment are called replicates. By having replication we are able to create an estimate of variability due to our unaccounted for variables. That is, given five replicates, the only differences between them are things not measured or accounted for. Comparing our treatment variation to this variation is what allows us to have faith in the reliability of our conclusions. Note that replication does not mean that we measure the same EUs multiple times! That is called a repeated measures. Observations from repeated measures experiments cannot usually be considered independent. Controlling Variables - holding certain variables constant across the EUs. Generally, we’re not interested in the effects of these variables on the response. These variables affect the response in exactly the same manner, so that we don’t see the effects on the conclusions. Unfortunately, we don`t get information on what happens at settings of the variables other than the fixed ones. This decreases generalizability, but reduces overall variation. Experimental designs such as a randomized complete block design attempt to control variables while also maintaining generalizability. (Visual of these three concepts) Let’s discuss some of the most used experimental designs. We’ll cover analysis for these types of experiments in future chapters. 2.4.2.3 Completely Randomized Design (CRD) A Completely Randomized Design (CRD) is the most straightforward experimental design. Suppose the number of units in the sample is \\(n\\) and the number of treatments is \\(t\\). The design uses a random number mechanism to randomly assign the \\(t\\) treatments across the \\(n\\) experimental units. In a balanced design, the same number of units are assigned to each treatment. In this case, the number of replicates is usually denoted by \\(n_t\\). In an unbalanced design we generically have \\(n_1\\), \\(n_2\\), …, \\(n_t\\) replicates, respecitvely (where \\(n = \\sum_{i=1}^{n}n_i\\)). Suppose we are doing an experiment to determine the effect of nutrition (3 different diets or treatments) on weight gain in humans. If we have 30 experimental units labeled 1, 2, …, 30, a random number generator can be used to reorder the numbers 1 through 30. The first 10 numbers can then be assigned the first diet, the next 20 numbers the second diet, and the last 10 numbers the third diet. Ideally we want to have as many replicates for each treatment as we can afford. If we had 3 diets and 3 EUs and found that the person assigned the first diet lost more weight than the person assigned to the second diet. This is not a very reliable conclusion! Perhaps the person assigned to the first diet naturally loses weight more easily. However, if we had 100 people assigned to each diet and on average the first diet yieled a greater weight loss, this would be a much more reliable conclusion. Often to determine the appropriate sample size (or sample sizes for each treatment group) a power analysis or sample size calculation is done. These require assumptions about the population variation in some respect as well as an idea of a “difference of interest.” These topics will be covered later in the book. 2.4.2.4 Randomized Block Designs A randomized block design divides EUs with similar characteristics into ‘blocks’ or subgroups. Within each block the treatments are then randomly assigned. Within a block we are essentially controlling the blocking variable. However, by conducting the design across many settings of the blocking variable, we maintain generalizability of the study. Let’s consider an example. Two new finishes are developed (type A and type B) for use on a dash board in a car. The material and finish must withstand high temperatures due to the sun and the greenhouse effect. To simulate the temperatures and wear on the dashboard, the dashboards are placed into ovens for 24 hours and the amount of degradation is measured. The company has 4 large ovens (oven 1, 2, 3, and 4) for testing. The manufacturer finds a random sample of 40 dashboards from the assembly line. Ten dashboards will be placed in each oven. Within the groups of ten assigned to the ovens, five of each treatment were randomly assigned. The ovens act as the blocks in this experiment. There may be some variation from oven to oven but we don’t really have an interest in this variation. If we’d only used one oven, there may be some odd characteristic of heat flow. By conducting the experiment over several ovens, we can be more confident that our findings would generalize. 2.4.2.5 Other Experimental Designs There are many other commonly used designs including: Incomplete block designs Latin squares designs Split plot designs Randomized complete block split plot designs Strip plot designs 2^k designs 3^k designs Response surface designs For many of these, we’ll cover the ideas behind the designs as well as their analyses later in the book. Understanding how the treatments are assigned to the EUs is really important when considerting an appropriate method of analysis. 2.4.3 Sampling Schemes vs Experimental Design When first learning about sampling schemes and experimental design, the randomizations applied can be confusing. The purpose of randomization as applied to experimental design is different from the purpose of randomization in sampling! This confusion is widespread enough to warrant its own brief discussion. In sampling, randomization is used to determine which members of the population are included in the sample. If an experiment is being done, randomization is used to determine which EUs get which treatments. When an experiment is done, if possible, both of these randomizations should occur. There is also some confusion in the learning process due to the similarities between an SRS and a CRD as well as the similarities between a stratified random sample and a Block design. Again, the key differences are about what the purpose of sampling is versus the purpose of the experimental design. Sampling methods are about getting units for the sample in a sound way. Experimental design is about assigning treatments to units in a sound way. 2.5 References and Readings Something about causal inference Sampling stuff DOE stuff Corr vs caus Wald, Abraham. (1943). A Method of Estimating Plane Vulnerability Based on Damage of Survivors. Campbell MJ, Machin D. In: Medical Statistics: A Common-sense Approach , 2nd edn. Chichester: Wiley, 1993:2. (Quote about poorly designed experiment apparently is attirbuted here?) 2.6 Software We mentioned the need for random number generation or a random number mechanism for selecting units into the sample as well as assigning treatments to experimental units. This is easily done in software such as R and SAS. Using software, creating random numbers isn’t something that can be achieved. Instead we have sophisticated algorithms that create sequences of numbers that don’t exhibit patterns. These are called pseudo random numbers and we use these to select units or assign treatments. These algorithms have to start somewhere. This is called the seed for the algorithm. Quite often software uses something to do with the exact time and date to determine the seed. These makes the seed change depending on when you execute the code. When doing random number generation, it is often preferable to be able to reproduce your results. When this is the case, the user sets the seed for the algorithm. 2.6.1 R In R, we can set the seed for the random number generation process using set.seed. set.seed takes in an integer as the seed value. Let’s set our seed here using a number off the top of our head in order to get the same results each time this book is created. set.seed(1310) 2.6.1.1 The sample Function To do a simple random sample in R the sample function works quite well. sample takes in a vector of elements to sample from, the sample size requested, an indicator as to whether or not replacement should be done (so that a unit could be selected more than once), and an optional vector of probabilities of inclusions. For instance, if we had a population of 1000 units and wanted to do a simple random sample of 15, we could assign each unit in the population a number from 1 to 1000. Next, we could run the following code: sample(x = 1:1000, size = 15, replace = FALSE) ## [1] 997 693 520 452 478 603 971 640 495 489 794 369 859 879 251 In nonparametric bootstrap sampling (covered later), we want to sample with replacement. This is easily done using replace = TRUE. If we wanted to do a stratified random sample, we can break the population up into the strata and do a random sample in each. We can sample proportionally or find an equal size sample from each strata using the sample function on each strata. The sample function can also be used to assign treatments to experimental units. If we assign each EU a number from one to \\(n\\), we can create a vector consisting of all the treatments to be assigned (including replicates) and use this as the input to sample. The appropriate size to select is the same length as the vector, \\(n\\). For example, suppose we had 30 units assigned numbers one to 30 and three treatments (A, B, and C) to assign to ten units each. We could use the following code to assign treatments: rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 10) ## [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; &quot;B&quot; ## [20] &quot;B&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; sample(rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 10), size = 30) ## [1] &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;C&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;A&quot; &quot;C&quot; &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;C&quot; ## [20] &quot;A&quot; &quot;C&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;A&quot; &quot;C&quot; The ordering given can then be matched with the numbers given to the EUs for treatment assignment. Doing randomization for a block design can be done similarly within each block (sample should be run separately for each block). 2.6.1.2 Farmer’s Market Details 2.6.1.3 Student Assessment Details This section describes the process of randomly assigning students to treatments in the student assessment example. An excel file with a list of senior students to send emails to was obtained by DASA and read in here (with changes to account for privacy). seniorData &lt;- readxl::read_excel(&quot;../../motivating-examples/02-design-students.xlsx&quot;) Just to get an idea about the data a three way contingency table was made for the College, RaceEth, and Gender variables (covered in chapter 3). table(seniorData$College, seniorData$RaceEth, seniorData$Gender) ## , , = F ## ## ## American Indian or Alaska Native Asian Black or African American ## CALS 0 30 17 ## CED 0 5 3 ## CHASS 4 28 67 ## CNR 0 5 6 ## COE 0 45 16 ## COS 1 41 23 ## DN 0 8 1 ## MGMT 1 9 14 ## TEX 0 12 15 ## UC 0 0 0 ## ## Hispanics of Any Race Native Hawaiian or Other Pacific Islander NRA ## CALS 18 0 7 ## CED 5 0 2 ## CHASS 41 2 6 ## CNR 3 0 1 ## COE 18 1 21 ## COS 20 0 18 ## DN 7 0 3 ## MGMT 15 0 23 ## TEX 15 0 9 ## UC 0 0 0 ## ## two or More Races Two or More Races Unknown White ## CALS 0 15 8 311 ## CED 0 1 0 68 ## CHASS 0 30 13 412 ## CNR 0 12 1 87 ## COE 0 19 13 294 ## COS 0 13 10 236 ## DN 0 6 1 50 ## MGMT 0 15 3 156 ## TEX 0 7 4 142 ## UC 0 1 0 0 ## ## [ reached getOption(&quot;max.print&quot;) -- omitted 1 matrix slice(s) ] After seeing this summary, it looks like there may have been a typo. The decision was made to combine the one student that had a RaceEth value of two or More Races with students with the value Two or More Races. seniorData$RaceEth[seniorData$RaceEth == &quot;two or More Races&quot;] &lt;- &quot;Two or More Races&quot; The data was then sorted by the blocking variables. seniorData &lt;- seniorData %&gt;% arrange(College, Gender, RaceEth) Next, each EU in a block (combination of College, EthRace, and Gender) would be randomly allocated to treatment 1, 2, or 3, corresponding to the email types. The number of EUs in each block was found using the group_by and summarise functions from the dplyr package (covered in chapter 3). counts &lt;- seniorData %&gt;% group_by(College, Gender, RaceEth) %&gt;% summarise(n = n()) counts ## # A tibble: 139 x 4 ## # Groups: College, Gender [20] ## College Gender RaceEth n ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 CALS F Asian 30 ## 2 CALS F Black or African American 17 ## 3 CALS F Hispanics of Any Race 18 ## 4 CALS F NRA 7 ## 5 CALS F Two or More Races 15 ## # ... with 134 more rows Not every block had a count that was divisible by three so random allocation wouldn’t quite be balanced. With such a large sample size this issue was ignored. A seed was set for reproducibility and a function written to do the work of the randomization. The function inputs were the number of treatments (in case another experiment were to be performed with more treatments) and the number of EUs in the particular block. The output was a random allocation of the numbers 1, 2, and 3 (treatments) for a that block. set.seed(420420) allocate &lt;- function(ntrt, count){ sample(rep(1:ntrt, times = ceiling(count/ntrt)))[1:count] } The sapply function was used to apply this function to each of the block counts from the counts object created previously. As the dataset was already sorted by the blocking groups (in the same order that the counts object was created), the results were simply appended to the dataset as a new column. seniorData$Treatment &lt;- unlist(sapply(X = counts$n, FUN = allocate, ntrt = 3)) To double check that the treatments were roughly assigned in equal proportion a four-way contingency table was produced that included the treatment assignment. A part of that table is reproduced below. trtTab &lt;- table(seniorData$Treatment, seniorData$College, seniorData$Gender, seniorData$RaceEth) trtTab[, , , &quot;Two or More Races&quot;] ## , , = F ## ## ## CALS CED CHASS CNR COE COS DN MGMT TEX UC ## 1 5 1 10 4 7 4 2 5 2 0 ## 2 5 0 10 4 7 4 2 5 3 1 ## 3 5 0 10 4 5 5 2 5 2 0 ## ## , , = M ## ## ## CALS CED CHASS CNR COE COS DN MGMT TEX UC ## 1 2 1 2 2 18 7 0 2 1 0 ## 2 4 0 3 3 18 6 0 2 1 0 ## 3 4 1 3 3 18 6 1 3 2 0 trtTab[, , , &quot;White&quot;] ## , , = F ## ## ## CALS CED CHASS CNR COE COS DN MGMT TEX UC ## 1 104 22 138 29 98 79 16 52 48 0 ## 2 104 23 138 29 98 78 17 52 47 0 ## 3 103 23 136 29 98 79 17 52 47 0 ## ## , , = M ## ## ## CALS CED CHASS CNR COE COS DN MGMT TEX UC ## 1 83 10 77 67 339 71 12 83 15 2 ## 2 83 10 78 68 339 69 13 83 16 3 ## 3 83 9 78 67 339 71 13 84 16 3 The new student list with treatment assignment was then outputted to a csv file. write_csv(x = seniorData, path = &quot;02-design-randomization.csv&quot;) 2.6.1.4 Simulation Study Details This section explains the code used to create the simluation study in the sampling section. First, the seed was set in order to make the results reproducible. Next, the ‘population’ is created and stored in a data frame. The units are given numbers from one to 100 and the sample function is used to randomly assign 40 of these marbles to be associated with blue and 60 to be associated with red. set.seed(50) marblePop &lt;- data.frame(popNumber = 1:100, color = sample(c(rep(&quot;Blue&quot;, 40), rep(&quot;Red&quot;, 60)), size = 100, replace = FALSE)) head(marblePop) ## popNumber color ## 1 1 Blue ## 2 2 Red ## 3 3 Red ## 4 4 Red ## 5 5 Red ## 6 6 Red A contrived convenience sample probability vector was created to be associated with the 100 units. The first 50 units each had probability 0.0185 associated with them, each of the units 51 to 75 had the probability 0.003 associated with them, and the last 25 each had zero probability associated with them. convProb &lt;- c(rep(0.0185, 50), rep(0.003, 25), rep(0, 25)) convProb ## [1] 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 ## [11] 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 ## [21] 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 ## [31] 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 ## [41] 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 0.0185 ## [51] 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 ## [61] 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 0.0030 ## [71] 0.0030 0.0030 0.0030 0.0030 0.0030 0.0000 0.0000 0.0000 0.0000 0.0000 ## [81] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 ## [91] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 A sample of size ten was created using the sample function. For the SRS, the prob input is left as the default. For the convenience sample, this input is assigned the convProb object created previously. A data frame was created with the two objects and outputted using the kable function from the knitr package. col.names was used to assign useful names to each column. method1 &lt;- marblePop[sample(1:100, size = 10, replace = FALSE), ] method2 &lt;- marblePop[sample(1:100, size = 10, replace = FALSE, prob = convProb), ] knitr::kable(data.frame(method1, method2, row.names = NULL), col.names = c(&quot;SRS - Marble Selected&quot;, &quot;Marble Color&quot;, &quot;Convenience - Marble Selected&quot;, &quot;Marble Color&quot;)) SRS - Marble Selected Marble Color Convenience - Marble Selected Marble Color 30 Blue 20 Red 28 Red 15 Blue 31 Blue 14 Red 53 Red 4 Red 33 Red 69 Blue 79 Red 43 Red 94 Red 7 Blue 55 Red 6 Red 24 Red 34 Blue 54 Blue 2 Red The process was repeated many times using the replicate function. This function is a wrapper function for sapply (which applies a function to each element of a list and tries to simplify the returned object) and allows for the same code to be run many times. replicate produced a matrix whose columns each represent one sample of ten marbles. The entire matrix was compared to “Blue.” The colMeans function was then applied to this logical object in order to find the sample proportion of blue selected in each sample (logicals are coerced to 0 and 1 for FALSE and TRUE, respectively). method1 &lt;- colMeans( replicate(10000, marblePop[sample(1:100, size = 10, replace = FALSE), 2] ) == &quot;Blue&quot; ) method2 &lt;- colMeans( replicate(10000, marblePop[sample(1:100, size = 10, replace = FALSE, prob = convProb), 2] ) == &quot;Blue&quot; ) The first ten proportions were then printed using the kable function again. knitr::kable(data.frame(SRS = method1[1:10], Convenience = method2[1:10], row.names = NULL), col.names = c(&quot;SRS Sample Proportions&quot;, &quot;Convenience Sample Proportions&quot;), align = c(&quot;c&quot;,&quot;c&quot;)) SRS Sample Proportions Convenience Sample Proportions 0.3 0.2 0.5 0.4 0.5 0.3 0.2 0.5 0.2 0.2 0.4 0.3 0.5 0.7 0.4 0.5 0.3 0.4 0.3 0.4 Next, side-by-side histograms were created. First, the mfrow (mf = multi-figure) graphical paramter is set so that the output will have one row of plots and two columns. (Graphical parameters, histograms, and adding lines to plots will be discussed in chapter 3!) Next, a histogram was created for each with vertical lines added for the true proportion and the sample proportion. Text was also added to describe the black line. par(mfrow = c(1, 2)) hist(method1, main = &quot;Using an SRS&quot;, xlab = &quot;Sample Proportions&quot;, breaks = seq(from = -0.025, to = 1.025, by = 0.05), col = &quot;Green&quot;) abline(v = 0.4, col = &quot;Blue&quot;, lwd = 2) abline(v = mean(method1), col = &quot;Black&quot;, lwd = 2) text(x = 0.8, y = 2000, cex = 0.7, &quot;Black line \\n represents the \\n overall mean \\n of the sample \\n proportions.&quot;) hist(method2, main = &quot;Using a Convenience Sample&quot;, xlab = &quot;Sample Proportions&quot;, breaks = seq(from = -0.025, to = 1.025, by = 0.05), col = &quot;Green&quot;) abline(v = 0.4, col = &quot;Blue&quot;, lwd = 2) abline(v = mean(method2), col = &quot;Black&quot;, lwd = 2) text(x = 0.8, y = 2000, cex = 0.7, &quot;Black line \\n represents the \\n overall mean \\n of the sample \\n proportions.&quot;) 2.6.2 SAS "],
["summarizing-data.html", "Chapter 3 Summarizing Data 3.1 Motivating Example: Summarizing Data - California Health Interview Survey 3.2 Statistical Ideas and Concepts 3.3 Suggestions for Further Readings 3.4 Software", " Chapter 3 Summarizing Data Recall a major goal of conducting a study is often to conduct statistical inference. Inference can involve determining which variables are important in relation to a response variable and/or predicting a response variable under different scenarios. To formally do inference we need to define the population of interest as well as parameters we want to study. Population - all the values, items, or individuals of interest Parameter - a summary measure about a population Ideally, we’d be able to measure every member of the population and exactly calculate the value of any population parameter. This would involved conducing a census. A census is usually not feasible. Instead we take a subset of the population and try to use these observations to make statements or claims about the population. Sample - a subset of the population we observe data on Statistic - a summary value calculated from the sample observations (A good visual of inference here) Your questions of interest will often lead you to which parameters you have interest in. Careful consideration of study goals and the time and money you have will also most likely lead you to which type of data you will collect to best make inference on those parameters. Other times, you must work with existing data that has already been collected. When this is the case, the data will sometimes guide the parameters you can investigate and ultimately the claims you can make. 3.1 Motivating Example: Summarizing Data - California Health Interview Survey 3.1.1 Define Objective &amp; Background Look at the California Health Interview Survey (CHIS). Describe the idea of the survey. For our purpose we’ll imagine the dataset itself is the population of interest. We will take a sample from that population to investigate and summarize as well as compare to the truth. 3.1.2 Select Response Response is really certain variables in the dataset, maybe BMI or some other health related statistic we want to study. 3.1.3 Determine Sources of Variation Sources of variation include height, weight, ethnicity, etc. Going to take those into account. 3.1.4 Select Design Design will be to do a SRS and do an observational study - basically an exploration study. (Maybe also do an Stratified one and compare the results? Maybe that should be left as an exercise.) 3.1.5 Do Study Pretend that we got 100% response rate and all that good stuff. Maybe discuss the idea of missingness here but probably not the right time. 3.1.6 Do Statistical Analysis Main analysis is just to summarize the data set. As an exercise we will compare the sample to the population since we actually know it here. 3.1.7 Draw Conclusions &amp; Communicate Describe main results or takeaways to study in the future. How to present some graphs as well (i.e. don’t just put a graph, it must be described and meaningful or don’t report it). Appropriate use of titles and labels too. 3.2 Statistical Ideas and Concepts We’ve seen the importance of obtaining sample units in a valid way and, when applicable, using a sound experimental design. We also need to have a strong understanding of the types of data or variables we might collect. The type of data collected is inherently linked to the types of conclusions that can be drawn. 3.2.1 Scales (Types) of Data: Consider a dataset where the rows represent observations and the columns represent variables. These variables can generally be of two main types: Quantitative or Numerical variable - A variable that is described by numerical measurements where arithmetic can be performed. Qualitative or Categorical variable - A variable that is described by attributes or labels. We’ll generally refer to these as numerical and categorical, respectively. Numerical variables can be further refined into two subscales: Discrete - finite or countably infinite number of values (# of cars passing through an intersection in an hour, 0, 1, 2, …) Continuous - any value in an interval is possible (Temperature, \\((-459.67\\deg F, \\infty)\\) Categorical variables can be refined into two subscales as well: Nominal - categories have no ordering (Male, Female) (zip codes) Ordinal - can order categories (Lickert scale data) (college football rankings) How we summarize and analyze the data will depend on which type of data we have! Fully understanding the different types of data and how they can be linked to parameters of interest is vital importance when it comes to setting your study’s goals. The two examples below give some parameters commonly looked at when conducting inference. Two examples here, linking to parameters - one with mean and quantile of interest? one with proportion and odds 3.2.2 Random Variables and Parameters Intro RVs and changing all variables measured to take on quantitative values. Binomial idea, multinomial for 3+ categories. Population variables have a population distribution or pattern and frequency. These are equivalently described by probability histograms, tables, or probability mass functions (PMFs) for discrete random variables. Continuous modeled by a density or probability density function (PDF). Understanding distributions is important because they allow us to find probabilities, know the average value, etc. We’ll take up population distributions in the next chapters. For now we’ll focus on describing data and sample distributions. Why? 3.2.3 Numerical Summaries In this chapter we’ll discuss summarizing data only, not populations. We’ll calculate numerical summaries (statistics) and graphical summaries for the sample. In the next chapter we’ll relate these summaries to the population parameters and distributions. The focus of this section is to talk about what summaries you’d want to create and why, along with how to interpret them. The software section discusses the creation of the summaries in R and SAS. What do we want to describe? The goal of descriptive statistics is to describe the distribution of the data. That is, how the data was observed. We often want to summarize measures of location and measures of spread for the data. Combining these summaries (along with graphs) gives us a solid understanding of the variable’s distribution. Note: The things we want to describe about the sample are similar to things we want to describe about the population. Again, we’ll discuss this relation in more detail in future chapters. Measures of Location Sample Mean = \\(\\bar{Y}=\\frac{\\sum_{i=1}^{n}Y_i}{n}\\) Sample Median = Middle value of the data set (50% of values to left, 50% of values to right) Sample Proportion = \\(\\hat{p}=\\frac{\\#\\mbox{ of successes}}{\\mbox{sample size}}\\) Sample Quantiles or Sample Percentiles Measures of Spread Sample Variance = \\(S^2 = \\frac{\\sum_{i=1}^{n}(Y_i-\\bar{Y})^2}{n-1}\\) Sample Standard Deviation = \\(S\\) Sample Range = \\(max(Y_1,...,Y_n)-min(Y_1,...,Y_n)\\) Inter-quartile Range = Q3-Q1 When summarizing data we want to describe the distribution of the data. This may be a marginal or univariate summary of a single variable by itself. However, quite often we want to look at the distribution of a variable conditional on another variable - perhaps levels of a certain factor or the treatments of an experiment - or the relationship of more than one variable together. These would be referred to as multivariate summaries. How we summarize data depends on the variable types (sometimes called variable scales) and the attribute or quantity we are trying to describe about that variable. The two major types of variables are: Categorical (Qualitative) variable - entries are a label or attribute Numerical (Quantitative) variable - entries are a numerical value where math can be performed Both of these have subscales that are sometimes important to consider. Categorical variables can be nominal or ordinal. Nominal variables have no ordering to their categories. For example, a variable asking for your favorite pet. There is no inherent ordering to give pets. Ordinal variables have an ordering but differences between the categories are not necessarily the same. For example, Likert scale data having categories “strongly disagree,” “disagree,” “neutral,” “agree”, and “strongly agree.” There is a clear ordering here but the difference between strongly agree and agree is not necessarily the same as the difference between agree and neutral. Numerical variables can be discrete or continuous. Discrete variables take on values that can be listed out, although the list may continue on indefinitely. For example, the number of bedrooms in a house. The values (or support) for this variable are 0, 1, 2, 3, … but there is not necessarily a known upper limit. Discrete variables don’t need to take on just integers and make take on values that are irregularly spaced. A continuous variable is one in which the variable can take on any value in an interval (or union of intervals). For example, the time it takes to complete an online survey. The support for this variable would be the interval from 0 to some large number, often we’d just say infinity for the upper bound. When summarizing the variables, the main goal is to summarize the distribution or pattern and frequency with which you observe a variable. This involves slightly different summaries dependong on variable type (or combination of variable types). Categorical variable - describe relative frequency (or count) in each category Numerical variable - describe the shape, center, and spread of the distribution The most common numerical summaries are given below: Cateogrical Contingency Tables Numerical Mean/Median Standard Deviation/Variance Coefficient of Variation Quantiles/Percentiles/IQR These are certainly not the only summaries you might calculate! This is terribe but I want to put something like it somewhere… If you have two or more categorical variables, contingency tables are still the summary to use. If you have one numerical and one or more categorical variable, you’ll often calculate the numerical summaries for each combination of categorical variables levels. If you have multiple numerical variables you’ll usually calculate the covariance or correlation, which measures the linear relationship between pairs of variables. This can also be done for different settings of categorical variables as well. Next, we’ll go through the details of how these summaries are calculated and how to interpret them. 3.2.3.1 Contingency Tables for Categorical Variables Let’s start by summarizing a categorical variable (entries are a label or attribute) from a dataset on the titanic passengers. The dataset describes attributes of passengers on the titanic. The variables we’ll investigate are embarked (where journey started) survived (survive or not) sex (Male or Female) A few observations from the data are given below. name survived sex embarked Allen, Miss. Elisabeth Walton 1 female S Allison, Master. Hudson Trevor 1 male S Allison, Miss. Helen Loraine 0 female S Allison, Mr. Hudson Joshua Creighton 0 male S Allison, Mrs. Hudson J C (Bessie Waldo Daniels) 0 female S Anderson, Mr. Harry 1 male S Andrews, Miss. Kornelia Theodosia 1 female S Andrews, Mr. Thomas Jr 0 male S Appleton, Mrs. Edward Dale (Charlotte Lamson) 1 female S Artagaveytia, Mr. Ramon 0 male C A contingency table simply shows the frequency or count (sometimes proportion) of observations falling into the categories of the variable. If we are looking at one variable by itself, the table is called a one-way contingency tables. A one-way contingency table for the embarked variable: Port Frequency Cherbourg 270 Queenstown 123 Southampton 914 A one-way contingency table for the survived variable: Status Frequency Died 809 Survived 500 A one-way contingency table for the sex variable: Sex Frequency Female 466 Male 843 We can see that these one-way tables allow us to easily see how many values fall in each category for a given variable. For example, there were 270 people that embarked at the Cherbourg port. We can also see that 809 people died and 500 survived. A two-way contingency table is similar in that it gives the frequencies for combinations of two categorical variables. A two-way contingency table between the survived and sex variables: Female Male Died 127 682 Survived 339 161 A two-way contingency table between the survived and embarked variables: Cherbourg Queenstown Southampton Died 120 79 610 Survived 150 44 304 A two-way contingency table between the sex and embarked variables: Cherbourg Queenstown Southampton Female 113 60 291 Male 157 63 623 With this summary we can easily see the relationship between these pairs of categorical variables. For example, there were 127 females that died and 682 males that died. This idea can be extended to included combinations of as many categorical variables as desired. Generally these are called n-way contingency tables. The major issue with going beyond two- or three-way tables is the difficulty in displaying the information in a easy to digest manner. Consider the three-way table between sex, embarked, and survived created below. Sex Port Status Frequency Female Cherbourg Died 11 Male Cherbourg Died 109 Female Queenstown Died 23 Male Queenstown Died 56 Female Southampton Died 93 Male Southampton Died 517 Female Cherbourg Survived 102 Male Cherbourg Survived 48 Female Queenstown Survived 37 Male Queenstown Survived 7 Female Southampton Survived 198 Male Southampton Survived 106 This isn’t quite as easy to digest as before but still quite useful. The first row shows that there were 11 females that embarked at the Cerbourg port that died. Sometimes it is useful to look at a one-way table conditional on settings of other variables as well. For instance, we could report a one-way table for the survived variable conditional on looking at males that embarked at Queenstown. Frequency Died 56 Survived 7 We see that, of males that embarked at the Queenstown port, 56 died and 7 survived. Again, contingency tables or n-way tables are the most common summary for combinations of categorical variables. They are important because they allow us to summarize how often categories, or combinations of categories, were observed in a dataset. Not sure if I want to include all of this below…, especially for this data set since the population is the sample… Also I should talk about that above probably… We might also want to know the relative frequency or sample proportion of obsrervations falling into each category (or combination of categories). This can be done by dividing each entry by the sample size, \\(n\\) (the total number of observations). Generically, we might say the categories have a probability or proportion associated with them for the population. For the embarked variable we’d have… Probabilities interpreted as the long-run relative frequency of occurrence. Maybe discuss indicator variables for the two with character strings for labels… 3.2.3.2 Measures of Location and Spread for Numerical Variables Recall that a numerical variable is one whose entries are a numerical value where math can be performed. The major things we want to describe about a numerical variable’s distribution are the shape, center, and spread. Shape is best left to graphical summaries like a histogram or density plot. We’ll cover these shortly. Let’s consider a dataset about an experiment on carbon dioxide (CO2) uptake in grass. The three variables we’ll investigate are: Response recorded: uptake CO2 uptake rates in grass plants (labeled with \\(y\\)) Environment manipulated: Treatment - chilled/nonchilled (labeled with \\(x_1\\)) Ambient CO2 specified and measured: conc (labeled with \\(x_2\\)) uptake is a numerical variable and will be the variable we want to summarize. Treatment is a categorical variable. conc is a numerical variable but only observed at a few values. This can be treated as either type of variable depending on what your goal is. We will treat conc as numerical. A snippet of the full dataset appears below. Plant Type Treatment conc uptake Qn1 Quebec nonchilled 95 16.0 Qn1 Quebec nonchilled 175 30.4 Qn1 Quebec nonchilled 250 34.8 Qn1 Quebec nonchilled 350 37.2 Qn1 Quebec nonchilled 500 35.3 Qn1 Quebec nonchilled 675 39.2 Qn1 Quebec nonchilled 1000 39.7 Qn2 Quebec nonchilled 95 13.6 Qn2 Quebec nonchilled 175 27.3 Qn2 Quebec nonchilled 250 37.1 In the next section we’ll discuss formulae for calculating some of the summaries. It is important to understand the labeling of the data in order to help decipher those formulae. uptake (\\(y\\)) conc (\\(x_1\\)) Treatment (\\(x_2\\)) \\(y_1 =\\) 16 \\(x_{1,1} =\\) 95 \\(x_{2,1} =\\)nonchilled \\(y_1 =\\) 30.4 \\(x_{1,2} =\\) 175 \\(x_{2,2} =\\)nonchilled \\(y_1 =\\) 34.8 \\(x_{1,3} =\\) 250 \\(x_{2,3} =\\)nonchilled \\(\\vdots\\) \\(\\vdots\\) \\(\\vdots\\) \\(y_1 =\\) 19.9 \\(x_{1,84} =\\) 1000 \\(x_{2,84} =\\)chilled 3.2.3.2.1 Measuring Location Measuring center is important because… The mean of the uptake variable can be calculated to help summarize the center of the uptake variable’s distribution. The sample mean is then simply the sum of these values divided by the total number: \\[\\bar{y} = \\frac{1}{n} \\sum_{i=1}^{n} y_i = \\frac{1}{84}\\sum_{i=1}^{84}y_i = \\frac{1}{84}\\left(16.0 + 30.4 + 34.8 + ... + 19.9\\right)\\] This comes out to be 27.21. This value represents one measure of the center or middle of the uptake variable’s distribution. As the actual data values are used in this calculation, one or two very large or small numbers can have a large influence on the value of the sample mean. To counter this, you can calculate a more robust measure called a trimmed mean. This involves removing the highest and lowest values and then calculating the mean with the remaining values. For instance, a 5% trimmed mean drops the lowest and highest 5% of data values and then finds the mean with the remaining values. Here 0.05*84 = 4.2. This means we should drop off the lowest four and highest four values and then calculate the mean with the remaining 76 values. The 5% trimmed mean comes out to be 27.25. This is another measure of the center of the uptake variable’s distribution. Another common measure of center is the median. The median involves sorting the data from largest to smallest and reporting the middle value (if there is an odd number of data points) or the average of the two middle values (if there is an even number of data points). You may notice that having very large or small values in the data set do not matter as much for calculation of the median. The largest value for uptake could be replaced by 10000 and the median wouldn’t change. For this reason, the median is also referred to as a robust estimate of the center of the uptake variable’s distribution. The value of the median here is 28.3. Other measures of location are quantiles or percentiles of the distribution. Explanation… Q1, Median, Q3 Examples… Min and max too Usually want summaries for different subgroups of data Ex: Get similar uptake summaries for each Treatment Treatment Avg Median SD Q1 Max nonchilled 30.64 31.3 9.70 26.47 45.5 chilled 23.78 19.7 10.88 14.53 42.4 Ex: Get similar uptake summaries for each Treatment and Concentration Treatment conc Avg Meidan SD Q1 Max nonchilled 95 13.28 12.80 2.40 11.48 16.2 nonchilled 175 25.12 24.65 5.71 20.05 32.4 nonchilled 250 32.47 32.70 5.92 27.30 40.3 nonchilled 350 35.13 34.50 6.12 30.45 42.1 nonchilled 500 35.10 33.85 5.65 31.27 42.9 nonchilled 675 36.02 35.80 6.34 31.43 43.9 nonchilled 1000 37.38 37.60 7.06 32.50 45.5 chilled 95 11.23 10.55 2.86 9.60 15.1 chilled 175 19.45 19.50 5.89 15.68 27.3 chilled 250 25.28 24.20 10.57 17.95 38.1 chilled 350 26.20 26.45 10.83 18.15 38.8 chilled 500 26.65 26.00 11.45 18.30 38.9 chilled 675 27.88 28.80 10.96 19.72 39.6 chilled 1000 29.78 30.30 12.41 20.40 42.4 3.2.3.2.2 Measuring Spread Why do we care… The most common measure of spread is the standard deviation or variance. 116.9515132 10.8144123 19.225 3.2.3.3 Measures a Linear Relationship Why do we care… Covariance, Correlation ## [1] 1552.687 ## [1] 0.4851774 Should always plot! Recap of common summaries 3.2.4 Graphical Summaries 3.2.4.1 Barplots for Categorical Data Let’s start by graphing categorical variables (variables in which entries are a label or attribute). Recall that the main goal of summarizing categorical variables is to look at counts for each level or combination of levels for the variables in question. Again, we’ll look at the titanic data set. To visualize a one-way table a simple bargraph can be made. As you can likely tell, this gives a visual of the counts represented by the heights of the bars rather than the raw count of the contingency table. To visualize a two-way table, a stacked barplot can be created. Interpret… The side-by-side barplot can be created as an alternative visual of the two-way table. Interp… Filled barplots also sometimes useful. Here the bars will be stacked and the bars will be standardized to have constant height. This is really useful when there are an equal number of observations (or close to it) in each category on the x-axis (for instance with some Likert scale data surveys). Interpret… Of course, sometimes it is useful to see the same plot across the levels or settings of another variable. The plots below… 3.2.4.2 Histograms and Density Plots Next we’ll create common plots for numerical variables (variables in which entries are a numerical value where math can be performed). Recall that the main goal of summarizing numerical variables is to describe the shape, center, and spread of the distribution. Generally, this is done using a histogram, boxplot, or, in the case of two numerical variables, scatterplot. We’ll again look at the carbon dioxide (CO2) uptake data set. Let’s start by creating a histogram. A histogram … Interpret… Issue with histograms is their variability (quick example). Alternative is the kernel smoothed plot. These… Interpret… or Interpret… Plots can easily be overlayed, as long as they are on the same scale. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 3.2.4.3 Boxplots boxplot Sometimes it is useful to overlay the data values themselves on a boxplot in order to see the shape of the distribution more clearly. Across another variable 3.2.4.4 Scatterplots Scatterplots Below is a scatterplot of the conc and uptake variables. Trend lines and correlation on plot Using text for the points too Across another variable Sometimes create amalgamation type graphs. Useful but be careful not to overwhelm the reader. 3.3 Suggestions for Further Readings Exploratory data analysis R book is pretty great. 3.4 Software 3.4.1 R Recall the general workflow for programming in R. This section is meant to instruct on how to produce common numerical and graphical summaries in R. 3.4.1.1 Numerical Summaries To create numerical summaries in R, you first need to determine the type of data you have. Remember there are two major categories: Categorical (Qualitative) variable - entries are a label or attribute Numerical (Quantitative) variable - entries are a numerical value where math can be performed The main goal is to describe the distribution or pattern and frequency with which you observe the variable. For categorical variables, we used contingency tables to describe the count in each category. In R, this is done using the table function. We’ll recreate the summaries of the titanic dataset (available in the file titanic.csv in the datasets folder or via the web). titanicData &lt;- read_csv(&quot;https://www4.stat.ncsu.edu/~online/datasets/titanic.csv&quot;) titanicData ## # A tibble: 1,310 x 14 ## pclass survived name sex age sibsp parch ticket fare cabin embarked ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 1 Alle~ fema~ 29 0 0 24160 211. B5 S ## 2 1 1 Alli~ male 0.917 1 2 113781 152. C22 ~ S ## 3 1 0 Alli~ fema~ 2 1 2 113781 152. C22 ~ S ## 4 1 0 Alli~ male 30 1 2 113781 152. C22 ~ S ## 5 1 0 Alli~ fema~ 25 1 2 113781 152. C22 ~ S ## # ... with 1,305 more rows, and 3 more variables: boat &lt;chr&gt;, body &lt;dbl&gt;, ## # home.dest &lt;chr&gt; Recall the three variables we created tables for were: embarked (where journey started) survived (survive or not) sex (Male or Female) To create the one-way contingency tables, we simply pass the column of interest to the table function. table(titanicData$embarked) ## ## C Q S ## 270 123 914 table(titanicData$survived) ## ## 0 1 ## 809 500 table(titanicData$sex) ## ## female male ## 466 843 To create a two-way contingency table, we can pass the columns of interest from the dataset. table(titanicData$survived, titanicData$sex) ## ## female male ## 0 127 682 ## 1 339 161 table(titanicData$survived, titanicData$embarked) ## ## C Q S ## 0 120 79 610 ## 1 150 44 304 table(titanicData$sex, titanicData$embarked) ## ## C Q S ## female 113 60 291 ## male 157 63 623 This same process can continue to create an n-way contingency table. table(titanicData$sex, titanicData$embarked, titanicData$survived) ## , , = 0 ## ## ## C Q S ## female 11 23 93 ## male 109 56 517 ## ## , , = 1 ## ## ## C Q S ## female 102 37 198 ## male 48 7 106 These table objects in R are actually arrays - the extension of a matrix to more than two dimensions. tab &lt;- table(titanicData$sex, titanicData$embarked, titanicData$survived) str(tab) ## &#39;table&#39; int [1:2, 1:3, 1:2] 11 109 23 56 93 517 102 48 37 7 ... ## - attr(*, &quot;dimnames&quot;)=List of 3 ## ..$ : chr [1:2] &quot;female&quot; &quot;male&quot; ## ..$ : chr [1:3] &quot;C&quot; &quot;Q&quot; &quot;S&quot; ## ..$ : chr [1:2] &quot;0&quot; &quot;1&quot; You can obtain conditional bivariate info by supplying an index. #returns embarked vs survived table for females tab[1, , ] ## ## 0 1 ## C 11 102 ## Q 23 37 ## S 93 198 #returns embarked vs survived table for males tab[2, , ] ## ## 0 1 ## C 109 48 ## Q 56 7 ## S 517 106 #returns survived vs sex table for embarked &quot;C&quot; tab[, 1, ] ## ## 0 1 ## female 11 102 ## male 109 48 We can also obtain conditional univariate info too! #Survived status for males that embarked at &quot;Q&quot; tab[2, 2, ] ## 0 1 ## 56 7 For numerical variables, recall that we want to describe the shape, center, and spread of the variable’s distribution. Recall the carbon dioxide (CO2) uptake data set Response recorded: uptake CO2 uptake rates in grass plants Environment manipulated: Treatment - chilled/nonchilled Ambient CO2 specified and measured: conc CO2 &lt;- tbl_df(CO2) CO2 ## # A tibble: 84 x 5 ## Plant Type Treatment conc uptake ## &lt;ord&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Qn1 Quebec nonchilled 95 16 ## 2 Qn1 Quebec nonchilled 175 30.4 ## 3 Qn1 Quebec nonchilled 250 34.8 ## 4 Qn1 Quebec nonchilled 350 37.2 ## 5 Qn1 Quebec nonchilled 500 35.3 ## # ... with 79 more rows To investigate the center we looked at the mean, trimmed mean, and the median. The mean and median functions handle these. You simply pass the column of interest. To obtain a trimmed mean, you can use the trim argument. mean(CO2$uptake) ## [1] 27.2131 #5% trimmed mean mean(CO2$uptake, trim = 0.05) ## [1] 27.25263 median(CO2$uptake) ## [1] 28.3 To obtain measures of spread we can use var and sd. Similarly, we pass the column of interest to these functions. var(CO2$uptake) ## [1] 116.9515 sd(CO2$uptake) ## [1] 10.81441 Quantiles can be found using the quantile function. You pass the column of interest and a vector of probabilities corresponding to the quantiles of interest. quantile(CO2$uptake, probs = c(0.1, 0.2)) ## 10% 20% ## 12.36 15.64 The IQR can be found by passing the IQR function the column of interest. IQR(CO2$uptake) ## [1] 19.225 R has some nice functions that return multiple summaries. For instance, the summary function! #quartiles and mean summary(CO2$uptake) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 7.70 17.90 28.30 27.21 37.12 45.50 The psych package has a very nice function called describe that provides many summaries about your numerical variables in the dataset as well. Remember you need to install a package if you’ve never used it and then read it in to your current R session using the library or require function. describe(titanicData) ## vars n mean sd median trimmed mad min max range skew ## pclass 1 1309 2.29 0.84 3 2.37 0.00 1.00 3 2.00 -0.60 ## survived 2 1309 0.38 0.49 0 0.35 0.00 0.00 1 1.00 0.49 ## name* 3 1309 NaN NA NA NaN NA Inf -Inf -Inf NA ## sex* 4 1309 NaN NA NA NaN NA Inf -Inf -Inf NA ## age 5 1046 29.88 14.41 28 29.39 11.86 0.17 80 79.83 0.41 ## sibsp 6 1309 0.50 1.04 0 0.27 0.00 0.00 8 8.00 3.84 ## parch 7 1309 0.39 0.87 0 0.18 0.00 0.00 9 9.00 3.66 ## kurtosis se ## pclass -1.32 0.02 ## survived -1.77 0.01 ## name* NA NA ## sex* NA NA ## age 0.13 0.45 ## sibsp 19.93 0.03 ## parch 21.42 0.02 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 7 rows ] describe(CO2) ## vars n mean sd median trimmed mad min max range skew ## Plant* 1 84 6.50 3.47 6.5 6.50 4.45 1.0 12.0 11.0 0.00 ## Type* 2 84 1.50 0.50 1.5 1.50 0.74 1.0 2.0 1.0 0.00 ## Treatment* 3 84 1.50 0.50 1.5 1.50 0.74 1.0 2.0 1.0 0.00 ## conc 4 84 435.00 295.92 350.0 408.53 259.45 95.0 1000.0 905.0 0.72 ## uptake 5 84 27.21 10.81 28.3 27.33 14.83 7.7 45.5 37.8 -0.10 ## kurtosis se ## Plant* -1.26 0.38 ## Type* -2.02 0.05 ## Treatment* -2.02 0.05 ## conc -0.68 32.29 ## uptake -1.35 1.18 Recall, if you had multiple numerical variables we often want to measure the linear relationship. This is done via covariance and correlation. If you pass the var or cov function a data frame with multiple numeric columns, you’ll obtain the variance-covariance matrix. The diagonals represent the variance and the off-diagonals the covariances. The cor function similarly gives the correlation matrix. var(select(CO2, conc, uptake)) ## conc uptake ## conc 87571.084 1552.6867 ## uptake 1552.687 116.9515 cov(select(CO2, conc, uptake)) ## conc uptake ## conc 87571.084 1552.6867 ## uptake 1552.687 116.9515 Of course, often summaries by a subgroup of the data is of interest. We looked at finding summaries of uptake for each Treatment level. dplyr is easy to use for this purpose but can only use functions that return a single value. The idea is: Use group_by to create subgroups associated with the data frame Use summarize to create basic summaries for each subgroup For example: CO2 %&gt;% group_by(Treatment) %&gt;% summarise(avg = mean(uptake), med = median(uptake), var = var(uptake)) ## # A tibble: 2 x 4 ## Treatment avg med var ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 nonchilled 30.6 31.3 94.2 ## 2 chilled 23.8 19.7 118. To find the summary for different settings of two variables, say Treatment and Concentration, simply pass more than one categorical variable to group_by. CO2 %&gt;% group_by(Treatment, conc) %&gt;% summarise(avg = mean(uptake), med = median(uptake), var = var(uptake)) ## # A tibble: 14 x 5 ## # Groups: Treatment [2] ## Treatment conc avg med var ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 nonchilled 95 13.3 12.8 5.75 ## 2 nonchilled 175 25.1 24.6 32.6 ## 3 nonchilled 250 32.5 32.7 35.1 ## 4 nonchilled 350 35.1 34.5 37.4 ## 5 nonchilled 500 35.1 33.8 31.9 ## 6 nonchilled 675 36.0 35.8 40.2 ## 7 nonchilled 1000 37.4 37.6 49.8 ## 8 chilled 95 11.2 10.6 8.18 ## 9 chilled 175 19.4 19.5 34.7 ## 10 chilled 250 25.3 24.2 112. ## 11 chilled 350 26.2 26.4 117. ## 12 chilled 500 26.6 26 131. ## 13 chilled 675 27.9 28.8 120. ## 14 chilled 1000 29.8 30.3 154. An alternative to using dplyr is to use the built-in aggregate function. This function is more flexible and can be used with functions that return more than one value like summary. Basic use gives a response (x) and a list of variables to group by. aggregate(x = CO2$uptake, by = list(CO2$Treatment), FUN = summary) ## Group.1 x.Min. x.1st Qu. x.Median x.Mean x.3rd Qu. x.Max. ## 1 nonchilled 10.60000 26.47500 31.30000 30.64286 38.70000 45.50000 ## 2 chilled 7.70000 14.52500 19.70000 23.78333 34.90000 42.40000 Alternatively, formula notation can be used. We can supply uptake ~ Treatment and the data object. The idea of formula notation is essentially a shorthand for modeling the left-hand side (uptake here) by the right-hand side (Treatment here). In this case, this implies finding uptake values returned by FUN for the different levels of Treatment. aggregate(uptake ~ Treatment, data = CO2, FUN = summary) ## Treatment uptake.Min. uptake.1st Qu. uptake.Median uptake.Mean ## 1 nonchilled 10.60000 26.47500 31.30000 30.64286 ## 2 chilled 7.70000 14.52500 19.70000 23.78333 ## uptake.3rd Qu. uptake.Max. ## 1 38.70000 45.50000 ## 2 34.90000 42.40000 A second variable can be given on the right hand side. The summaries will then be found for every combination of the values of the variables on the right hand side. Since conc is only observed at a few levels, this is reasonable here. aggregate(uptake ~ Treatment + conc, data = CO2, FUN = summary) ## Treatment conc uptake.Min. uptake.1st Qu. uptake.Median uptake.Mean ## 1 nonchilled 95 10.60000 11.47500 12.80000 13.28333 ## 2 chilled 95 7.70000 9.60000 10.55000 11.23333 ## 3 nonchilled 175 19.20000 20.05000 24.65000 25.11667 ## 4 chilled 175 11.40000 15.67500 19.50000 19.45000 ## 5 nonchilled 250 25.80000 27.30000 32.70000 32.46667 ## 6 chilled 250 12.30000 17.95000 24.20000 25.28333 ## 7 nonchilled 350 27.90000 30.45000 34.50000 35.13333 ## 8 chilled 350 13.00000 18.15000 26.45000 26.20000 ## 9 nonchilled 500 28.50000 31.27500 33.85000 35.10000 ## 10 chilled 500 12.50000 18.30000 26.00000 26.65000 ## 11 nonchilled 675 28.10000 31.42500 35.80000 36.01667 ## 12 chilled 675 13.70000 19.72500 28.80000 27.88333 ## uptake.3rd Qu. uptake.Max. ## 1 15.40000 16.20000 ## 2 13.30000 15.10000 ## 3 29.62500 32.40000 ## 4 23.32500 27.30000 ## 5 36.52500 40.30000 ## 6 33.82500 38.10000 ## 7 40.65000 42.10000 ## 8 34.45000 38.80000 ## 9 39.27500 42.90000 ## 10 37.07500 38.90000 ## 11 40.85000 43.90000 ## 12 36.97500 39.60000 ## [ reached getOption(&quot;max.print&quot;) -- omitted 2 rows ] 3.4.1.2 Graphical Summaries There are three major systems for plotting in R. Base R (built-in functions) Use plot, barplot, hist, etc. to start a plot Annotate the plot using functions like text, lines, points, etc. Lattice (not covered here) ggplot2 (sort of part of the tidyverse - Cheat Sheet) ggplot(data = data_frame) creates a plot instance Add “layers” to the system (geoms or stats) There is a great reference book here for plotting in R and general exploratory data analysis! We’ll start by going through common Base R plotting for both categorical and numerical variables. After that, we’ll cover the same plots using ggplot2. 3.4.1.2.1 Base R Plotting Let’s start by graphing categorical variables (variables in which entries are a label or attribute). Recall that the main goal of summarizing categorical variables is to look at counts for each level or combination of levels for the variables in question. Again, we’ll look at the titanic data set. The function to create a barplot in R is barplot. Essentially, we can just input the output from the table function into barplot! table(titanicData$survived) ## ## 0 1 ## 809 500 barplot(table(titanicData$survived)) To visualize a two-way table, a stacked barplot can be created. Again, we simply pass a two-way table to the barplot function. twoTable &lt;- table(titanicData$survived, titanicData$sex) barplot(twoTable) Of course, a legend is needed. Common arguments to barplot include: legend = TRUE `args.legend = list(title = “…”) barplot(twoTable, legend = TRUE, args.legend = list(title=&quot;Survived&quot;)) To create a Side-by-side barplot, simply pass a two-way table to barplot with an additional input of beside = TRUE. barplot(twoTable, beside = TRUE, legend = TRUE, args.legend=list(title=&quot;Survived&quot;)) The legend can be specified more clearly by providing a character vector corresponding to the values of the first variable given to the table function. barplot(twoTable, beside = TRUE, legend = c(&quot;Died&quot;, &quot;Survived&quot;), args.legend=list(title=&quot;Survived&quot;)) To visualize a three-way table, we essentially want to recreate this plot for each setting of the third variable. This is a little difficult in Base R and will be taken up in the ggplot section. Next we’ll create common plots for numerical variables (variables in which entries are a numerical value where math can be performed). Recall that the main goal of summarizing numerical variables is to describe the shape, center, and spread of the distribution. Generally, this is done using a histogram, boxplot, or, in the case of two numerical variables, scatterplot. The general process for creating these plots using Base R: Use hist, boxpot, plot, etc. to start a plot Annotate the plot using functions like text, lines, points, etc. We’ll again look at the carbon dioxide (CO2) uptake data set. ## # A tibble: 84 x 5 ## Plant Type Treatment conc uptake ## &lt;ord&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Qn1 Quebec nonchilled 95 16 ## 2 Qn1 Quebec nonchilled 175 30.4 ## 3 Qn1 Quebec nonchilled 250 34.8 ## 4 Qn1 Quebec nonchilled 350 37.2 ## 5 Qn1 Quebec nonchilled 500 35.3 ## # ... with 79 more rows The hist function creates a histogram and its main argument is a numeric vector. hist(CO2$uptake) There are many ways to modify the histogram. Some common things to change would be the title (main), the bin calculation (breaks), and perhaps the color of the bars (col). hist(CO2$uptake, main = &quot;Histogram of Uptake Values&quot;, breaks = 15, col = &quot;Red&quot;) Often there is a value that you’d like to highlight by adding a line. This can be done using the abline function (lty specifies line type, lwd the line width, col the color, etc. - see help(par) for more information). abline will add a line to the most recently created plot. hist(CO2$uptake, main = &quot;Histogram of Uptake Values&quot;, breaks = 15, col = &quot;Red&quot;) abline(v = mean(CO2$uptake), lwd = 3, lty = 2, col = &quot;Blue&quot;) A kernel plot (or smoothed histogram plot) can be created by using the plot function on the output created by the density function. density will comput kernel density estimates, by default using the normal distribution for weighting. As with hist, we pass density the numeric vector of interest. density(CO2$uptake) ## ## Call: ## density.default(x = CO2$uptake) ## ## Data: CO2$uptake (84 obs.); Bandwidth &#39;bw&#39; = 4.012 ## ## x y ## Min. :-4.337 Min. :2.286e-05 ## 1st Qu.:11.132 1st Qu.:2.863e-03 ## Median :26.600 Median :2.125e-02 ## Mean :26.600 Mean :1.615e-02 ## 3rd Qu.:42.068 3rd Qu.:2.649e-02 ## Max. :57.537 Max. :3.095e-02 plot(density(CO2$uptake), lwd = 3, col = &quot;Blue&quot;, lty = 3) To overlay a kernel smoother on top of a histogram, we first create a histogram and specify freq = FALSE in order to put the histogram on the same scale as a density plot. Then, we use lines instead of plot on the output of the density call. lines is a function similar to abline in that it will overlay a (more general) ‘line’ on the most recently created plot. hist(CO2$uptake, main = &quot;Histogram of Uptake Values&quot;, col = &quot;Red&quot;, freq = FALSE) lines(density(CO2$uptake), lwd = 3, col = &quot;Blue&quot;, lty = 3) To create a boxplot, use the boxplot function. We can specify a single numeric vector as the argument. This will create a single boxplot. To create side-by-side boxplots, the formula notation we’ve used before comes in handy! If we want a boxplot of the uptake variable for each level of the Treatment variable, we pass boxplot uptake ~ Treatment and specify the data set being used (main again will change the title). boxplot(uptake ~ Treatment, data = CO2, main = &quot;Boxplot of Uptake by Treatment&quot;) It is easy to change the orientation using the horizontal argument. boxplot(uptake ~ Treatment, data = CO2, main = &quot;Boxplot of Uptake by Treatment&quot;, horizontal = TRUE) Most of the graphical parameters used previously can be changed here too because boxplot has the ellipsis argument .... boxplot(uptake ~ Treatment, data = CO2, main = &quot;Boxplot of Uptake by Treatment&quot;, col = &quot;Grey&quot;, lty = 2, lwd = 2) The ellipsis argument exists in many functions including hist, boxplot, abline, lines, and plot This argument means additional arguments not named in the inputs of the function being called can be passed. These arguments may be used by function calls within one of these functions! You can see the code used in each function by running the function with no () after it. read_csv ## function (file, col_names = TRUE, col_types = NULL, locale = default_locale(), ## na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, ## trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, ## n_max), progress = show_progress(), skip_empty_rows = TRUE) ## { ## tokenizer &lt;- tokenizer_csv(na = na, quoted_na = quoted_na, ## quote = quote, comment = comment, trim_ws = trim_ws, ## skip_empty_rows = skip_empty_rows) ## read_delimited(file, tokenizer, col_names = col_names, col_types = col_types, ## locale = locale, skip = skip, skip_empty_rows = skip_empty_rows, ## comment = comment, n_max = n_max, guess_max = guess_max, ## progress = progress) ## } ## &lt;bytecode: 0x0000000019ea38e0&gt; ## &lt;environment: namespace:readr&gt; Some functions are ‘generic’ such as mean and plot. You need to know which mean or plot method you are trying to get the code. plot.default is the default! plot.default ## function (x, y = NULL, type = &quot;p&quot;, xlim = NULL, ylim = NULL, ## log = &quot;&quot;, main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ## ann = par(&quot;ann&quot;), axes = TRUE, frame.plot = axes, panel.first = NULL, ## panel.last = NULL, asp = NA, xgap.axis = NA, ygap.axis = NA, ## ...) ## { ## localAxis &lt;- function(..., col, bg, pch, cex, lty, lwd) Axis(...) ## localBox &lt;- function(..., col, bg, pch, cex, lty, lwd) box(...) ## localWindow &lt;- function(..., col, bg, pch, cex, lty, lwd) plot.window(...) ## localTitle &lt;- function(..., col, bg, pch, cex, lty, lwd) title(...) ## xlabel &lt;- if (!missing(x)) ## deparse(substitute(x)) ## ylabel &lt;- if (!missing(y)) ## deparse(substitute(y)) ## xy &lt;- xy.coords(x, y, xlabel, ylabel, log) ## xlab &lt;- if (is.null(xlab)) ## xy$xlab ## else xlab ## ylab &lt;- if (is.null(ylab)) ## xy$ylab ## else ylab ## xlim &lt;- if (is.null(xlim)) ## range(xy$x[is.finite(xy$x)]) ## else xlim ## ylim &lt;- if (is.null(ylim)) ## range(xy$y[is.finite(xy$y)]) ## else ylim ## dev.hold() ## on.exit(dev.flush()) ## plot.new() ## localWindow(xlim, ylim, log, asp, ...) ## panel.first ## plot.xy(xy, type, ...) ## panel.last ## if (axes) { ## localAxis(if (is.null(y)) ## xy$x ## else x, side = 1, gap.axis = xgap.axis, ...) ## localAxis(if (is.null(y)) ## x ## else y, side = 2, gap.axis = ygap.axis, ...) ## } ## if (frame.plot) ## localBox(...) ## if (ann) ## localTitle(main = main, sub = sub, xlab = xlab, ylab = ylab, ## ...) ## invisible() ## } ## &lt;bytecode: 0x000000001a392658&gt; ## &lt;environment: namespace:graphics&gt; Here you can see that some of the functions called by plot.default also have the ... argument being used. This is why the arguments like lty and col can be used even though they aren’t always named in the function inputs explicity. When working with Base R graphics, getting to know the graphical parameters (see help(par)) is important! The plot function itself is very flexible. General use: Call plot Give coordinates for points to be plotted as x and y (usually) Change plot type with type Change graphical parameters such as line type lty, point type pch, color color, etc. Add a legend with legend To create a basic scatterplot, just specify two numeric vectors of the same length. plot(x = CO2$conc, y = CO2$uptake) By default the plot type is ‘p’ for points but many types of plots can be made by changing the type argument. The labels on the axis can be changed using xlab and ylab, the title with main, the plotting character pch, etc. plot(x = CO2$conc, y = CO2$uptake, xlab = &quot;Concentration&quot;, ylab = &quot;Uptake&quot;, main = &quot;Scatter Plot of Concentration and Uptake&quot;, pch = 2, ylim = c(0, max(CO2$uptake))) To change the plotting symbol (or color, etc.) based on another variable, create appropriate vectors that match the length of the data. For instance, we can create a symbol column on our data frame that is 3 if the Treatment is ‘chilled’ and 2 if not. This symbol column is of course the same length as the data. If we pass the pch argument symbol, plot will assign the plotting character 3 to chilled observations and 2 if not. CO2$symbol &lt;- ifelse(CO2$Treatment == &quot;chilled&quot;, 3, 2) select(CO2, uptake, Treatment, symbol) ## # A tibble: 84 x 3 ## uptake Treatment symbol ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 16 nonchilled 2 ## 2 30.4 nonchilled 2 ## 3 34.8 nonchilled 2 ## 4 37.2 nonchilled 2 ## 5 35.3 nonchilled 2 ## # ... with 79 more rows plot(x = CO2$conc, y = CO2$uptake, pch = CO2$symbol) To instruct the reader of the plot, a legend should be added. A manual legend can be created with legend. You can use keywords to specify its location or give an x-y pair. As with the legend for barplot, we can specify the names that display. To match the plot, we should specify the pch corresponding to the levels in the same manner (this would be the same if we changed the color too!). plot(x = CO2$conc, y = CO2$uptake, pch = CO2$symbol) legend(x = 810, y = 18, legend = c(&quot;Chilled&quot;, &quot;Non-Chilled&quot;), pch = c(3, 2)) #Note that colors specified as integers come from the `palette` function #2 is &#39;red&#39; and 3 is &#39;green3&#39; plot(x = CO2$conc, y = CO2$uptake, col = CO2$symbol) legend(x = 810, y = 18, legend = c(&quot;Chilled&quot;, &quot;Non-Chilled&quot;), col = c(3, 2)) Plots can be adorned using abline, lines, and text to name a few. For instance, a trend line can be added with abline. We’ll use lm and our formula notation to fit a simple linear regression model (covered later) and abline knows how to plot an object of class lm. plot(x = CO2$conc, y = CO2$uptake, xlab = &quot;Concentration&quot;, ylab = &quot;Uptake&quot;, main = &quot;Scatter Plot of Concentration and Uptake&quot;, ylim = c(0, max(CO2$uptake))) abline(lm(uptake ~ conc, data = CO2), lwd = 2, col = &quot;Blue&quot;) When adding text, the text function can be used. paste or paste0 can come in handy. These functions ‘paste’ together strings. paste allows the user to specify the character that separates the pasted together strings and paste0 is a special case where there is no separating character. paste(&quot;Hi&quot;, &quot;What&quot;, &quot;Is&quot;, &quot;Going&quot;, &quot;On&quot;, &quot;?&quot;, sep = &quot; &quot;) ## [1] &quot;Hi What Is Going On ?&quot; paste(&quot;Hi&quot;, &quot;What&quot;, &quot;Is&quot;, &quot;Going&quot;, &quot;On&quot;, &quot;?&quot;, sep = &quot;.&quot;) ## [1] &quot;Hi.What.Is.Going.On.?&quot; paste0(&quot;Hi&quot;, &quot;What&quot;, &quot;Is&quot;, &quot;Going&quot;, &quot;On&quot;, &quot;?&quot;) ## [1] &quot;HiWhatIsGoingOn?&quot; We can add the correlation value to the plot using text and assigning the x-y coordinate for the value. Here we round the value to two decimal places using round. correlation &lt;- cor(CO2$conc, CO2$uptake) plot(x = CO2$conc, y = CO2$uptake, xlab = &quot;Concentration&quot;, ylab = &quot;Uptake&quot;, main = &quot;Scatter Plot of Concentration and Uptake&quot;, ylim = c(0, max(CO2$uptake))) abline(lm(uptake ~ conc, data = CO2), lwd = 2, col = &quot;Blue&quot;) text(x = 750, y = 10, cex = 2, label = paste0(&quot;Correlation = &quot;, round(correlation, 2))) To plot character strings instead of points, text can be used after creating an ‘empty’ plot call. plot should be called and the plotting window set, but the values to plot should be NULL (a special object in R used for things that are undefined). Next, call the text function using the usual x-y coordinates along with a label vector the same length as the data. For example, we could plot the Plant for each data point instead of a symbol. plot(NULL, xlim = c(min(CO2$conc), max(CO2$conc)), ylim = c(min(CO2$uptake), max(CO2$uptake)), main = &quot;Scatter Plot of Concentration and Uptake&quot;, xlab = &quot;Conc&quot;, ylab = &quot;Uptake&quot;) text(x = CO2$conc, y = CO2$uptake, label = CO2$Plant) Note that you could specify a single character value for label and the plot would still work. This is because R ‘recycles’ the value. This is a powerful but dangerous aspect of R. plot(NULL, xlim = c(min(CO2$conc), max(CO2$conc)), ylim = c(min(CO2$uptake), max(CO2$uptake)), main = &quot;Scatter Plot of Concentration and Uptake&quot;, xlab = &quot;Conc&quot;, ylab = &quot;Uptake&quot;) text(x = CO2$conc, y = CO2$uptake, label = &quot;S&quot;) The last Base R plot functionality we’ll mention is the pairs function. This function creates basic plots for all pairs of variables when given a data frame. pairs(iris[, 1:4]) To recap Base R plotting: Barplot (barplot on a table object) Histogram (hist), Density (plot(density) or lines(density)) Boxplot (boxplot) Scatter plot (plot) Useful functions: lines, abline, points, text Graphical parameters: lty, lwd, pch, cex, color Base R creates superb plots. The main issue is that much of the plotting customizations have to be manually created. It is also a bit more work to create the same plot for each level of another variable. ggplot will automate these processes. 3.4.1.2.2 ggplot Plotting Now that we’ve covered Base R plotting, we’ll look at plotting through ggplot2 (sort of part of the tidyverse - Cheat Sheet). The main idea is outlined below: ggplot(data = data_frame) creates a plot instance Add “layers” to the system (geoms or stats) Creates a visualization of the data Modify layer “mapping” args (aes) Ex: size, color, and x, y location(s) Coordinate system (mostly use Cartesian plane) Optional: Titles, etc. We’ll go through creation of the same plots in the Base R section. To create a barplot we can use ggplot + geom_bar. To start, we create a base plotting object with ggplot. Here we can specify attributes of the plot in the aes function. For instance, to create a vertical bar chart we can specify the cateogrical variable of interest as x. Let’s do this for the survived variable from the titanic data set. survived is actually stored as a dbl or double in the dataset since it is coded as a 0/1 variable. The plots will look better if we explicity change this as a factor first. titanicData$survived &lt;- as.factor(titanicData$survived) ggplot(data = titanicData, aes(x = survived)) Notice that no plot is made! We haven’t added a geom or stat layer yet. These are generally what you add in order to actually see something created with the plot. The base plotting object just let’s you specify global attributes like what goes on the x-axis. Having the cheat sheet nearby is highly recommend when learning to use ggplot! The geom layer we want to add is geom_bar. ggplot(data = titanicData, aes(x = survived)) + geom_bar() The usual practice is to save the base object and then add to it. For instance: g &lt;- ggplot(data = titanicData, aes(x = survived)) g + geom_bar() We won’t do this here just to help make the plots as clear as possible. You may wonder how to modify the plot. aes() defines visual properties of objects in the plot. This is where a lot of the modification occurs. Changing these is similar to changing values of par in Base R plotting. The cheat sheet gives the most commonly used aesthetics arguments for each geom. Under geom_bar we see d + geom_bar() x, alpha, color, fill, linetype, size, weight The data and aes values can be set in two ways: ‘globally’ (for all layers) via the ggplot statement ‘locally’ (for just that layer) via the geom, stat, etc. layer #global ggplot(data = titanicData, aes(x = survived)) + geom_bar() #local ggplot() + geom_bar(data = titanicData, aes(x = survived)) To set an attribute that doesn’t depend on the data (i.e. color = 'blue'), you generally place these outside of the aes. Usually only aesthetics that need to depend on the data should go in the aes function. Back to our barplot. We can improve the plot in a number of ways. First, we can remove the NA (missing value) category by using the drop_na function. Here we’ll remove all rows where any of the three variables we are investigating have missing values. titanicData &lt;- titanicData %&gt;% drop_na(survived, sex, embarked) g &lt;- ggplot(data = titanicData, aes(x = survived)) g + geom_bar() Next, we can add better labels and a title by adding the appropriate layers (new layers –&gt; see cheat sheet!). The layers we want here are labs to set the title and x (or y) labels. To change the names on the legend we need to look at the scale_x_discrete layer. This is because the aes value’s scale we are trying to modify is ‘x’ and we are doing so for a layer with a ‘discrete’ variable (their word for categorical). ggplot(data = titanicData, aes(x = as.character(survived))) + geom_bar() + labs(x = &quot;Survival Status&quot;, title = &quot;Bar Plot of Survival for Titanic Passengers&quot;) + scale_x_discrete(labels = c(&quot;Died&quot;, &quot;Survived&quot;)) A stacked barplot can be created by using the fill aesthetic and the same process. Create base object Add geoms Use aes to specify aspects of the plot The truly wonderful things about ggplot are the automatic assignment of colors, the creation of legends, and things of that nature for aes elements. This takes a lot of work from the user. Note: the group aestethic does not automatically generate a legend. ggplot(data = titanicData, aes(x = survived, fill = sex)) + geom_bar() Again, we can add custom labels by adding more layers. ggplot(data = titanicData, aes(x = survived, fill = sex)) + geom_bar() + labs(x = &quot;Survival Status&quot;, title = &quot;Bar Plot of Survival Status for Titanic Passengers&quot;) + scale_x_discrete(labels = c(&quot;Died&quot;, &quot;Survived&quot;)) + scale_fill_discrete(name = &quot;Sex&quot;, labels = c(&quot;Female&quot;,&quot;Male&quot;)) Notice the similar adjustment for the scale using scale_*_discrete. For our aestethics, we set aes(x = survived, fill = sex). This means if we want to change one of those auto-generated scales we should use scale_aes-value_discrete. scale_x_discrete(labels = c(\"Died\", \"Survived\")) scale_fill_discrete(name = \"Sex\", labels = c(\"Female\",\"Male\")) To turn the plot we can add the coord_flip layer. ggplot(data = titanicData, aes(x = survived, fill = sex)) + geom_bar() + labs(x = &quot;Survival Status&quot;, title = &quot;Bar Plot of Survival Status for Titanic Passengers&quot;) + scale_x_discrete(labels = c(&quot;Died&quot;, &quot;Survived&quot;)) + scale_fill_discrete(name = &quot;Sex&quot;, labels = c(&quot;Female&quot;,&quot;Male&quot;)) + coord_flip() One thing that can be quite confusing when you are first using the ggplot function is that most geoms have a corresponding stat that can be used instead. For instance, look at the help for geom_bar: geom_bar(mapping = NULL, data = NULL, stat = \"count\", position = \"stack\", ..., width = NULL, binwidth = NULL, na.rm = FALSE, show.legend = NA, inherit.aes = TRUE) There is a stat = \"count\" default argument there. An equivalent plot could be create using a stat layer instead. ggplot(data = titanicData, aes(x = survived, fill = sex)) + geom_bar() ggplot(data = titanicData, aes(x = survived, fill = sex)) + stat_count() Sometimes you’ll need to modify the stat. For example, if you have summary data to begin with rather than the raw data, change the stat to identity. sumData &lt;- titanicData %&gt;% group_by(survived, sex) %&gt;% summarize(count = n()) ggplot(sumData, aes(x = survived, y = count, fill = sex)) + geom_bar(stat = &quot;identity&quot;) The side-by-side barplot can be created using the position aesthetic. position has the following values: dodge for side-by-side bar plot jitter for continuous data with many points at same values fill stacks bars and standardises each stack to have constant height stack stacks bars on top of each other As the value of this aestethic doesn’t depend on the data, we do not place this argument in the aes function. ggplot(data = titanicData, aes(x = survived, fill = sex)) + geom_bar(position = &quot;dodge&quot;) If we use position = fill the bars will be stacked and the bars will be standardized to have constant height. This is really useful when there are an equal number of observations (or close to it) in each category on the x-axis (for instance with some Likert scale data surveys). ggplot(data = titanicData, aes(x = survived, fill = sex)) + geom_bar(position = &quot;fill&quot;) Where else does ggplot shine? What if we want to make the same type of barplot for each embarked value? Here we can use faceting! This is just another layer on the plot call. facet_wrap(~ var) creates a plot for each setting of the variable var. You can specify nrow and ncol or let R figure it out. ggplot(data = titanicData, aes(x = survived)) + geom_bar(aes(fill =sex), position = &quot;dodge&quot;) + facet_wrap(~ embarked) facet_grid(var1 ~ var2) creates a grid of plots for each combination of the variables var1 and var2. var1 values go across rows and var2 values go across columns. To have side-by-side or a vertical column of plots use . ~ var2 or var1 ~ ., respectively. ggplot(data = titanicData, aes(x = survived)) + geom_bar(aes(fill =sex), position = &quot;dodge&quot;) + facet_wrap(~ embarked) Here we’ll create a grid of plots for all pclass and embarked combinations (so easy!). ggplot(data = titanicData, aes(x = survived)) + geom_bar(aes(fill =sex), position = &quot;dodge&quot;) + facet_grid(pclass ~ embarked) Below is a recap of creating a barplot with ggplot: Use ggplot(data = ...) + geom_bar(aes(x = ...)) With summary data, use geom_bar(stat = identity) Stacked barplot via aes(fill = ) Side-by-side barplot via position = dodge Filled barplot via position = fill Recapping plotting with ggplot so far: Can set local or global aes Modify titles/labels by adding more layers Use either stat or geom layer Faceting (multiple plots) via facet_grid or facet_wrap Only need aes if setting a mapping value that is dependent on the data (or you want to create a custom legend!) Now we’ll create similar plots to the Base R section for our numeric variables from the CO2 uptake dataset. The process is the same: Create base object Add geoms Use aes to specify aspects of the plot Let’s start by creating a histogram. This can be done with geom_bar. The easiest way to get started with a new geom is to look at the cheat sheet and the common aes values: c + geom_histogram(binwidth = 5) x, y, alpha, color, fill, linetype, size, weight For geom_hist, only x is really needed. Now we’ll create the histogram for the uptake variable. g &lt;- ggplot(CO2, aes(x = uptake)) g + geom_histogram() We might modify a few attributes of the plot that are not dependent on the data. Remember, these generally are set outside of the aes function. g + geom_histogram(color = &quot;blue&quot;, fill = &quot;red&quot;, size = 2, binwidth = 3) To create the kernel smoother plot (smoothed histogram), we use the geom_density layer. The common aes values from the cheat sheet are: c + geom_density(kernel = \"gaussian\") x, y, alpha, color, fill, group, linetype, size, weight As with geom_hist, only x = is really needed. The kernel smoother for the uptake variable is created below. ggplot(CO2, aes(x = uptake)) + geom_density() This is not a pretty plot. The fill aesthetic is usually used with geom_density. Here, we’ll fill by the Treatment variable. We’ll also change the alpha (transparency value, between 0 and 1) and the adjust (modify the kernel density calculations - 0.5 implies half the default bandwidth) aestethics. ggplot(CO2, aes(x = uptake)) + geom_density(adjust = 0.5, alpha = 0.5, aes(fill = Treatment)) We may wish to stack the two density estimates on top of each other. Recall the position aestethic and the choices of dodge, jitter, fill, and stack. ggplot(CO2, aes(x = uptake)) + geom_density(adjust = 0.5, alpha = 0.5, position = &quot;stack&quot;, aes(fill = Treatment)) Plots can easily be overlayed, as long as they are on the same scale, by simply adding the appropriate layers. To put the histogram on the same scale as a density, we can set y = ..density.. on the geom_hist layer. ggplot(CO2) + geom_histogram(aes(y = ..density.., x = uptake, fill = Treatment)) + geom_density(adjust = 0.25, alpha = 0.5, position = &quot;stack&quot;, aes(x = uptake, fill = Treatment)) For these two plots, you can see it is a little beneficial to set global aes() options here. This would allow for an easy change of the fill variable for all layers! ggplot(CO2, aes(x = uptake, fill = Treatment)) + geom_histogram(aes(y = ..density..)) + geom_density(adjust = 0.25, alpha = 0.5, position = &quot;stack&quot;) To create a boxplot we can use geom_boxplot. The common aes values from the cheat sheet are: f + geom_boxplot() x, y, lower, middle, upper, ymax, ymin, alpha, color, fill, group, linetype, shape, size, weight For geom_boxplot, only x =, y = are really needed. To create a single vertical boxplot, use x = \"\". We’ll create side-by-side boxplots of uptake for each Treatment level. g &lt;- ggplot(CO2, aes(x = Treatment, y = uptake)) g + geom_boxplot(fill = &quot;grey&quot;) Sometimes it is useful to overlay the data values themselves on a boxplot in order to see the shape of the distribution more clearly. This can be done using the geom_jitter layer. The width argument sets how widely the points are scattered (1 = width of box). ggplot(CO2, aes(x = Treatment, y = uptake)) + geom_boxplot(fill = &quot;grey&quot;) + geom_jitter(width = 0.1) Note that the order of the layers is important! ggplot(CO2, aes(x = Treatment, y = uptake)) + geom_jitter(width = 0.1) + geom_boxplot(fill = &quot;grey&quot;) If we wanted to create these same side-by-side boxplots for each value of another variable, we can again use faceting. For instance, we can use facet_wrap with the Type variable. ggplot(CO2, aes(x = Treatment, y = uptake)) + geom_boxplot(fill = &quot;grey&quot;) + geom_jitter(width = 0.1) + facet_wrap(~ Type) Scatterplots can be created using geom_point. The common aes values from the cheat sheet are: e + geom_point() x, y, alpha, color, fill, shape, size, stroke For geom_point, only x =, y = are really needed. Below is a scatterplot of the conc and uptake variables. g &lt;- ggplot(CO2, aes(x = conc, y = uptake)) g + geom_point() A trend lines can be easily added with geom_smooth. The default is a smoothed line. To request the simple linear regression fit, we can use method = lm. Both of these lines are added to the plot below. ggplot(CO2, aes(x = conc, y = uptake)) + geom_point() + geom_smooth(aes(col = &quot;loess&quot;)) + geom_smooth(method = lm, aes(col = &quot;linear&quot;)) + scale_colour_manual(name = &#39;Smoother&#39;, values = c(&#39;loess&#39; = &#39;purple&#39;, &#39;linear&#39; = &#39;red&#39;), labels = c(&#39;GAM&#39;, &#39;Linear&#39;), guide = &#39;legend&#39;) You may notice something a bit odd in the call above. The value of col (color) was set inside the aes function even though it was not set to a value corresponding to the data set. This is an exception to that rule. If you want to utilize ggplot‘s automatic creation of legends, you can use the method above where labels are given to the color for each line (’loess’ and ‘linear’, respectively). scale_colour_manual is then used to create the legend. Notice the values being set assign colors to the lines here. Text can also be added to the plot with geom_text. The correlation is added to the plot in a similar way to how it was done in the Base R section. The size argument being set to a value larger than 1 makes the text bigger. correlation &lt;- cor(CO2$conc, CO2$uptake) ggplot(CO2, aes(x = conc, y = uptake)) + geom_point() + geom_smooth(method = lm, col = &quot;Red&quot;) + geom_text(x = 750, y = 10, size = 5, label = paste0(&quot;Correlation = &quot;, round(correlation, 2))) Using text for the points is very easy with geom_text. Just use this layer with a label variable. ggplot(CO2, aes(x = conc, y = uptake)) + geom_text(aes(label = Plant)) Again, if we want to create similar scatterplots for each value of another variable, we can do so with faceting. (Note: the cut function is very useful for categorizing a numeric variable.) Here we create similar scatterplots for each level of the Treatment variable. ggplot(CO2, aes(x = conc, y = uptake)) + geom_point(aes(color = Type), size = 2.5) + facet_wrap(~ Treatment) Lastly, we saw the useful pairs function from Base R. There are many extension packages for ggplot that give great functionality. The GGally package has a function called ggpairs that is similar to pairs but retains the same syntax and functionality of ggplot. Remember to install the package if you haven’t done so and then read it in with the library command (or call the function directly using ::). library(GGally) ggpairs(iris, aes(colour = Species, alpha = 0.4)) To recap numerical variable plots using ggplot, the most common geoms are: Histogram (geom_hist), Density (geom_density) Boxplot (geom_boxplot) Scatter plot (geom_point), Smoothers (geom_smooth) Jittered points (geom_jitter) Text on plot (geom_text) The syntax and functionality of ggplot is recapped below again. Can set local or global aes Modify titles/labels by adding more layers Use either stat or geom layer Faceting (multiple plots) via facet_grid or facet_wrap Only need aes if setting a mapping value that is dependent on the data (or you want to create a custom legend!) General syntax: ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt;) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; + &lt;LABEL_FUNCTION&gt; ) There are many other useful extensions such as gganimate, ggthemes, ggmap, and ggrepel. 3.4.2 SAS This section is meant to instruct on how to produce common numerical and graphical summaries in SAS. "],
["point-estimates.html", "Chapter 4 Point Estimates 4.1 Estiamte with means 4.2 Estimate with quantiles", " Chapter 4 Point Estimates Learning objectives for this lesson: - How to estimate a mean - Definition of “convenience sample” - Definition of “systematic sample” - Benefits/drawbacks to both approaches - Understand how to estimate a mean - Understand how to estimate a quantile - Understand implicit assumptions for these approaches 4.1 Estiamte with means 4.1.1 Experiment background Someone wants to know how much of something they need to satisfy some population To get a good estimate of this, we can use the average amount for each one and then multiply by the whole population 4.2 Estimate with quantiles 4.2.1 Experiment background Big Deborah’s is making new packaging for their cookies. The engineer responsible for the new desing needs to make sure that the packaging fits the new cookies. While the cookie manufacturing process is standardized, there’s inevitably some degree of variation in cookie size. After discussing the issue with corporate, the engineer decides that a the new cookie sleeves should be large enough to fit 95% of cookies that are baked. (The largest five percent will be marketed separately as “JUMBO” cookies.) 4.2.2 Define the object of the experiment The Engineer is tasked with determining how large the cooke sleeve needs to be. There’s no way for her to know the size of every cookie that Big Deborah’s has made (or will make going forward!), so she’ll need to collect data on existing cookies to inform her cookie sleeve size determination. 4.2.3 Select appropriate response variables If the maximum distance from any one point on the (round) cookie’s perimeter to any other point is smaller than the diameter of the cookie sleeve, then the cookie will fit. This makes “cookie diameter” a good measure for this test. It is easy to measure for each cookie and is directly relevant to the experiment’s objective. [probably have something in here about ] 4.2.4 IDentify sources of variation While the manufacturing process is standardized, there is variation in size from one cookie to the next. This is one source of variation. The engineer isn’t sure of any others. However, she knows that cookies are made in multiple factories, and that each factory has multiple ovens. Ovens and factories could also be sources of variation. 4.2.5 Choose an experimental design The Engineer knows that she needs to look at multiple cookies, since she knows that there is variation in diameter from one cookie to the next. One option would be to just use the remaining cookies in the box she has in her office (22 of the 25-count box remain). [something about convenience sample] However, she knows that cookies from the same oven are typically packaged together. If there is variation from one oven to the next, looking at the cookies she has in her office may not tell the whole story. Instead, she chooses to take every 20th cookie manufactured off the assembly line until she gets 500 cookies. [something about systematic sample] 4.2.6 Perform the test The day of the test comes, and the Engineer starts collecting cookies. However, problems arise! The plan has to shut down half-way through, so she only gets 431 cookies instead of the 500 she thought she would. However, she measures the diameters of each cookie and records the data in a spreadsheet. 4.2.7 Statistically analyze the data The initial plan had been to rank-order the 500 cookies and estimate the 95th percentile using the diamter of the 475th largets cookie. Since we didn’t get all of our data, we have to improvise. 431 doesn’t neatly yield a value such that exactly 95% are less than or equal and 5% are greater than or equal. One option is to choose the 410th largest cookie to estimate our percentile. Slightly more than 95% of cookies will have smaller diameters than this. Alternatively, we could interpolate between the 409th and 410th cookies. [reasons and logic and math for each of these] 4.2.8 Draw conclusions Based on this study, the Engineer concludes that a cookie sleeve large enough for a cookie of diameter XX will be big enough to contain 95% of Big Deborah cookies. 4.2.9 Discussion pros and cons to the approach chosen generalizing to other types of point estimates "],
["accounting-for-uncertainty.html", "Chapter 5 Accounting for Uncertainty 5.1 Example one 5.2 Example two", " Chapter 5 Accounting for Uncertainty Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["CI.html", "Chapter 6 Inference via Confidence Intervals for One Sample 6.1 The normal approximation 6.2 Other types of binomial confidence intervals", " Chapter 6 Inference via Confidence Intervals for One Sample There are many ways to build confidence intervals for sample proportions. Here are a few: 6.1 The normal approximation This is the basic interval they’ve taught in introductory statistics courses since time immamorial. Or at least the past few decades, I’d have to know the history of Stats Ed to give the real timeframe. Anyway, this confidence interval uses the fact from the Central Limit Theorem, that, as \\(n \\rightarrow \\infty\\), the sampling distribution for \\(\\hat\\pi = x/n\\) closely resembles a Normal distribution. Based on that, you get the equation: \\[\\hat\\pi \\pm z_{\\frac{\\alpha}{2}} \\sqrt{\\frac{\\hat\\pi (1 - \\hat\\pi)}{n}}\\] 6.1.1 Analog CI We can build this CI in R pretty easily by inputting the values for the sample size, \\(n\\), and the number of “successes” or “1”s from our binary response variable. One example from class discusses a poll of 2500 people with 400 responding “Satisfactory”. For a 90% confidence interval, we have: n &lt;- 2500 x &lt;- 400 pihat &lt;- x/n alpha &lt;- 0.1 # 90% CI --&gt; alpha = 1 - .9 = 0.1 lower_bound &lt;- pihat + qnorm(alpha/2) * sqrt((pihat * (1 - pihat)/n)) upper_bound &lt;- pihat + qnorm(1 - alpha/2) * sqrt((pihat * (1 - pihat)/n)) c(lower_bound, upper_bound) ## [1] 0.1479397 0.1720603 6.1.2 Easy mode But it’s much easier to just use the binom library, which contains the function binom.confint(): # install.packages(&quot;binom&quot;) library(binom) ## Warning: package &#39;binom&#39; was built under R version 3.6.3 binom.confint(x = 400, n = 2500, conf.level = 0.9, method = &quot;asymptotic&quot;) ## method x n mean lower upper ## 1 asymptotic 400 2500 0.16 0.1479397 0.1720603 Much easier! But now that we’re using binom.confint(), we discover that we have to specify method = \"asymptotic\". But that implies that there are alternatives! And indeed, if we just remove that statement, we see that there are almost a DOZEN different methods that binom.confint() will compute for you! 6.2 Other types of binomial confidence intervals First off, most of these aren’t useful in most cases. They’re in there because (1) they’re not very hard to program, so the authors figured, “Why not?” and (2) in most cases, there is at least one circumstance where each one is the best option. (Or they’re included for historical reasons.) 6.2.1 Exact CIs, aka Clopper-Pearson For one simple example, recall the assumption that we always have to make for our Normal approximation method: \\(n * \\hat\\pi &gt; 5\\) and \\(n * (1 - \\hat\\pi) &gt; 5\\). This is required when we use the Normal approximation. It means we can’t build CIs for small-ish samples. But other methods don’t have this problem! method = \"exact\" uses what’s called the Clopper-Pearson method, which uses the Binomial distribution to calculate an “exact” confidence interval rather than rely on an approximation. While being “exact” sounds better than “approximate”, the truth of the matter is that the Clopper-Pearson interval is generally wider than it needs to be, meaning you get a less precise interval: library(dplyr) binom.confint(x = 400, n = 2500, conf.level = 0.9) %&gt;% mutate(`CI Width` = upper - lower) %&gt;% select(method, lower, upper, `CI Width`) %&gt;% arrange(`CI Width`) ## method lower upper CI Width ## 1 bayes 0.1480550 0.1721635 0.02410856 ## 2 cloglog 0.1481500 0.1722628 0.02411279 ## 3 profile 0.1481871 0.1723036 0.02411651 ## 4 wilson 0.1483082 0.1724269 0.02411870 ## 5 probit 0.1482369 0.1723573 0.02412042 ## 6 asymptotic 0.1479397 0.1720603 0.02412053 ## 7 logit 0.1483044 0.1724312 0.02412679 ## 8 agresti-coull 0.1483026 0.1724325 0.02412988 ## 9 lrt 0.1481877 0.1723265 0.02413880 ## 10 exact 0.1480388 0.1725544 0.02451559 ## 11 prop.test 0.1459601 0.1750977 0.02913765 Since we have a large sample, the differences aren’t very large, but there are times when you want every ounce of precision you can get! 6.2.2 Bayesian intervals Bayesian statistics is a school of thought that says we should try to incorporate our prior knowledge about a problem when making a decision instead of letting the data stand on its own.I don’t want to get into why some folks prefer Bayesian intervals, but if you want to, just specify method = \"bayes\" to get a Bayesian CI. 6.2.3 A good general-use CI My go-to for a simple binomial confidence interval is the Agresti-Coull method, method = \"agresti-coull\". It’s one of the weirder ones (Seriously, go look at the equation for it!), but generally performs as well or better than the competition across most scenarios. It’s more precise than method = \"exact\", doesn’t fail in small samples like method = \"asymptotic\", and doesn’t rely on a Bayesian approach. library(tidyverse) "],
["HT.html", "Chapter 7 Inference via Hypothesis Tests for One Sample 7.1 Example: Detection Probability 7.2 Hypothesis testing", " Chapter 7 Inference via Hypothesis Tests for One Sample 7.1 Example: Detection Probability An important problem for the US Army is protecting soldiers in forward positions. One of main threats to these soldiers are explosive projectiles launched from great distances. These are often refered to as “indirect fires”, since the folks launching the projectiles (“firing” the projectiles) may not have direct visibility (“line of sight”) to their target. For example, artillery like the US M777 Light Towed Howitzer can fire projectiles over 40 km, far beyond the distance a soldier operating the machine could aim it. Instead, the gun crew relies on information about where to shoot provided to them by other units on the battlefield. This allows them to effect the battle from far away and without alerting their target. To protect soldiers from similar threats, the US Army developed the Q-53 Counterfire Radar. One of this system’s primary functions is to detect incoming indirect fires and pinpoint the source of those shots. Because soliders will be relying on the Q-53 in combat, the US Government tested it extensively to better understand how it would perform in an operational setting. The testers fired shells from systems that closely resembled the artillery that might be seen on the battlefield while actual soldiers operated a Q-53. For each shell that was fired, the testers recorded whether or not the Q-53 crew was able to detect the projectile with their system. Using data from this test, evaluators were able to the likelihood that the Q-53 would detect an incoming projectile. 7.1.1 Understanding system performance Let’s take a step back and consider the data we’re getting from this test and try to understand why the testers did things the way they did. First, let’s consider the goal of this test. At the end of the day, the US Army wants to know how effective the Q-53 is at it’s job. This job is to help protect soldiers by giving them early warning if they’re under attack from indirect fires like artillery. Therefore, it’s vital that the Q-53 detect incoming projectiles with high probability. Once we understand this, the choice to measure the detection probability for incoming projectiles is completley logical. This measure ties directly to the goal of the experiment. You won’t always be able to find a response variable that ties so directly to the goal of your test, but when you do, rejoice. There are some other measures the testers could’ve used. For example, they could’ve looked at how long a projectile was detected prior to its impact on the target. Similarly, they could’ve measured the distance from the target at time of detection. Both of these measures would give more detailed information than detection alone. However, they’d be harder to measure precisely. Addiing additional instrumentation to the Q-53 and to the test projectiles being fired at the range would add elements to the experiment that would make it less realistic. Perhaps instrumenting the projectiles would make them easier to detect. Regardless, the testers deemed the detection probability adequate to make their assessment of the system. 7.1.2 Data Analysis Having identified their response variable, the testers collected data on which projectils were detected. Table 1 shows the first 20 shots collected. tb &lt;- readr::read_csv(&quot;datasets/Experimental/counterfire-radar/counterfire-radar.csv&quot;) %&gt;% filter(Mission %in% c(1:4)) hist(tb$Detection) It’s clear that the system detects these projectiles with a high probability, but what conclusions can we draw from these data? Does the system detect projectiles at a high enough rate to be useful to a commander in the field? Typically, you’ll want to think about these questions before designing a test or analyzing your data. In the case of this counterfire radar, the US Army has specified in requirements documents what it deems to be “good enough” in terms of detection probability. Suppose the Army requires that the system be able to detect at least 80% of incoming projectiles. Using that requirement, we can compare the probabiltiy of detection we observed in our sample and get an idea of whether or not the system is good enough: n &lt;- nrow(tb) phat &lt;- mean(tb$Detection) phat ## [1] 0.804878 Let the true probability of detection for this radar system be \\(\\pi\\), a value somewhere between \\(0\\) and \\(1\\). Then our estimate for \\(\\pi\\) is denoted: \\[\\hat\\pi = \\frac{1}{n}\\sum_{i = 1}^n x_i\\] In this equation, \\(x_i\\) is 1 or a 0 depending on whether or not we detected the \\(i\\)th projectile, and \\(n\\) is the total number of observations we have. We can use this notation to state the research problem we describe above more formally: We want to determine if \\(\\pi &gt; 0.8 = 80%\\). To do this, we’re going to use our estimat, \\(\\hat \\pi\\). The simplest approach is to just say that \\(\\hat \\pi\\) is our best guess for \\(\\pi\\), so let’s just ask if \\(\\hat \\pi&gt; 0.8\\). Based on our data above, we have: $= $0.804878. This is larger than 0.8, so it looks like we’re good to go! Unforunately, \\(\\hat \\pi\\) is an estimate of \\(\\pi\\) and not the true value. It is based on a random sample, which are subject to variability. Before drawing any conclusions, it’s important to ask the question, “How sure are we that \\(\\hat\\pi\\) is close to \\(\\pi\\)?” 7.2 Hypothesis testing The framework used throughout modern science to answer these sorts of question is known as Null Hypothesis Significance Testing (NHST), or more concisely, hypothesis testing. The basic approach is to frame our research question as a comparison between two possible realities and then decide, based on the data, if one of those realities is sufficiently implausible to discard as an actual possibility. For our application, the two competing realities are one in which the radar’s performance meets the desired performance of the Army (that is, \\(\\pi &gt; 0.8\\)) and one where it does not (\\(\\pi \\le 0.8\\)). These possibilities are derived directly from our research question, and are typically phrased explicitly as a Null Hypothesis (denoted \\(H_0\\)) and an Alternative Hypothesis (denoted \\(H_1\\) or \\(H_a\\)). The null hypothesis is typically written in such a way that, if we can prove it is not true, we will have learned important information. For this example, if we can show that the system’s probability of detection isn’t worse than \\(0.8\\), we’ll know that it’s at least good enough to meet the Army’s desired level of performance. Therefore, we write our null and alternative thus: \\[H_0: \\pi \\le 0.8\\] \\[H_1: \\pi &gt; 0.8\\] Our goal is to determine, based on the sample we’ve collected, whether \\(H_0\\) is plausible. There are many ways that statisticians have developed over the years of determining this, but we’ll focus on one for now. The first thing to do is consider our data, which are records of whether or not the radar system detected each of the 41 projectiles shot during the test event. We must make some general assumptions about these data if we’re to get anyhwere. Plausible assumptions include: One shot is independent from the next The underlying probability of detection for each shot is the same If these assumptions hold, than each observation is a Bernoulli random variable with \\(P(Detect) = \\pi\\) and \\(P(NoDetect) = 1 - \\pi\\). This is very useful knowledge, since we know a lot about how Bernoulli random variables behave. For example, software can simulate Bernoulli random very easily. The function rbernoulli in the purrr package will simulate the outcomes of n random draws from a Bernoulli distribution with probability of success pi. The function will output TRUE for each success and FALSE for each failure. For our example, TRUE will represent the case where the radar detected the projectile and FALSE will represent the case where the radar failed to detect the projectile. This allows us to simulate what might have happened in our experiment. To do this, we need to provide values for n and pi. Luckily, we know the number of observations we had in our experiment ($n = $ 41), and we can postulate a value for pi based on our hypotheses above. Recall that our goal is to determine whether \\(H_0\\) is plausible. If the outcome of our actual data is consistent with what the outcome might have looked like if \\(H_0\\) was true, then we’ll conclude that \\(H_0\\) is plausible. So let’s plug in a value for pi based on the values of \\(\\pi\\) given in \\(H_0\\). The highest value of \\(\\pi\\) included in \\(H_0\\) is \\(0.8\\), so we’ll go with that. (If we chose a lower value, our comparison would be less compelling, so when we take this approach, we’ll always choose the value under \\(H_0\\) that’s closest to the values included under \\(H_a\\).) We can now simulate what the outcome of our experiment might have looked like if \\(H_0\\) was true: set.seed(20200401) simulated_trials &lt;- purrr::rbernoulli(n, .8) mean(simulated_trials) ## [1] 0.8292683 But this is just one possible outcome. Each trial is random, so the overall outcome is random, too. This means that we should look at many possible results from the experiment to get a more complete picture of what things might look like under \\(H_0\\). The code below simulates 10,000 experiments and calcualtes the sample proportion for each. These sample proportions are then plotted in a histogram: nsim &lt;- 10000 simulation_results &lt;- tibble(`Sample Statistic` = rep(0, nsim)) for(i in 1:nsim){ simulation_results$`Sample Statistic`[i] &lt;- mean(purrr::rbernoulli(n, .8)) } simulation_results %&gt;% ggplot(aes(x = `Sample Statistic`)) + geom_histogram(bins = 10) 7.2.1 Wald tests Luckily, we have tools available to help us answer that question! Specifically, we can use the standard error, which was introduced in Chapter 4. Recall that the equation for the standard error of \\(\\hat\\pi\\) is \\[SE(\\hat\\pi) = \\sqrt{\\frac{\\hat\\pi (1 - \\hat\\pi)}{n}}\\] For our observed data, \\(SE(\\hat\\pi) =\\) 0.06. Using these values, we can determine with greater precision whether the true performance of the radar system meets the desired level of performance. –&gt; –&gt; –&gt; "],
["twocategorical.html", "Chapter 8 Inference for Two Categorical Variables", " Chapter 8 Inference for Two Categorical Variables We have finished a nice book. "],
["anova.html", "Chapter 9 One-Way ANOVA 9.1 Motivating example 9.2 Simple model for the data 9.3 exploratory analysis 9.4 sources of variation 9.5 statistical model and analysis 9.6 compare analyses", " Chapter 9 One-Way ANOVA Learning objectives for this lesson: - Write one-way ANOVA model - Define terms - state assumptions - interpret results - Interpret ANOVA table - Describe SSE, SST, MSE - F-statistic - degrees of freedom - understand how all of these interrelate - Understand how to compare mulitple group means how ANOVA is similar/different to t-tests - Understand partitioning of variation and coefficient of determination 9.1 Motivating example The United States Air Force Academy has 24 sections of Calculus I, taught by three different types of instructors: In-uniform instructors, full-time civilian instructors, and visiting faculty. The Dean of Students wants to give students the best experience possible and make sure that all three types of instructors are doing a good job. There are plausible reasons why any one of the three could be doing well: In-uniform instructors are all members of the Air Force, and students may be extra attention in these classes because they know that these instructors rank above them in their chain of command. On the other hand, full-time instructors have been aroudn the Academy for many years and understand the Cadets and their workloads. Alternatively, visiting facutly tend to come from prestigeous institutions and may be familiar with more recently-developed pedagogical techniques. Regardless, the Dean wants to understand if there is any variation in end-of-semester grades of classes taught by these three types of instructors. At the end of the semester, she collects the average grades from each of the 24 sections. How can she go about investigating this question? Recall from Chapter 6 that we can use t-tests to compare two group means. In this case, we’d like to do a comparison across three groups, and instead of looking at a direct comparison of one group to another, what the Dean is interested in is whether there’s an overall difference across the three groups. One option might be to just do a bunch of different t-tests. We could first compare classes taught by in-uniform instructors to classes taught by full-time civilians, then compare the classes taught by the in-uniform instructors to the classes taugth by the visiting instructors, and then finally compare the classes taugth by the full-time civilains with the classes taught by the visiting facutly. We’d end up with three p-values, each addressing different questions than the one we initially set out to answer. We could do the same thing, except comparing courses taught by one type of instructor to the combined group of courses taught by the other two, and this gets a bit closer to the mark. But we’re still doing three tests that individually fail to answer the Dean’s question. What we’d like instead is a single hypothesis that we could test that direclty gets at the Dean’s concern about whether the three types of instructors were producing end-of-semester grades that were, on average, the same. [Need to make that motivation clearer above.] 9.2 Simple model for the data Narrative explanation that instructor type might matter, there shold be some variation from class to class. - write some things in greek, including model without any difference by instructor type - wirte model with differences by instructor type - note that we can use Gaussian errors b/c Academy grades do actually tend to be centered around a C, particularly for classes like Calc - discuss model assumptions in general sense 9.3 exploratory analysis course-to-course variability is expected maybe show a plot of it or something visualize groups using box-and-whisker plots 9.4 sources of variation Things like student population, time of day, etc. But we’ll throw this all into an error term and focus on the main one, instructor type 9.5 statistical model and analysis ANVOA model explicit w/ assumptions variation around overall mean w/ no groups variation around group means introduce idea of reference level 9.6 compare analyses t-test methods from above ANOVA method compare and contrast results, interpretations, etc. "],
["multiway.html", "Chapter 10 Multi-way ANOVA", " Chapter 10 Multi-way ANOVA We have finished a nice book. "],
["block.html", "Chapter 11 Block Designs", " Chapter 11 Block Designs We have finished a nice book. "],
["regression.html", "Chapter 12 Regression Models", " Chapter 12 Regression Models We have finished a nice book. "],
["glm.html", "Chapter 13 The General Linear Model", " Chapter 13 The General Linear Model We have finished a nice book. "],
["mixedmodels.html", "Chapter 14 Mixed Models", " Chapter 14 Mixed Models We have finished a nice book. "],
["repeatedmeasures.html", "Chapter 15 Split Plot and Repeated Measures Designs", " Chapter 15 Split Plot and Repeated Measures Designs We have finished a nice book. "],
["logistic.html", "Chapter 16 Logistic Regression and Generalized Linear Models 16.1 Stuff here", " Chapter 16 Logistic Regression and Generalized Linear Models 16.1 Stuff here We have finished a nice book. "],
["glmm.html", "Chapter 17 Generalized Linear Mixed Models", " Chapter 17 Generalized Linear Mixed Models We have finished a nice book. "],
["learningobj.html", "Chapter 18 Appendix - Learning Objectives 18.1 Book-level 18.2 Topic-level 18.3 From ST512 18.4 For Point Estimates Chapter", " Chapter 18 Appendix - Learning Objectives 18.1 Book-level After reading this book you will be able to: identify relevent sources of variability for a potential study and, if applicable, utilize principles of design to plan a reasonable experiment to help answer questions of interest covariates noise variables random effects variance of indidvidual observations vice variance of summary statistics randomization systematic variation of factors/covariates factor identifiability understand issues surrounding multiple comparisons Bonferroni correction at least one other method (Tukey?) tradeoffs from replication within groups vice getting more groups compare and contrast methods for designing an experiment when the goal of a study is prediction versus when the goal is statistical inference explain the general concept of point estimation and how to account for sampling variability definition identify the right point estimate for your response variable of interest estimating uncertainty for point estimates normal approximation bootstrap CI others? Types of point estimates: means Simple effects interaction effects main effects standard deviations/variance components correlation coefficients quantiles/percentiles from distributions probabilities parameters of a distribution model parameters describe relevant properties of random variables and probabilities Distinguish between mutually exclusive and independent events. Calculate probability for a given scenario, either numerically or using a Venn diagram. Apply the General Addition Rule to solve probability problems. Apply the Rules for Probability Distributions to create a probability distribution for a given scenario. Use the complement of an event to solve probability problems. Apply the Multiplication Rule for Independent Processes to solve probability problems. random variables have a defined set of possible outcomes (“sample space”) Discrete vs. continuous RVs others??? probabilities/PDFs between 0 and 1 inclusive sum of probability of all possible events is 1 \\(P(A) + P(A^c) = 1\\), where \\(A\\) is an event and \\(A^c\\) is the complement of A explain the importance of statistical distributions when conducting statistical inference normal distribution and approximations plus properties robustness generality CLT costs and benefits of using nonparametric approaches describe the fundamental inferential techniques of hypothesis testing and confidence intervals as well as compare and contrast their uses and interpretations identify a null and alternative for a given problem - interpret hypotheses - characterize the test statistic under the null - explain what a rejection region and be able to identify one - define statistical power - calculate statistical power for one- and two-sample tests of continuous and binary random variables - define statistical confidence - identify when using a CI and NSHT will result in the same conclusion - explain when you can use a confidence interval to test for differences (e.g., comparing a single point estimate to a threshold) and when you can’t (e.g., when you have CIs for two different means) choose appropriate numerical summaries and graphical displays for a set of data and create these using software when to use tables vs. a picture types of graphical displays bar charts pie charts plotting data vice just predictions/conclusions when to include uncertainty bounds five-number summaries means vs. medians general plotting recommendations use of colors in you plots (discrete vs. divergent vs. continuous color scales, gray-scale, color-blind-friendly scales) use of annotations general graphical design philosophy (building a chart to illustrate a conclusion) trade-offs between detail and interpretability not screwing up your axes fit statistical models in software and interpret their output Which PROCs from SAS? REG, GLM, MIXED, GLIMMIX, others?? lm(), glm(), anova() …. broom? modelr? ciTools? p-values, point estimates, standard errors, f-statistics, chi-square-statistics, degrees of freedom, SS/MS, residual plots connect common statistical methods under the linear model framework Write statistical models using matrix representaiton identify models written in matrix representation with their representation in software identify when models written in different notation are the same or different describe when specific models will give you the same results ANOVA w/ 2 factors and a t-test or a SLR ANCOVA and MLR random effects vs. fixed effects split plots vs. more general mixed models logistic regression w/ categorical factors vice contingency table analysis discuss differences in assumptions associated with ANOVA vice SLR/MLR articulate the scope of inferential conclusions in light of the method of data collection, the experimental design used, the assumptions made, and the statistical analysis applied limitations due to sampling/sample frame missing data modeling assumptions sampling assumptions requirements for causal inference 18.2 Topic-level 18.2.1 Chapter 2 - Sampling, Design, and Exploratory Data Analysis 18.2.2 Chapter 3 - Point Estimation 18.2.3 Chapter 4 - Accounting for Uncertainty in Estimation 18.2.4 Chapter 5 - Inference via Hypothesis Testing for a Proportion or Mean 18.2.5 Chapter 6 - Inference via Confidence Intervals for a Proportion or Mean 18.2.6 Chapter 7 - Inference on Two Categorical Variables 18.2.7 Chapter 8 - Inference for Multiple Means 18.2.8 Chapter 9 - Multiway ANOVA 18.2.9 Chapter 10 - Block Designs 18.2.10 Chapter 11 - Regression 18.2.11 Chapter 12 - The General Linear Model 18.2.12 Chapter 13 - Mixed Models 18.2.13 Chapter 14 - Repeated Measures and Split Plot Designs 18.2.14 Chapter 15 - Logistic Regression and Generalized Linear Models 18.2.15 Chapter 16 - Generalized Linear Mixed Models 18.3 From ST512 WE NEED TO ORGANIZE THESE UNDER DIFFERENT CHAPTERS AT SOME POINT Learning Objectives Recognize a completely randomized design with one treatment factor and write the corresponding one-way analysis of variance model, with assumptions Estimate treatment means Estimate the variance among replicates within a treatment Construct the analysis of variance table for a one factor analysis of variance, including computing degrees of freedom, sums of squares, mean squares, and F-ratios Interpret results and draw conclusions from a one-factor analysis of variance Estimate differences between two treatment means in a one factor analysis of variance Test differences between two treatment means in a one factor analysis of variance Construct a contrast to estimate or test a linear combination of treatment means Estimate the standard error of a linear combination of treatment means Make inferences about linear combinations of treatment means, including contrasts. Obtain and understand SAS output for linear combinations of treatment means, including contrasts. Explain when and why corrections for multiple comparisons are needed Know when and how to use Tukey’s correction for all pairwise comparisons Compute Bonferroni confidence intervals Create and interpret orthogonal contrasts. Define main effects and interactions Write contrasts to estimate main effects and interactions Estimate these contrasts and their standard errors Compute sums of squares associated with these contrasts Test hypotheses about the main effects and interactions. Identify and define simple effects. Identify and define interaction effects. Identify and define main effects. Understand when to use simple, interaction, and main effects when drawing inferences in a two-way ANOVA. Write the analysis of variance model and SAS code for a completely randomized design with two factors Test hypotheses and interpret the analysis of variance for a factorial experiment. Explain the appropriate use of correlations and compute the correlation coefficient Read and interpret a scatterplot and guess the correlation coefficient by examination of a scatter plot Interpret the strength and direction of association indicated by the correlation coefficient and judge when a correlation coefficient provides an appropriate summary of a bivariate relationship Test the hypothesis that the correlation coefficient is zero using either a t-test or the Fisher z transformation, Compute confidence intervals using Fisher’s z transformation Write a statistical model for a straight line regression or a multiple regression and explain what all the terms of the model represent Explain the assumptions underlying regression models, evaluate whether the assumptions are met Estimate the intercept, slope and variance for a simple linear regression model Fit a multiple regression model in SAS and interpret the output, use the coefficient of determination to evaluate model fit Use a regression model to predict Y for new values of X Estimate the variance and standard error of parameters in regression models, test hypotheses about the parameters, and construct confidence intervals for the parameters. Explain the difference between a confidence interval and a prediction interval and know when to use each of them Construct a confidence interval for the expected value of Y at a given value of X Construct a prediction interval for a new value of Y at a given value of X Write a linear model in matrix notation Find the expectation and variance of a linear combination of random variables, a’Y Set up the expressions to calculate parameter estimates and predicted values using the matrix form of the model Estimate standard errors for parameter estimates and predicted values Use extra sums of squares to test hypotheses about subsets of parameters Construct indicator variables for including categorical regressor variables in a linear model Understand how to interpret parameters of a general linear model with indicator variables Estimate contrasts of treatment means and their standard errors using the general linear model notation and matrix form of the model Compare nested models with a lack of fit test to select a model Explain what a covariate is and how they are used Explain the assumptions of the analysis of covariance model and determine when these assumptions are met Fit an analysis of covariance model in SAS and conduct appropriate tests for treatment effects Estimate and interpret treatment means and their standard errors adjusted for covariates using SAS, Construct confidence intervals for adjusted treatment means Construct and estimate contrasts of treatment means adjusted for covariates and estimate the standard errors and confidence intervals of such contrasts. Analysis of variance and design of experiments Recognize each of the following types of experimental designs and determine when each type would be advantageous. 1. completely randomized design 2. randomized complete block design 3. split plot design Recognize whether factors should be considered fixed effects or random effects and explain the scope of inference for each case. Recognize whether factors are crossed or nested. For all of the designs listed and for experiments with crossed and/or nested fixed factors, random factors, or a combination of fixed and random effects, be able to 1. Write the corresponding analysis of variance model, with assumptions, and define all terms 2. Estimate treatment means and their standard errors 3. Construct the analysis of variance table, including computing degrees of freedom, sums of squares, mean squares, and F-ratios 4. Determine whether the assumptions of the model are satisfied 5. Interpret results and draw conclusions 6. Construct and estimate linear combinations of treatment means and their standard errors 7. Test hypotheses and construct confidence intervals about linear combinations of treatment means 8. Explain when and why corrections for multiple comparisons are needed, know when and how to use Tukey’s correction for all pairwise comparisons, compute Bonferroni confidence intervals 9. Create and interpret orthogonal contrasts. 10. Define and interpret main effects, simple effects and interactions 11. Use a table of expected mean squares to estimate variance components and determine appropriate F-statistics for testing effects in the analysis of variance 12. Interpret variance components and estimate and interpret the intraclass correlation coefficient. Regression and correlation Explain the appropriate use of correlations and compute the correlation coefficient, read and interpret a scatterplot and guess the correlation coefficient by examination of a scatter plot, test the hypothesis that the correlation coefficient is zero using either a t-test or the Fisher z transformation, compute confidence intervals using Fisher’s z transformation You should be able to do the following for fitting models to describe the relationships of one or several variables to a response variable. The regressor variables may be continuous or categorical or a mix of the two (e.g., analysis of covariance models) 1. Write a general linear model, including assumptions, in standard or matrix notation, and explain what all the terms and assumptions represent. Be able to handle models that contain interaction terms, polynomial terms, and dummy variables. 2. Evaluate whether the model assumptions are met 3. Fit a general linear model in SAS and interpret the output 4. Work with the general linear model in matrix form, including finding the expectation and variance of a linear combination of regression coefficients or treatment means 5. Test hypotheses and construct confidence intervals for linear combinations of the parameters 6. Construct and interpret a confidence interval for the expected value of Y at a given value of X 7. Construct and interpret a prediction interval for a new value of Y at a given value of X 8. Use extra sums of squares to test hypotheses about subsets of parameters. 9. Explain what a covariate is and how covariates are used 18.4 For Point Estimates Chapter Definitions for Mean, Median, Quantile, Percentile Explain uses for the above Identify the correct point estimate to use for a given test Define Systematic Random Sample and Convenience Sample Explain strengths and weaknesses of each Identify conditions when Systematic and Convenience Sampling may not provide representitive samples "],
["references.html", "References", " References "],
["notation.html", "Chapter 19 Appendix - Notation 19.1 Standard notation 19.2 Mixed models 19.3 Effects model representation 19.4 Estimators vs. Estimates", " Chapter 19 Appendix - Notation 19.1 Standard notation Vectors of variables are denoted with Roman letters, such as \\(x\\) and \\(Y\\). Capital letters denote random variables while lower case letters denote fixed variables. Note that these vectors may be of length 1 depending on context. Bolded values (\\(x\\)) denote matrices, and in the case of \\(Y\\), possibly single-column matrices. Unknown parameters are denoted with Greek letters, with boldface font indicating matrices. In most models, \\(Y\\) will denote the univariate response, \\(x\\) will describe a matrix of predictor variables, and \\(E\\) a vector of random errors. The Greek letter \\(\\beta\\) will be commonly used for regression parameters (either with subscripts for each values as in \\(\\beta_0 + \\beta_1 X_1\\) or as a vector (as in \\(X\\beta\\)). The letters \\(i, j, k,\\) and \\(l\\) will be most commonly used as subscripts or indices. \\(N\\) will typically denote a sample size (not a random vector), with subscripted versions (\\(n_i\\)) describing the number of observations in a group, and \\(p\\) describing the number of parameters in a model beyond the intercept. We may therefore describe a simple linear regresion model as: \\[Y = x\\beta + E\\] In this model, \\(Y\\) is a \\(N\\times 1\\) random vector, \\(x\\) is a \\(N\\times (p + 1)\\) matrix of fixed values, and \\(E\\) is a \\(N \\times 1\\) vector. \\(\\pi\\) is typically used to describe probability parameters, as in Bernoulli or binomial random variables. 19.2 Mixed models Still need to add something for this 19.3 Effects model representation In the effects formulation of ANOVA models, additional greek letters (\\(\\alpha\\), \\(\\gamma\\), etc.) will appear as parameter effects, as will \\(\\mu\\), which will typically represent the grand mean. Group-specfic means will be denoted via subscripts: \\(\\mu_{ij}\\). When using this representation, it is convenient to describe a single observation as \\(Y_{ijk}\\), which is the \\(k\\)th observation from the group with with the \\(i\\)th level of the first factor and the \\(j\\)th level of the second factor. In the main effects version of this model, we have: \\[Y_{ijk} = \\mu + \\alpha_i + \\gamma_j + E_{ijk}\\] We can therefore estimate \\(\\mu_{ij}\\) as \\(\\hat \\mu_{ij} = \\frac{1}{n}\\sum_{k = 1}^n Y_{ijk} = \\bar{Y}_{ij\\cdot}\\). This “dot” notation can be extended to any subscript and indicates summing over the index that has been replaced by the dot. Further note that the “hat” over a paremeter value denotes the estimator for that parameter value, and the “bar” indicates an average. These features are used generally throughout this book. 19.4 Estimators vs. Estimates If we want to get pedantic, we can differentiate between estimates and estimators in our notation. Estimators are functions of random variables used to estimate parameters. Estimates are realized values of estimators. To differentiate these, we use Roman letters with hats to represent estimators (\\(\\hat B = (x&#39;x )^{-1}x&#39;Y\\)) and Greek letters with hats to represent estimates (\\(\\hat \\beta = 1.52\\)). Define the objective of the experiment and understand the background (Define Objective &amp; Background) Select appropriate response variables (Select Response) Identify sources of variation (Determine Sources of Variation) Choose sampling scheme and/or experimental design (Select Design) Carry out the study (Do Study) Statistically analyze the data (Do Statistical Analysis) Draw conclusions from the analysis while considering limitations and the steps above as well as communicate results (Draw Conclusions &amp; Communicate) "]
]
